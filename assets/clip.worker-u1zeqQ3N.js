(function(){"use strict";var _d={},Qh={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(yt,pe,u)=>{yt.exports=u.p+"ort-wasm-simd-threaded.jsep.wasm"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{Environment:()=>qe,Interpreter:()=>ut,Template:()=>xt,parse:()=>Ee,tokenize:()=>P});var v=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),W=Object.freeze({set:v.Set,for:v.For,in:v.In,is:v.Is,if:v.If,else:v.Else,endif:v.EndIf,elif:v.ElseIf,endfor:v.EndFor,and:v.And,or:v.Or,not:v.Not,"not in":v.NotIn,macro:v.Macro,endmacro:v.EndMacro,true:v.BooleanLiteral,false:v.BooleanLiteral,True:v.BooleanLiteral,False:v.BooleanLiteral}),me=class{constructor(M,U){this.value=M,this.type=U}};function be(M){return/\w/.test(M)}function Me(M){return/[0-9]/.test(M)}var D=[["{%",v.OpenStatement],["%}",v.CloseStatement],["{{",v.OpenExpression],["}}",v.CloseExpression],["(",v.OpenParen],[")",v.CloseParen],["{",v.OpenCurlyBracket],["}",v.CloseCurlyBracket],["[",v.OpenSquareBracket],["]",v.CloseSquareBracket],[",",v.Comma],[".",v.Dot],[":",v.Colon],["|",v.Pipe],["<=",v.ComparisonBinaryOperator],[">=",v.ComparisonBinaryOperator],["==",v.ComparisonBinaryOperator],["!=",v.ComparisonBinaryOperator],["<",v.ComparisonBinaryOperator],[">",v.ComparisonBinaryOperator],["+",v.AdditiveBinaryOperator],["-",v.AdditiveBinaryOperator],["*",v.MultiplicativeBinaryOperator],["/",v.MultiplicativeBinaryOperator],["%",v.MultiplicativeBinaryOperator],["=",v.Equals]],E=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function N(M,U={}){return M.endsWith(`
`)&&(M=M.slice(0,-1)),M=M.replace(/{#.*?#}/gs,"{##}"),U.lstrip_blocks&&(M=M.replace(/^[ \t]*({[#%])/gm,"$1")),U.trim_blocks&&(M=M.replace(/([#%]})\n/g,"$1")),M.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function P(M,U={}){const A=[],ee=N(M,U);let he=0;const Ze=Ke=>{let _t="";for(;Ke(ee[he]);){if(ee[he]==="\\"){if(++he,he>=ee.length)throw new SyntaxError("Unexpected end of input");const rt=ee[he++],Te=E.get(rt);if(Te===void 0)throw new SyntaxError(`Unexpected escaped character: ${rt}`);_t+=Te;continue}if(_t+=ee[he++],he>=ee.length)throw new SyntaxError("Unexpected end of input")}return _t};e:for(;he<ee.length;){const Ke=A.at(-1)?.type;if(Ke===void 0||Ke===v.CloseStatement||Ke===v.CloseExpression){let rt="";for(;he<ee.length&&!(ee[he]==="{"&&(ee[he+1]==="%"||ee[he+1]==="{"));)rt+=ee[he++];if(rt.length>0){A.push(new me(rt,v.Text));continue}}Ze(rt=>/\s/.test(rt));const _t=ee[he];if(_t==="-"||_t==="+"){const rt=A.at(-1)?.type;if(rt===v.Text||rt===void 0)throw new SyntaxError(`Unexpected character: ${_t}`);switch(rt){case v.Identifier:case v.NumericLiteral:case v.BooleanLiteral:case v.StringLiteral:case v.CloseParen:case v.CloseSquareBracket:break;default:{++he;const Te=Ze(Me);A.push(new me(`${_t}${Te}`,Te.length>0?v.NumericLiteral:v.UnaryOperator));continue}}}for(const[rt,Te]of D)if(ee.slice(he,he+rt.length)===rt){A.push(new me(rt,Te)),he+=rt.length;continue e}if(_t==="'"||_t==='"'){++he;const rt=Ze(Te=>Te!==_t);A.push(new me(rt,v.StringLiteral)),++he;continue}if(Me(_t)){const rt=Ze(Me);A.push(new me(rt,v.NumericLiteral));continue}if(be(_t)){const rt=Ze(be),Te=Object.hasOwn(W,rt)?W[rt]:v.Identifier;Te===v.In&&A.at(-1)?.type===v.Not?(A.pop(),A.push(new me("not in",v.NotIn))):A.push(new me(rt,Te));continue}throw new SyntaxError(`Unexpected character: ${_t}`)}return A}var Y=class{type="Statement"},Z=class extends Y{constructor(M){super(),this.body=M}type="Program"},oe=class extends Y{constructor(M,U,A){super(),this.test=M,this.body=U,this.alternate=A}type="If"},le=class extends Y{constructor(M,U,A,ee){super(),this.loopvar=M,this.iterable=U,this.body=A,this.defaultBlock=ee}type="For"},L=class extends Y{constructor(M,U){super(),this.assignee=M,this.value=U}type="Set"},te=class extends Y{constructor(M,U,A){super(),this.name=M,this.args=U,this.body=A}type="Macro"},J=class extends Y{type="Expression"},de=class extends J{constructor(M,U,A){super(),this.object=M,this.property=U,this.computed=A}type="MemberExpression"},ae=class extends J{constructor(M,U){super(),this.callee=M,this.args=U}type="CallExpression"},j=class extends J{constructor(M){super(),this.value=M}type="Identifier"},I=class extends J{constructor(M){super(),this.value=M}type="Literal"},R=class extends I{type="NumericLiteral"},k=class extends I{type="StringLiteral"},_e=class extends I{type="BooleanLiteral"},we=class extends I{type="ArrayLiteral"},Ce=class extends I{type="TupleLiteral"},Se=class extends I{type="ObjectLiteral"},Pe=class extends J{constructor(M,U,A){super(),this.operator=M,this.left=U,this.right=A}type="BinaryExpression"},Ye=class extends J{constructor(M,U){super(),this.operand=M,this.filter=U}type="FilterExpression"},Xe=class extends J{constructor(M,U){super(),this.iterable=M,this.test=U}type="SelectExpression"},ct=class extends J{constructor(M,U,A){super(),this.operand=M,this.negate=U,this.test=A}type="TestExpression"},ge=class extends J{constructor(M,U){super(),this.operator=M,this.argument=U}type="UnaryExpression"},V=class extends J{constructor(M=void 0,U=void 0,A=void 0){super(),this.start=M,this.stop=U,this.step=A}type="SliceExpression"},ce=class extends J{constructor(M,U){super(),this.key=M,this.value=U}type="KeywordArgumentExpression"};function Ee(M){const U=new Z([]);let A=0;function ee(Qe,St){const Ot=M[A++];if(!Ot||Ot.type!==Qe)throw new Error(`Parser Error: ${St}. ${Ot.type} !== ${Qe}.`);return Ot}function he(){switch(M[A].type){case v.Text:return _t();case v.OpenStatement:return rt();case v.OpenExpression:return Te();default:throw new SyntaxError(`Unexpected token type: ${M[A].type}`)}}function Ze(...Qe){return A+Qe.length<=M.length&&Qe.some((St,Ot)=>St!==M[A+Ot].type)}function Ke(...Qe){return A+Qe.length<=M.length&&Qe.every((St,Ot)=>St===M[A+Ot].type)}function _t(){return new k(ee(v.Text,"Expected text token").value)}function rt(){ee(v.OpenStatement,"Expected opening statement token");let Qe;switch(M[A].type){case v.Set:++A,Qe=$(),ee(v.CloseStatement,"Expected closing statement token");break;case v.If:++A,Qe=ie(),ee(v.OpenStatement,"Expected {% token"),ee(v.EndIf,"Expected endif token"),ee(v.CloseStatement,"Expected %} token");break;case v.Macro:++A,Qe=ve(),ee(v.OpenStatement,"Expected {% token"),ee(v.EndMacro,"Expected endmacro token"),ee(v.CloseStatement,"Expected %} token");break;case v.For:++A,Qe=ke(),ee(v.OpenStatement,"Expected {% token"),ee(v.EndFor,"Expected endfor token"),ee(v.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${M[A].type}`)}return Qe}function Te(){ee(v.OpenExpression,"Expected opening expression token");const Qe=ze();return ee(v.CloseExpression,"Expected closing expression token"),Qe}function $(){const Qe=ze();if(Ke(v.Equals)){++A;const St=$();return new L(Qe,St)}return Qe}function ie(){const Qe=ze();ee(v.CloseStatement,"Expected closing statement token");const St=[],Ot=[];for(;!(M[A]?.type===v.OpenStatement&&(M[A+1]?.type===v.ElseIf||M[A+1]?.type===v.Else||M[A+1]?.type===v.EndIf));)St.push(he());if(M[A]?.type===v.OpenStatement&&M[A+1]?.type!==v.EndIf)if(++A,Ke(v.ElseIf))ee(v.ElseIf,"Expected elseif token"),Ot.push(ie());else for(ee(v.Else,"Expected else token"),ee(v.CloseStatement,"Expected closing statement token");!(M[A]?.type===v.OpenStatement&&M[A+1]?.type===v.EndIf);)Ot.push(he());return new oe(Qe,St,Ot)}function ve(){const Qe=Tr();if(Qe.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const St=Dt();ee(v.CloseStatement,"Expected closing statement token");const Ot=[];for(;Ze(v.OpenStatement,v.EndMacro);)Ot.push(he());return new te(Qe,St,Ot)}function Fe(Qe=!1){const St=Qe?Tr:ze,Ot=[St()],Zr=Ke(v.Comma);for(;Zr&&(++A,Ot.push(St()),!!Ke(v.Comma)););return Zr?new Ce(Ot):Ot[0]}function ke(){const Qe=Fe(!0);if(!(Qe instanceof j||Qe instanceof Ce))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${Qe.type} instead`);ee(v.In,"Expected `in` keyword following loop variable");const St=ze();ee(v.CloseStatement,"Expected closing statement token");const Ot=[];for(;Ze(v.OpenStatement,v.EndFor)&&Ze(v.OpenStatement,v.Else);)Ot.push(he());const Zr=[];if(Ke(v.OpenStatement,v.Else))for(++A,++A,ee(v.CloseStatement,"Expected closing statement token");Ze(v.OpenStatement,v.EndFor);)Zr.push(he());return new le(Qe,St,Ot,Zr)}function ze(){return lt()}function lt(){const Qe=nt();if(Ke(v.If)){++A;const St=nt();if(Ke(v.Else)){++A;const Ot=nt();return new oe(St,[Qe],[Ot])}else return new Xe(Qe,St)}return Qe}function nt(){let Qe=bt();for(;Ke(v.Or);){const St=M[A];++A;const Ot=bt();Qe=new Pe(St,Qe,Ot)}return Qe}function bt(){let Qe=ft();for(;Ke(v.And);){const St=M[A];++A;const Ot=ft();Qe=new Pe(St,Qe,Ot)}return Qe}function ft(){let Qe;for(;Ke(v.Not);){const St=M[A];++A;const Ot=ft();Qe=new ge(St,Ot)}return Qe??Et()}function Et(){let Qe=zt();for(;Ke(v.ComparisonBinaryOperator)||Ke(v.In)||Ke(v.NotIn);){const St=M[A];++A;const Ot=zt();Qe=new Pe(St,Qe,Ot)}return Qe}function zt(){let Qe=jt();for(;Ke(v.AdditiveBinaryOperator);){const St=M[A];++A;const Ot=jt();Qe=new Pe(St,Qe,Ot)}return Qe}function Ge(){const Qe=Jt();return Ke(v.OpenParen)?Bt(Qe):Qe}function Bt(Qe){let St=new ae(Qe,Dt());return Ke(v.OpenParen)&&(St=Bt(St)),St}function Dt(){ee(v.OpenParen,"Expected opening parenthesis for arguments list");const Qe=Gt();return ee(v.CloseParen,"Expected closing parenthesis for arguments list"),Qe}function Gt(){const Qe=[];for(;!Ke(v.CloseParen);){let St=ze();if(Ke(v.Equals)){if(++A,!(St instanceof j))throw new SyntaxError("Expected identifier for keyword argument");const Ot=ze();St=new ce(St,Ot)}Qe.push(St),Ke(v.Comma)&&++A}return Qe}function Xt(){const Qe=[];let St=!1;for(;!Ke(v.CloseSquareBracket);)Ke(v.Colon)?(Qe.push(void 0),++A,St=!0):(Qe.push(ze()),Ke(v.Colon)&&(++A,St=!0));if(Qe.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(St){if(Qe.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new V(...Qe)}return Qe[0]}function Jt(){let Qe=Tr();for(;Ke(v.Dot)||Ke(v.OpenSquareBracket);){const St=M[A];++A;let Ot;const Zr=St.type!==v.Dot;if(Zr)Ot=Xt(),ee(v.CloseSquareBracket,"Expected closing square bracket");else if(Ot=Tr(),Ot.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");Qe=new de(Qe,Ot,Zr)}return Qe}function jt(){let Qe=xr();for(;Ke(v.MultiplicativeBinaryOperator);){const St=M[A];++A;const Ot=xr();Qe=new Pe(St,Qe,Ot)}return Qe}function xr(){let Qe=Nr();for(;Ke(v.Is);){++A;const St=Ke(v.Not);St&&++A;let Ot=Tr();if(Ot instanceof _e&&(Ot=new j(Ot.value.toString())),!(Ot instanceof j))throw new SyntaxError("Expected identifier for the test");Qe=new ct(Qe,St,Ot)}return Qe}function Nr(){let Qe=Ge();for(;Ke(v.Pipe);){++A;let St=Tr();if(!(St instanceof j))throw new SyntaxError("Expected identifier for the filter");Ke(v.OpenParen)&&(St=Bt(St)),Qe=new Ye(Qe,St)}return Qe}function Tr(){const Qe=M[A];switch(Qe.type){case v.NumericLiteral:return++A,new R(Number(Qe.value));case v.StringLiteral:return++A,new k(Qe.value);case v.BooleanLiteral:return++A,new _e(Qe.value.toLowerCase()==="true");case v.Identifier:return++A,new j(Qe.value);case v.OpenParen:{++A;const St=Fe();if(M[A].type!==v.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${M[A].type} instead`);return++A,St}case v.OpenSquareBracket:{++A;const St=[];for(;!Ke(v.CloseSquareBracket);)St.push(ze()),Ke(v.Comma)&&++A;return++A,new we(St)}case v.OpenCurlyBracket:{++A;const St=new Map;for(;!Ke(v.CloseCurlyBracket);){const Ot=ze();ee(v.Colon,"Expected colon between key and value in object literal");const Zr=ze();St.set(Ot,Zr),Ke(v.Comma)&&++A}return++A,new Se(St)}default:throw new SyntaxError(`Unexpected token: ${Qe.type}`)}}for(;A<M.length;)U.body.push(he());return U}function K(M,U,A=1){U===void 0&&(U=M,M=0);const ee=[];for(let he=M;he<U;he+=A)ee.push(he);return ee}function We(M,U,A,ee=1){const he=Math.sign(ee);he>=0?(U=(U??=0)<0?Math.max(M.length+U,0):Math.min(U,M.length),A=(A??=M.length)<0?Math.max(M.length+A,0):Math.min(A,M.length)):(U=(U??=M.length-1)<0?Math.max(M.length+U,-1):Math.min(U,M.length-1),A=(A??=-1)<-1?Math.max(M.length+A,-1):Math.min(A,M.length-1));const Ze=[];for(let Ke=U;he*Ke<he*A;Ke+=ee)Ze.push(M[Ke]);return Ze}function dt(M){return M.replace(/\b\w/g,U=>U.toUpperCase())}var tt=class{type="RuntimeValue";value;builtins=new Map;constructor(M=void 0){this.value=M}__bool__(){return new st(!!this.value)}},at=class extends tt{type="NumericValue"},Oe=class extends tt{type="StringValue";builtins=new Map([["upper",new He(()=>new Oe(this.value.toUpperCase()))],["lower",new He(()=>new Oe(this.value.toLowerCase()))],["strip",new He(()=>new Oe(this.value.trim()))],["title",new He(()=>new Oe(dt(this.value)))],["length",new at(this.value.length)]])},st=class extends tt{type="BooleanValue"},Tt=class extends tt{type="ObjectValue";__bool__(){return new st(this.value.size>0)}builtins=new Map([["get",new He(([M,U])=>{if(!(M instanceof Oe))throw new Error(`Object key must be a string: got ${M.type}`);return this.value.get(M.value)??U??new Re})],["items",new He(()=>new G(Array.from(this.value.entries()).map(([M,U])=>new G([new Oe(M),U]))))]])},Ie=class extends Tt{type="KeywordArgumentsValue"},G=class extends tt{type="ArrayValue";builtins=new Map([["length",new at(this.value.length)]]);__bool__(){return new st(this.value.length>0)}},$e=class extends G{type="TupleValue"},He=class extends tt{type="FunctionValue"},Re=class extends tt{type="NullValue"},Ne=class extends tt{type="UndefinedValue"},qe=class{constructor(M){this.parent=M}variables=new Map([["namespace",new He(M=>{if(M.length===0)return new Tt(new Map);if(M.length!==1||!(M[0]instanceof Tt))throw new Error("`namespace` expects either zero arguments or a single object argument");return M[0]})]]);tests=new Map([["boolean",M=>M.type==="BooleanValue"],["callable",M=>M instanceof He],["odd",M=>{if(M.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${M.type}`);return M.value%2!==0}],["even",M=>{if(M.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${M.type}`);return M.value%2===0}],["false",M=>M.type==="BooleanValue"&&!M.value],["true",M=>M.type==="BooleanValue"&&M.value],["string",M=>M.type==="StringValue"],["number",M=>M.type==="NumericValue"],["integer",M=>M.type==="NumericValue"&&Number.isInteger(M.value)],["iterable",M=>M instanceof G||M instanceof Oe],["lower",M=>{const U=M.value;return M.type==="StringValue"&&U===U.toLowerCase()}],["upper",M=>{const U=M.value;return M.type==="StringValue"&&U===U.toUpperCase()}],["none",M=>M.type==="NullValue"],["defined",M=>M.type!=="UndefinedValue"],["undefined",M=>M.type==="UndefinedValue"],["equalto",(M,U)=>M.value===U.value],["eq",(M,U)=>M.value===U.value]]);set(M,U){return this.declareVariable(M,ht(U))}declareVariable(M,U){if(this.variables.has(M))throw new SyntaxError(`Variable already declared: ${M}`);return this.variables.set(M,U),U}setVariable(M,U){return this.variables.set(M,U),U}resolve(M){if(this.variables.has(M))return this;if(this.parent)return this.parent.resolve(M);throw new Error(`Unknown variable: ${M}`)}lookupVariable(M){try{return this.resolve(M).variables.get(M)??new Ne}catch{return new Ne}}},ut=class{global;constructor(M){this.global=M??new qe}run(M){return this.evaluate(M,this.global)}evaluateBinaryExpression(M,U){const A=this.evaluate(M.left,U);switch(M.operator.value){case"and":return A.__bool__().value?this.evaluate(M.right,U):A;case"or":return A.__bool__().value?A:this.evaluate(M.right,U)}const ee=this.evaluate(M.right,U);switch(M.operator.value){case"==":return new st(A.value==ee.value);case"!=":return new st(A.value!=ee.value)}if(A instanceof Ne||ee instanceof Ne)throw new Error("Cannot perform operation on undefined values");if(A instanceof Re||ee instanceof Re)throw new Error("Cannot perform operation on null values");if(A instanceof at&&ee instanceof at)switch(M.operator.value){case"+":return new at(A.value+ee.value);case"-":return new at(A.value-ee.value);case"*":return new at(A.value*ee.value);case"/":return new at(A.value/ee.value);case"%":return new at(A.value%ee.value);case"<":return new st(A.value<ee.value);case">":return new st(A.value>ee.value);case">=":return new st(A.value>=ee.value);case"<=":return new st(A.value<=ee.value)}else if(A instanceof G&&ee instanceof G)switch(M.operator.value){case"+":return new G(A.value.concat(ee.value))}else if(ee instanceof G){const he=ee.value.find(Ze=>Ze.value===A.value)!==void 0;switch(M.operator.value){case"in":return new st(he);case"not in":return new st(!he)}}if(A instanceof Oe||ee instanceof Oe)switch(M.operator.value){case"+":return new Oe(A.value.toString()+ee.value.toString())}if(A instanceof Oe&&ee instanceof Oe)switch(M.operator.value){case"in":return new st(ee.value.includes(A.value));case"not in":return new st(!ee.value.includes(A.value))}if(A instanceof Oe&&ee instanceof Tt)switch(M.operator.value){case"in":return new st(ee.value.has(A.value));case"not in":return new st(!ee.value.has(A.value))}throw new SyntaxError(`Unknown operator "${M.operator.value}" between ${A.type} and ${ee.type}`)}evaluateArguments(M,U){const A=[],ee=new Map;for(const he of M)if(he.type==="KeywordArgumentExpression"){const Ze=he;ee.set(Ze.key.value,this.evaluate(Ze.value,U))}else{if(ee.size>0)throw new Error("Positional arguments must come before keyword arguments");A.push(this.evaluate(he,U))}return[A,ee]}evaluateFilterExpression(M,U){const A=this.evaluate(M.operand,U);if(M.filter.type==="Identifier"){const ee=M.filter;if(ee.value==="tojson")return new Oe(vt(A));if(A instanceof G)switch(ee.value){case"list":return A;case"first":return A.value[0];case"last":return A.value[A.value.length-1];case"length":return new at(A.value.length);case"reverse":return new G(A.value.reverse());case"sort":return new G(A.value.sort((he,Ze)=>{if(he.type!==Ze.type)throw new Error(`Cannot compare different types: ${he.type} and ${Ze.type}`);switch(he.type){case"NumericValue":return he.value-Ze.value;case"StringValue":return he.value.localeCompare(Ze.value);default:throw new Error(`Cannot compare type: ${he.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${ee.value}`)}else if(A instanceof Oe)switch(ee.value){case"length":return new at(A.value.length);case"upper":return new Oe(A.value.toUpperCase());case"lower":return new Oe(A.value.toLowerCase());case"title":return new Oe(dt(A.value));case"capitalize":return new Oe(A.value.charAt(0).toUpperCase()+A.value.slice(1));case"trim":return new Oe(A.value.trim());case"indent":return new Oe(A.value.split(`
`).map((he,Ze)=>Ze===0||he.length===0?he:"    "+he).join(`
`));case"string":return A;default:throw new Error(`Unknown StringValue filter: ${ee.value}`)}else if(A instanceof at)switch(ee.value){case"abs":return new at(Math.abs(A.value));default:throw new Error(`Unknown NumericValue filter: ${ee.value}`)}else if(A instanceof Tt)switch(ee.value){case"items":return new G(Array.from(A.value.entries()).map(([he,Ze])=>new G([new Oe(he),Ze])));case"length":return new at(A.value.size);default:throw new Error(`Unknown ObjectValue filter: ${ee.value}`)}throw new Error(`Cannot apply filter "${ee.value}" to type: ${A.type}`)}else if(M.filter.type==="CallExpression"){const ee=M.filter;if(ee.callee.type!=="Identifier")throw new Error(`Unknown filter: ${ee.callee.type}`);const he=ee.callee.value;if(he==="tojson"){const[,Ze]=this.evaluateArguments(ee.args,U),Ke=Ze.get("indent")??new Re;if(!(Ke instanceof at||Ke instanceof Re))throw new Error("If set, indent must be a number");return new Oe(vt(A,Ke.value))}if(A instanceof G){switch(he){case"selectattr":{if(A.value.some($=>!($ instanceof Tt)))throw new Error("`selectattr` can only be applied to array of objects");if(ee.args.some($=>$.type!=="StringLiteral"))throw new Error("arguments of `selectattr` must be strings");const[Ze,Ke,_t]=ee.args.map($=>this.evaluate($,U));let rt;if(Ke){const $=U.tests.get(Ke.value);if(!$)throw new Error(`Unknown test: ${Ke.value}`);rt=$}else rt=(...$)=>$[0].__bool__().value;const Te=A.value.filter($=>{const ie=$.value.get(Ze.value);return ie?rt(ie,_t):!1});return new G(Te)}case"map":{const[,Ze]=this.evaluateArguments(ee.args,U);if(Ze.has("attribute")){const Ke=Ze.get("attribute");if(!(Ke instanceof Oe))throw new Error("attribute must be a string");const _t=Ze.get("default"),rt=A.value.map(Te=>{if(!(Te instanceof Tt))throw new Error("items in map must be an object");return Te.value.get(Ke.value)??_t??new Ne});return new G(rt)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${he}`)}else if(A instanceof Oe){switch(he){case"indent":{const[Ze,Ke]=this.evaluateArguments(ee.args,U),_t=Ze.at(0)??Ke.get("width")??new at(4);if(!(_t instanceof at))throw new Error("width must be a number");const rt=Ze.at(1)??Ke.get("first")??new st(!1),Te=Ze.at(2)??Ke.get("blank")??new st(!1),$=A.value.split(`
`),ie=" ".repeat(_t.value),ve=$.map((Fe,ke)=>!rt.value&&ke===0||!Te.value&&Fe.length===0?Fe:ie+Fe);return new Oe(ve.join(`
`))}}throw new Error(`Unknown StringValue filter: ${he}`)}else throw new Error(`Cannot apply filter "${he}" to type: ${A.type}`)}throw new Error(`Unknown filter: ${M.filter.type}`)}evaluateTestExpression(M,U){const A=this.evaluate(M.operand,U),ee=U.tests.get(M.test.value);if(!ee)throw new Error(`Unknown test: ${M.test.value}`);const he=ee(A);return new st(M.negate?!he:he)}evaluateUnaryExpression(M,U){const A=this.evaluate(M.argument,U);switch(M.operator.value){case"not":return new st(!A.value);default:throw new SyntaxError(`Unknown operator: ${M.operator.value}`)}}evalProgram(M,U){return this.evaluateBlock(M.body,U)}evaluateBlock(M,U){let A="";for(const ee of M){const he=this.evaluate(ee,U);he.type!=="NullValue"&&he.type!=="UndefinedValue"&&(A+=he.value)}return new Oe(A)}evaluateIdentifier(M,U){return U.lookupVariable(M.value)}evaluateCallExpression(M,U){const[A,ee]=this.evaluateArguments(M.args,U);ee.size>0&&A.push(new Ie(ee));const he=this.evaluate(M.callee,U);if(he.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${he.type}`);return he.value(A,U)}evaluateSliceExpression(M,U,A){if(!(M instanceof G||M instanceof Oe))throw new Error("Slice object must be an array or string");const ee=this.evaluate(U.start,A),he=this.evaluate(U.stop,A),Ze=this.evaluate(U.step,A);if(!(ee instanceof at||ee instanceof Ne))throw new Error("Slice start must be numeric or undefined");if(!(he instanceof at||he instanceof Ne))throw new Error("Slice stop must be numeric or undefined");if(!(Ze instanceof at||Ze instanceof Ne))throw new Error("Slice step must be numeric or undefined");return M instanceof G?new G(We(M.value,ee.value,he.value,Ze.value)):new Oe(We(Array.from(M.value),ee.value,he.value,Ze.value).join(""))}evaluateMemberExpression(M,U){const A=this.evaluate(M.object,U);let ee;if(M.computed){if(M.property.type==="SliceExpression")return this.evaluateSliceExpression(A,M.property,U);ee=this.evaluate(M.property,U)}else ee=new Oe(M.property.value);let he;if(A instanceof Tt){if(!(ee instanceof Oe))throw new Error(`Cannot access property with non-string: got ${ee.type}`);he=A.value.get(ee.value)??A.builtins.get(ee.value)}else if(A instanceof G||A instanceof Oe)if(ee instanceof at)he=A.value.at(ee.value),A instanceof Oe&&(he=new Oe(A.value.at(ee.value)));else if(ee instanceof Oe)he=A.builtins.get(ee.value);else throw new Error(`Cannot access property with non-string/non-number: got ${ee.type}`);else{if(!(ee instanceof Oe))throw new Error(`Cannot access property with non-string: got ${ee.type}`);he=A.builtins.get(ee.value)}return he instanceof tt?he:new Ne}evaluateSet(M,U){const A=this.evaluate(M.value,U);if(M.assignee.type==="Identifier"){const ee=M.assignee.value;U.setVariable(ee,A)}else if(M.assignee.type==="MemberExpression"){const ee=M.assignee,he=this.evaluate(ee.object,U);if(!(he instanceof Tt))throw new Error("Cannot assign to member of non-object");if(ee.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");he.value.set(ee.property.value,A)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(M.assignee)}`);return new Re}evaluateIf(M,U){const A=this.evaluate(M.test,U);return this.evaluateBlock(A.__bool__().value?M.body:M.alternate,U)}evaluateFor(M,U){const A=new qe(U);let ee,he;if(M.iterable.type==="SelectExpression"){const Te=M.iterable;he=this.evaluate(Te.iterable,A),ee=Te.test}else he=this.evaluate(M.iterable,A);if(!(he instanceof G))throw new Error(`Expected iterable type in for loop: got ${he.type}`);const Ze=[],Ke=[];for(let Te=0;Te<he.value.length;++Te){const $=new qe(A),ie=he.value[Te];let ve;if(M.loopvar.type==="Identifier")ve=Fe=>Fe.setVariable(M.loopvar.value,ie);else if(M.loopvar.type==="TupleLiteral"){const Fe=M.loopvar;if(ie.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${ie.type}`);const ke=ie;if(Fe.value.length!==ke.value.length)throw new Error(`Too ${Fe.value.length>ke.value.length?"few":"many"} items to unpack`);ve=ze=>{for(let lt=0;lt<Fe.value.length;++lt){if(Fe.value[lt].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Fe.value[lt].type}`);ze.setVariable(Fe.value[lt].value,ke.value[lt])}}}else throw new Error(`Invalid loop variable(s): ${M.loopvar.type}`);ee&&(ve($),!this.evaluate(ee,$).__bool__().value)||(Ze.push(ie),Ke.push(ve))}let _t="",rt=!0;for(let Te=0;Te<Ze.length;++Te){const $=new Map([["index",new at(Te+1)],["index0",new at(Te)],["revindex",new at(Ze.length-Te)],["revindex0",new at(Ze.length-Te-1)],["first",new st(Te===0)],["last",new st(Te===Ze.length-1)],["length",new at(Ze.length)],["previtem",Te>0?Ze[Te-1]:new Ne],["nextitem",Te<Ze.length-1?Ze[Te+1]:new Ne]]);A.setVariable("loop",new Tt($)),Ke[Te](A);const ie=this.evaluateBlock(M.body,A);_t+=ie.value,rt=!1}if(rt){const Te=this.evaluateBlock(M.defaultBlock,A);_t+=Te.value}return new Oe(_t)}evaluateMacro(M,U){return U.setVariable(M.name.value,new He((A,ee)=>{const he=new qe(ee);A=A.slice();let Ze;A.at(-1)?.type==="KeywordArgumentsValue"&&(Ze=A.pop());for(let Ke=0;Ke<M.args.length;++Ke){const _t=M.args[Ke],rt=A[Ke];if(_t.type==="Identifier"){const Te=_t;if(!rt)throw new Error(`Missing positional argument: ${Te.value}`);he.setVariable(Te.value,rt)}else if(_t.type==="KeywordArgumentExpression"){const Te=_t,$=rt??Ze?.value.get(Te.key.value)??this.evaluate(Te.value,he);he.setVariable(Te.key.value,$)}else throw new Error(`Unknown argument type: ${_t.type}`)}return this.evaluateBlock(M.body,he)})),new Re}evaluate(M,U){if(M===void 0)return new Ne;switch(M.type){case"Program":return this.evalProgram(M,U);case"Set":return this.evaluateSet(M,U);case"If":return this.evaluateIf(M,U);case"For":return this.evaluateFor(M,U);case"Macro":return this.evaluateMacro(M,U);case"NumericLiteral":return new at(Number(M.value));case"StringLiteral":return new Oe(M.value);case"BooleanLiteral":return new st(M.value);case"ArrayLiteral":return new G(M.value.map(A=>this.evaluate(A,U)));case"TupleLiteral":return new $e(M.value.map(A=>this.evaluate(A,U)));case"ObjectLiteral":{const A=new Map;for(const[ee,he]of M.value){const Ze=this.evaluate(ee,U);if(!(Ze instanceof Oe))throw new Error(`Object keys must be strings: got ${Ze.type}`);A.set(Ze.value,this.evaluate(he,U))}return new Tt(A)}case"Identifier":return this.evaluateIdentifier(M,U);case"CallExpression":return this.evaluateCallExpression(M,U);case"MemberExpression":return this.evaluateMemberExpression(M,U);case"UnaryExpression":return this.evaluateUnaryExpression(M,U);case"BinaryExpression":return this.evaluateBinaryExpression(M,U);case"FilterExpression":return this.evaluateFilterExpression(M,U);case"TestExpression":return this.evaluateTestExpression(M,U);default:throw new SyntaxError(`Unknown node type: ${M.type}`)}}};function ht(M){switch(typeof M){case"number":return new at(M);case"string":return new Oe(M);case"boolean":return new st(M);case"undefined":return new Ne;case"object":return M===null?new Re:Array.isArray(M)?new G(M.map(ht)):new Tt(new Map(Object.entries(M).map(([U,A])=>[U,ht(A)])));case"function":return new He((U,A)=>{const ee=M(...U.map(he=>he.value))??null;return ht(ee)});default:throw new Error(`Cannot convert to runtime value: ${M}`)}}function vt(M,U,A){const ee=A??0;switch(M.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(M.value);case"ArrayValue":case"ObjectValue":{const he=U?" ".repeat(U):"",Ze=`
`+he.repeat(ee),Ke=Ze+he;if(M.type==="ArrayValue"){const _t=M.value.map(rt=>vt(rt,U,ee+1));return U?`[${Ke}${_t.join(`,${Ke}`)}${Ze}]`:`[${_t.join(", ")}]`}else{const _t=Array.from(M.value.entries()).map(([rt,Te])=>{const $=`"${rt}": ${vt(Te,U,ee+1)}`;return U?`${Ke}${$}`:$});return U?`{${_t.join(",")}${Ze}}`:`{${_t.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${M.type}`)}}var xt=class{parsed;constructor(M){const U=P(M,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=Ee(U)}render(M){const U=new qe;U.set("false",!1),U.set("true",!0),U.set("raise_exception",he=>{throw new Error(he)}),U.set("range",K);for(const[he,Ze]of Object.entries(M))U.set(he,Ze);return new ut(U).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{registerBackend:()=>me,resolveBackendAndExecutionProviders:()=>Me});const v=new Map,W=[],me=(D,E,N)=>{if(E&&typeof E.init=="function"&&typeof E.createInferenceSessionHandler=="function"){const P=v.get(D);if(P===void 0)v.set(D,{backend:E,priority:N});else{if(P.priority>N)return;if(P.priority===N&&P.backend!==E)throw new Error(`cannot register backend "${D}" using priority ${N}`)}if(N>=0){const Y=W.indexOf(D);Y!==-1&&W.splice(Y,1);for(let Z=0;Z<W.length;Z++)if(v.get(W[Z]).priority<=N){W.splice(Z,0,D);return}W.push(D)}return}throw new TypeError("not a valid backend")},be=async D=>{const E=v.get(D);if(!E)return"backend not found.";if(E.initialized)return E.backend;if(E.aborted)return E.error;{const N=!!E.initPromise;try{return N||(E.initPromise=E.backend.init(D)),await E.initPromise,E.initialized=!0,E.backend}catch(P){return N||(E.error=`${P}`,E.aborted=!0),E.error}finally{delete E.initPromise}}},Me=async D=>{const E=D.executionProviders||[],N=E.map(L=>typeof L=="string"?L:L.name),P=N.length===0?W:N;let Y;const Z=[],oe=new Set;for(const L of P){const te=await be(L);typeof te=="string"?Z.push({name:L,err:te}):(Y||(Y=te),Y===te&&oe.add(L))}if(!Y)throw new Error(`no available backend found. ERR: ${Z.map(L=>`[${L.name}] ${L.err}`).join(", ")}`);for(const{name:L,err:te}of Z)N.includes(L)&&console.warn(`removing requested execution provider "${L}" from session options because it is not available: ${te}`);const le=E.filter(L=>oe.has(typeof L=="string"?L:L.name));return[Y,new Proxy(D,{get:(L,te)=>te==="executionProviders"?le:Reflect.get(L,te)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{registerBackend:()=>v.registerBackend});var v=u("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{env:()=>me});var v=u("./node_modules/onnxruntime-common/dist/esm/version.js");let W="warning";const me={wasm:{},webgl:{},webgpu:{},versions:{common:v.version},set logLevel(be){if(be!==void 0){if(typeof be!="string"||["verbose","info","warning","error","fatal"].indexOf(be)===-1)throw new Error(`Unsupported logging level: ${be}`);W=be}},get logLevel(){return W}};Object.defineProperty(me,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{env:()=>W});var v=u("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const W=v.env},"./node_modules/onnxruntime-common/dist/esm/index.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{InferenceSession:()=>me.InferenceSession,TRACE:()=>Me.TRACE,TRACE_FUNC_BEGIN:()=>Me.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>Me.TRACE_FUNC_END,Tensor:()=>be.Tensor,TrainingSession:()=>D.TrainingSession,env:()=>W.env,registerBackend:()=>v.registerBackend});var v=u("./node_modules/onnxruntime-common/dist/esm/backend.js"),W=u("./node_modules/onnxruntime-common/dist/esm/env.js"),me=u("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),be=u("./node_modules/onnxruntime-common/dist/esm/tensor.js");u("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),u("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var Me=u("./node_modules/onnxruntime-common/dist/esm/trace.js");u("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),u("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var D=u("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{InferenceSession:()=>be});var v=u("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),W=u("./node_modules/onnxruntime-common/dist/esm/tensor.js"),me=u("./node_modules/onnxruntime-common/dist/esm/trace.js");class be{constructor(D){this.handler=D}async run(D,E,N){(0,me.TRACE_FUNC_BEGIN)();const P={};let Y={};if(typeof D!="object"||D===null||D instanceof W.Tensor||Array.isArray(D))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let Z=!0;if(typeof E=="object"){if(E===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(E instanceof W.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(E)){if(E.length===0)throw new TypeError("'fetches' cannot be an empty array.");Z=!1;for(const L of E){if(typeof L!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(L)===-1)throw new RangeError(`'fetches' contains invalid output name: ${L}.`);P[L]=null}if(typeof N=="object"&&N!==null)Y=N;else if(typeof N<"u")throw new TypeError("'options' must be an object.")}else{let L=!1;const te=Object.getOwnPropertyNames(E);for(const J of this.outputNames)if(te.indexOf(J)!==-1){const de=E[J];(de===null||de instanceof W.Tensor)&&(L=!0,Z=!1,P[J]=de)}if(L){if(typeof N=="object"&&N!==null)Y=N;else if(typeof N<"u")throw new TypeError("'options' must be an object.")}else Y=E}}else if(typeof E<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const L of this.inputNames)if(typeof D[L]>"u")throw new Error(`input '${L}' is missing in 'feeds'.`);if(Z)for(const L of this.outputNames)P[L]=null;const oe=await this.handler.run(D,P,Y),le={};for(const L in oe)if(Object.hasOwnProperty.call(oe,L)){const te=oe[L];te instanceof W.Tensor?le[L]=te:le[L]=new W.Tensor(te.type,te.data,te.dims)}return(0,me.TRACE_FUNC_END)(),le}async release(){return this.handler.dispose()}static async create(D,E,N,P){(0,me.TRACE_FUNC_BEGIN)();let Y,Z={};if(typeof D=="string"){if(Y=D,typeof E=="object"&&E!==null)Z=E;else if(typeof E<"u")throw new TypeError("'options' must be an object.")}else if(D instanceof Uint8Array){if(Y=D,typeof E=="object"&&E!==null)Z=E;else if(typeof E<"u")throw new TypeError("'options' must be an object.")}else if(D instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&D instanceof SharedArrayBuffer){const te=D;let J=0,de=D.byteLength;if(typeof E=="object"&&E!==null)Z=E;else if(typeof E=="number"){if(J=E,!Number.isSafeInteger(J))throw new RangeError("'byteOffset' must be an integer.");if(J<0||J>=te.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${te.byteLength}).`);if(de=D.byteLength-J,typeof N=="number"){if(de=N,!Number.isSafeInteger(de))throw new RangeError("'byteLength' must be an integer.");if(de<=0||J+de>te.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${te.byteLength-J}].`);if(typeof P=="object"&&P!==null)Z=P;else if(typeof P<"u")throw new TypeError("'options' must be an object.")}else if(typeof N<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof E<"u")throw new TypeError("'options' must be an object.");Y=new Uint8Array(te,J,de)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[oe,le]=await(0,v.resolveBackendAndExecutionProviders)(Z),L=await oe.createInferenceSessionHandler(Y,le);return(0,me.TRACE_FUNC_END)(),new be(L)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{InferenceSession:()=>W});var v=u("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js");const W=v.InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(yt,pe,u)=>{u.r(pe)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(yt,pe,u)=>{u.r(pe)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{tensorToDataURL:()=>v,tensorToImageData:()=>W});const v=(me,be)=>{const Me=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);Me.width=me.dims[3],Me.height=me.dims[2];const D=Me.getContext("2d");if(D!=null){let E,N;be?.tensorLayout!==void 0&&be.tensorLayout==="NHWC"?(E=me.dims[2],N=me.dims[3]):(E=me.dims[3],N=me.dims[2]);const P=be?.format!==void 0?be.format:"RGB",Y=be?.norm;let Z,oe;Y===void 0||Y.mean===void 0?Z=[255,255,255,255]:typeof Y.mean=="number"?Z=[Y.mean,Y.mean,Y.mean,Y.mean]:(Z=[Y.mean[0],Y.mean[1],Y.mean[2],0],Y.mean[3]!==void 0&&(Z[3]=Y.mean[3])),Y===void 0||Y.bias===void 0?oe=[0,0,0,0]:typeof Y.bias=="number"?oe=[Y.bias,Y.bias,Y.bias,Y.bias]:(oe=[Y.bias[0],Y.bias[1],Y.bias[2],0],Y.bias[3]!==void 0&&(oe[3]=Y.bias[3]));const le=N*E;let L=0,te=le,J=le*2,de=-1;P==="RGBA"?(L=0,te=le,J=le*2,de=le*3):P==="RGB"?(L=0,te=le,J=le*2):P==="RBG"&&(L=0,J=le,te=le*2);for(let ae=0;ae<N;ae++)for(let j=0;j<E;j++){const I=(me.data[L++]-oe[0])*Z[0],R=(me.data[te++]-oe[1])*Z[1],k=(me.data[J++]-oe[2])*Z[2],_e=de===-1?255:(me.data[de++]-oe[3])*Z[3];D.fillStyle="rgba("+I+","+R+","+k+","+_e+")",D.fillRect(j,ae,1,1)}if("toDataURL"in Me)return Me.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},W=(me,be)=>{const Me=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let D;if(Me!=null){let E,N,P;be?.tensorLayout!==void 0&&be.tensorLayout==="NHWC"?(E=me.dims[2],N=me.dims[1],P=me.dims[3]):(E=me.dims[3],N=me.dims[2],P=me.dims[1]);const Y=be!==void 0&&be.format!==void 0?be.format:"RGB",Z=be?.norm;let oe,le;Z===void 0||Z.mean===void 0?oe=[255,255,255,255]:typeof Z.mean=="number"?oe=[Z.mean,Z.mean,Z.mean,Z.mean]:(oe=[Z.mean[0],Z.mean[1],Z.mean[2],255],Z.mean[3]!==void 0&&(oe[3]=Z.mean[3])),Z===void 0||Z.bias===void 0?le=[0,0,0,0]:typeof Z.bias=="number"?le=[Z.bias,Z.bias,Z.bias,Z.bias]:(le=[Z.bias[0],Z.bias[1],Z.bias[2],0],Z.bias[3]!==void 0&&(le[3]=Z.bias[3]));const L=N*E;if(be!==void 0&&(be.format!==void 0&&P===4&&be.format!=="RGBA"||P===3&&be.format!=="RGB"&&be.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const te=4;let J=0,de=1,ae=2,j=3,I=0,R=L,k=L*2,_e=-1;Y==="RGBA"?(I=0,R=L,k=L*2,_e=L*3):Y==="RGB"?(I=0,R=L,k=L*2):Y==="RBG"&&(I=0,k=L,R=L*2),D=Me.createImageData(E,N);for(let we=0;we<N*E;J+=te,de+=te,ae+=te,j+=te,we++)D.data[J]=(me.data[I++]-le[0])*oe[0],D.data[de]=(me.data[R++]-le[1])*oe[1],D.data[ae]=(me.data[k++]-le[2])*oe[2],D.data[j]=_e===-1?255:(me.data[_e++]-le[3])*oe[3]}else throw new Error("Can not access image data");return D}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(yt,pe,u)=>{u.r(pe)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{bufferToTensor:()=>W,tensorFromGpuBuffer:()=>Me,tensorFromImage:()=>me,tensorFromPinnedBuffer:()=>D,tensorFromTexture:()=>be});var v=u("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const W=(E,N)=>{if(E===void 0)throw new Error("Image buffer must be defined");if(N.height===void 0||N.width===void 0)throw new Error("Image height and width must be defined");if(N.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:P,width:Y}=N,Z=N.norm??{mean:255,bias:0};let oe,le;typeof Z.mean=="number"?oe=[Z.mean,Z.mean,Z.mean,Z.mean]:oe=[Z.mean[0],Z.mean[1],Z.mean[2],Z.mean[3]??255],typeof Z.bias=="number"?le=[Z.bias,Z.bias,Z.bias,Z.bias]:le=[Z.bias[0],Z.bias[1],Z.bias[2],Z.bias[3]??0];const L=N.format!==void 0?N.format:"RGBA",te=N.tensorFormat!==void 0&&N.tensorFormat!==void 0?N.tensorFormat:"RGB",J=P*Y,de=te==="RGBA"?new Float32Array(J*4):new Float32Array(J*3);let ae=4,j=0,I=1,R=2,k=3,_e=0,we=J,Ce=J*2,Se=-1;L==="RGB"&&(ae=3,j=0,I=1,R=2,k=-1),te==="RGBA"?Se=J*3:te==="RBG"?(_e=0,Ce=J,we=J*2):te==="BGR"&&(Ce=0,we=J,_e=J*2);for(let Ye=0;Ye<J;Ye++,j+=ae,R+=ae,I+=ae,k+=ae)de[_e++]=(E[j]+le[0])/oe[0],de[we++]=(E[I]+le[1])/oe[1],de[Ce++]=(E[R]+le[2])/oe[2],Se!==-1&&k!==-1&&(de[Se++]=(E[k]+le[3])/oe[3]);return te==="RGBA"?new v.Tensor("float32",de,[1,4,P,Y]):new v.Tensor("float32",de,[1,3,P,Y])},me=async(E,N)=>{const P=typeof HTMLImageElement<"u"&&E instanceof HTMLImageElement,Y=typeof ImageData<"u"&&E instanceof ImageData,Z=typeof ImageBitmap<"u"&&E instanceof ImageBitmap,oe=typeof E=="string";let le,L=N??{};const te=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},J=de=>de instanceof HTMLCanvasElement||de instanceof OffscreenCanvas?de.getContext("2d"):null;if(P){const de=te();de.width=E.width,de.height=E.height;const ae=J(de);if(ae!=null){let j=E.height,I=E.width;if(N!==void 0&&N.resizedHeight!==void 0&&N.resizedWidth!==void 0&&(j=N.resizedHeight,I=N.resizedWidth),N!==void 0){if(L=N,N.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");L.tensorFormat="RGBA",L.height=j,L.width=I}else L.tensorFormat="RGBA",L.height=j,L.width=I;ae.drawImage(E,0,0),le=ae.getImageData(0,0,I,j).data}else throw new Error("Can not access image data")}else if(Y){let de,ae;if(N!==void 0&&N.resizedWidth!==void 0&&N.resizedHeight!==void 0?(de=N.resizedHeight,ae=N.resizedWidth):(de=E.height,ae=E.width),N!==void 0&&(L=N),L.format="RGBA",L.height=de,L.width=ae,N!==void 0){const j=te();j.width=ae,j.height=de;const I=J(j);if(I!=null)I.putImageData(E,0,0),le=I.getImageData(0,0,ae,de).data;else throw new Error("Can not access image data")}else le=E.data}else if(Z){if(N===void 0)throw new Error("Please provide image config with format for Imagebitmap");const de=te();de.width=E.width,de.height=E.height;const ae=J(de);if(ae!=null){const j=E.height,I=E.width;return ae.drawImage(E,0,0,I,j),le=ae.getImageData(0,0,I,j).data,L.height=j,L.width=I,W(le,L)}else throw new Error("Can not access image data")}else{if(oe)return new Promise((de,ae)=>{const j=te(),I=J(j);if(!E||!I)return ae();const R=new Image;R.crossOrigin="Anonymous",R.src=E,R.onload=()=>{j.width=R.width,j.height=R.height,I.drawImage(R,0,0,j.width,j.height);const k=I.getImageData(0,0,j.width,j.height);L.height=j.height,L.width=j.width,de(W(k.data,L))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(le!==void 0)return W(le,L);throw new Error("Input data provided is not supported - aborted tensor creation")},be=(E,N)=>{const{width:P,height:Y,download:Z,dispose:oe}=N,le=[1,Y,P,4];return new v.Tensor({location:"texture",type:"float32",texture:E,dims:le,download:Z,dispose:oe})},Me=(E,N)=>{const{dataType:P,dims:Y,download:Z,dispose:oe}=N;return new v.Tensor({location:"gpu-buffer",type:P??"float32",gpuBuffer:E,dims:Y,download:Z,dispose:oe})},D=(E,N,P)=>new v.Tensor({location:"cpu-pinned",type:E,data:N,dims:P??[N.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(yt,pe,u)=>{u.r(pe)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>W,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>v,checkTypedArray:()=>be});const v=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),W=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let me=!1;const be=()=>{if(!me){me=!0;const Me=typeof BigInt64Array<"u"&&BigInt64Array.from,D=typeof BigUint64Array<"u"&&BigUint64Array.from,E=typeof Float16Array<"u"&&Float16Array.from;Me&&(v.set("int64",BigInt64Array),W.set(BigInt64Array,"int64")),D&&(v.set("uint64",BigUint64Array),W.set(BigUint64Array,"uint64")),E?(v.set("float16",Float16Array),W.set(Float16Array,"float16")):v.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{Tensor:()=>Me});var v=u("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),W=u("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),me=u("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),be=u("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class Me{constructor(E,N,P){(0,me.checkTypedArray)();let Y,Z;if(typeof E=="object"&&"location"in E)switch(this.dataLocation=E.location,Y=E.type,Z=E.dims,E.location){case"cpu-pinned":{const le=me.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(Y);if(!le)throw new TypeError(`unsupported type "${Y}" to create tensor from pinned buffer`);if(!(E.data instanceof le))throw new TypeError(`buffer should be of type ${le.name}`);this.cpuData=E.data;break}case"texture":{if(Y!=="float32")throw new TypeError(`unsupported type "${Y}" to create tensor from texture`);this.gpuTextureData=E.texture,this.downloader=E.download,this.disposer=E.dispose;break}case"gpu-buffer":{if(Y!=="float32"&&Y!=="float16"&&Y!=="int32"&&Y!=="int64"&&Y!=="uint32"&&Y!=="uint8"&&Y!=="bool")throw new TypeError(`unsupported type "${Y}" to create tensor from gpu buffer`);this.gpuBufferData=E.gpuBuffer,this.downloader=E.download,this.disposer=E.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let le,L;if(typeof E=="string")if(Y=E,L=P,E==="string"){if(!Array.isArray(N))throw new TypeError("A string tensor's data must be a string array.");le=N}else{const te=me.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(E);if(te===void 0)throw new TypeError(`Unsupported tensor type: ${E}.`);if(Array.isArray(N)){if(E==="float16"&&te===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");E==="uint64"||E==="int64"?le=te.from(N,BigInt):le=te.from(N)}else if(N instanceof te)le=N;else throw new TypeError(`A ${Y} tensor's data must be type of ${te}`)}else if(L=N,Array.isArray(E)){if(E.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const te=typeof E[0];if(te==="string")Y="string",le=E;else if(te==="boolean")Y="bool",le=Uint8Array.from(E);else throw new TypeError(`Invalid element type of data array: ${te}.`)}else{const te=me.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(E.constructor);if(te===void 0)throw new TypeError(`Unsupported type for tensor data: ${E.constructor}.`);Y=te,le=E}if(L===void 0)L=[le.length];else if(!Array.isArray(L))throw new TypeError("A tensor's dims must be a number array");Z=L,this.cpuData=le,this.dataLocation="cpu"}const oe=(0,be.calculateSize)(Z);if(this.cpuData&&oe!==this.cpuData.length)throw new Error(`Tensor's size(${oe}) does not match data length(${this.cpuData.length}).`);this.type=Y,this.dims=Z,this.size=oe}static async fromImage(E,N){return(0,W.tensorFromImage)(E,N)}static fromTexture(E,N){return(0,W.tensorFromTexture)(E,N)}static fromGpuBuffer(E,N){return(0,W.tensorFromGpuBuffer)(E,N)}static fromPinnedBuffer(E,N,P){return(0,W.tensorFromPinnedBuffer)(E,N,P)}toDataURL(E){return(0,v.tensorToDataURL)(this,E)}toImageData(E){return(0,v.tensorToImageData)(this,E)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(E){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const N=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=N,E&&this.disposer&&(this.disposer(),this.disposer=void 0),N}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(E){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,be.tensorReshape)(this,E)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{calculateSize:()=>W,tensorReshape:()=>me});var v=u("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const W=be=>{let Me=1;for(let D=0;D<be.length;D++){const E=be[D];if(typeof E!="number"||!Number.isSafeInteger(E))throw new TypeError(`dims[${D}] must be an integer, got: ${E}`);if(E<0)throw new RangeError(`dims[${D}] must be a non-negative integer, got: ${E}`);Me*=E}return Me},me=(be,Me)=>{switch(be.location){case"cpu":return new v.Tensor(be.type,be.data,Me);case"cpu-pinned":return new v.Tensor({location:"cpu-pinned",data:be.data,type:be.type,dims:Me});case"texture":return new v.Tensor({location:"texture",texture:be.texture,type:be.type,dims:Me});case"gpu-buffer":return new v.Tensor({location:"gpu-buffer",gpuBuffer:be.gpuBuffer,type:be.type,dims:Me});default:throw new Error(`tensorReshape: tensor location ${be.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{Tensor:()=>W});var v=u("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const W=v.Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{TRACE:()=>W,TRACE_FUNC_BEGIN:()=>be,TRACE_FUNC_END:()=>Me});var v=u("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const W=(D,E)=>{(typeof v.env.trace>"u"?!v.env.wasm.trace:!v.env.trace)||console.timeStamp(`${D}::ORT::${E}`)},me=(D,E)=>{const N=new Error().stack?.split(/\r\n|\r|\n/g)||[];let P=!1;for(let Y=0;Y<N.length;Y++){if(P&&!N[Y].includes("TRACE_FUNC")){let Z=`FUNC_${D}::${N[Y].trim().split(" ")[1]}`;E&&(Z+=`::${E}`),W("CPU",Z);return}N[Y].includes("TRACE_FUNC")&&(P=!0)}},be=D=>{(typeof v.env.trace>"u"?!v.env.wasm.trace:!v.env.trace)||me("BEGIN",D)},Me=D=>{(typeof v.env.trace>"u"?!v.env.wasm.trace:!v.env.trace)||me("END",D)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{TrainingSession:()=>be});var v=u("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),W=u("./node_modules/onnxruntime-common/dist/esm/tensor.js");const me="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";class be{constructor(D,E,N){this.handler=D,this.hasOptimizerModel=E,this.hasEvalModel=N}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(D,E){const N=D.evalModel||"",P=D.optimizerModel||"",Y=E||{},[Z,oe]=await(0,v.resolveBackendAndExecutionProviders)(Y);if(Z.createTrainingSessionHandler){const le=await Z.createTrainingSessionHandler(D.checkpointState,D.trainModel,N,P,oe);return new be(le,!!D.optimizerModel,!!D.evalModel)}else throw new Error(me)}typeNarrowingForRunStep(D,E,N,P,Y){const Z={};let oe={};if(typeof N!="object"||N===null||N instanceof W.Tensor||Array.isArray(N))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let le=!0;if(typeof P=="object"){if(P===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(P instanceof W.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(P)){if(P.length===0)throw new TypeError("'fetches' cannot be an empty array.");le=!1;for(const L of P){if(typeof L!="string")throw new TypeError("'fetches' must be a string array or an object.");if(E.indexOf(L)===-1)throw new RangeError(`'fetches' contains invalid output name: ${L}.`);Z[L]=null}if(typeof Y=="object"&&Y!==null)oe=Y;else if(typeof Y<"u")throw new TypeError("'options' must be an object.")}else{let L=!1;const te=Object.getOwnPropertyNames(P);for(const J of E)if(te.indexOf(J)!==-1){const de=P[J];(de===null||de instanceof W.Tensor)&&(L=!0,le=!1,Z[J]=de)}if(L){if(typeof Y=="object"&&Y!==null)oe=Y;else if(typeof Y<"u")throw new TypeError("'options' must be an object.")}else oe=P}}else if(typeof P<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const L of D)if(typeof N[L]>"u")throw new Error(`input '${L}' is missing in 'feeds'.`);if(le)for(const L of E)Z[L]=null;return[Z,oe]}convertHandlerReturnTypeToMapOfTensors(D){const E={};for(const N in D)if(Object.hasOwnProperty.call(D,N)){const P=D[N];P instanceof W.Tensor?E[N]=P:E[N]=new W.Tensor(P.type,P.data,P.dims)}return E}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(D,E,N){const[P,Y]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,D,E,N),Z=await this.handler.runTrainStep(D,P,Y);return this.convertHandlerReturnTypeToMapOfTensors(Z)}async runOptimizerStep(D){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(D||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(D,E,N){if(this.hasEvalModel){const[P,Y]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,D,E,N),Z=await this.handler.runEvalStep(D,P,Y);return this.convertHandlerReturnTypeToMapOfTensors(Z)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(D=!0){return this.handler.getParametersSize(D)}async loadParametersBuffer(D,E=!0){const N=await this.getParametersSize(E);if(D.length!==4*N)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(D,E)}async getContiguousParameters(D=!0){return this.handler.getContiguousParameters(D)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{TrainingSession:()=>W});var v=u("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js");const W=v.TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{version:()=>v});const v="1.18.0"},"./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs":(yt,pe,u)=>{u.r(pe),u.d(pe,{InferenceSession:()=>vt,TRACE:()=>$e,TRACE_FUNC_BEGIN:()=>Re,TRACE_FUNC_END:()=>Ne,Tensor:()=>Ie,TrainingSession:()=>_t,default:()=>vf,env:()=>k,registerBackend:()=>oe});/*!
 * ONNX Runtime Web v1.19.0-dev.20240804-ee2fe87e2d
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var v=Object.defineProperty,W=Object.getOwnPropertyDescriptor,me=Object.getOwnPropertyNames,be=Object.prototype.hasOwnProperty,Me=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),D=(e,t)=>()=>(e&&(t=e(e=0)),t),E=(e,t)=>{for(var r in t)v(e,r,{get:t[r],enumerable:!0})},N=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of me(t))!be.call(e,s)&&s!==r&&v(e,s,{get:()=>t[s],enumerable:!(n=W(t,s))||n.enumerable});return e},P=e=>N(v({},"__esModule",{value:!0}),e),Y,Z,oe,le,L,te=D(()=>{Y=new Map,Z=[],oe=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=Y.get(e);if(n===void 0)Y.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let s=Z.indexOf(e);s!==-1&&Z.splice(s,1);for(let i=0;i<Z.length;i++)if(Y.get(Z[i]).priority<=r){Z.splice(i,0,e);return}Z.push(e)}return}throw new TypeError("not a valid backend")},le=async e=>{let t=Y.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},L=async e=>{let t=e.executionProviders||[],r=t.map(c=>typeof c=="string"?c:c.name),n=r.length===0?Z:r,s,i=[],o=new Set;for(let c of n){let f=await le(c);typeof f=="string"?i.push({name:c,err:f}):(s||(s=f),s===f&&o.add(c))}if(!s)throw new Error(`no available backend found. ERR: ${i.map(c=>`[${c.name}] ${c.err}`).join(", ")}`);for(let{name:c,err:f}of i)r.includes(c)&&console.warn(`removing requested execution provider "${c}" from session options because it is not available: ${f}`);let d=t.filter(c=>o.has(typeof c=="string"?c:c.name));return[s,new Proxy(e,{get:(c,f)=>f==="executionProviders"?d:Reflect.get(c,f)})]}}),J=D(()=>{te()}),de,ae=D(()=>{de="1.19.0-dev.20240730-530a2d7b41"}),j,I,R=D(()=>{ae(),j="warning",I={wasm:{},webgl:{},webgpu:{},versions:{common:de},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);j=e}},get logLevel(){return j}},Object.defineProperty(I,"logLevel",{enumerable:!0})}),k,_e=D(()=>{R(),k=I}),we,Ce,Se=D(()=>{we=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let s,i;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],i=e.dims[3]):(s=e.dims[3],i=e.dims[2]);let o=t?.format!==void 0?t.format:"RGB",d=t?.norm,c,f;d===void 0||d.mean===void 0?c=[255,255,255,255]:typeof d.mean=="number"?c=[d.mean,d.mean,d.mean,d.mean]:(c=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(c[3]=d.mean[3])),d===void 0||d.bias===void 0?f=[0,0,0,0]:typeof d.bias=="number"?f=[d.bias,d.bias,d.bias,d.bias]:(f=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(f[3]=d.bias[3]));let w=i*s,l=0,b=w,S=w*2,T=-1;o==="RGBA"?(l=0,b=w,S=w*2,T=w*3):o==="RGB"?(l=0,b=w,S=w*2):o==="RBG"&&(l=0,S=w,b=w*2);for(let C=0;C<i;C++)for(let H=0;H<s;H++){let q=(e.data[l++]-f[0])*c[0],O=(e.data[b++]-f[1])*c[1],ne=(e.data[S++]-f[2])*c[2],se=T===-1?255:(e.data[T++]-f[3])*c[3];n.fillStyle="rgba("+q+","+O+","+ne+","+se+")",n.fillRect(H,C,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Ce=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let s,i,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],i=e.dims[1],o=e.dims[3]):(s=e.dims[3],i=e.dims[2],o=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",c=t?.norm,f,w;c===void 0||c.mean===void 0?f=[255,255,255,255]:typeof c.mean=="number"?f=[c.mean,c.mean,c.mean,c.mean]:(f=[c.mean[0],c.mean[1],c.mean[2],255],c.mean[3]!==void 0&&(f[3]=c.mean[3])),c===void 0||c.bias===void 0?w=[0,0,0,0]:typeof c.bias=="number"?w=[c.bias,c.bias,c.bias,c.bias]:(w=[c.bias[0],c.bias[1],c.bias[2],0],c.bias[3]!==void 0&&(w[3]=c.bias[3]));let l=i*s;if(t!==void 0&&(t.format!==void 0&&o===4&&t.format!=="RGBA"||o===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let b=4,S=0,T=1,C=2,H=3,q=0,O=l,ne=l*2,se=-1;d==="RGBA"?(q=0,O=l,ne=l*2,se=l*3):d==="RGB"?(q=0,O=l,ne=l*2):d==="RBG"&&(q=0,ne=l,O=l*2),n=r.createImageData(s,i);for(let fe=0;fe<i*s;S+=b,T+=b,C+=b,H+=b,fe++)n.data[S]=(e.data[q++]-w[0])*f[0],n.data[T]=(e.data[O++]-w[1])*f[1],n.data[C]=(e.data[ne++]-w[2])*f[2],n.data[H]=se===-1?255:(e.data[se++]-w[3])*f[3]}else throw new Error("Can not access image data");return n}}),Pe,Ye,Xe,ct,ge,V=D(()=>{Tt(),Pe=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,s=t.norm??{mean:255,bias:0},i,o;typeof s.mean=="number"?i=[s.mean,s.mean,s.mean,s.mean]:i=[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],typeof s.bias=="number"?o=[s.bias,s.bias,s.bias,s.bias]:o=[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",c=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",f=r*n,w=c==="RGBA"?new Float32Array(f*4):new Float32Array(f*3),l=4,b=0,S=1,T=2,C=3,H=0,q=f,O=f*2,ne=-1;d==="RGB"&&(l=3,b=0,S=1,T=2,C=-1),c==="RGBA"?ne=f*3:c==="RBG"?(H=0,O=f,q=f*2):c==="BGR"&&(O=0,q=f,H=f*2);for(let se=0;se<f;se++,b+=l,T+=l,S+=l,C+=l)w[H++]=(e[b]+o[0])/i[0],w[q++]=(e[S]+o[1])/i[1],w[O++]=(e[T]+o[2])/i[2],ne!==-1&&C!==-1&&(w[ne++]=(e[C]+o[3])/i[3]);return c==="RGBA"?new st("float32",w,[1,4,r,n]):new st("float32",w,[1,3,r,n])},Ye=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,s=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,i=typeof e=="string",o,d=t??{},c=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},f=w=>w instanceof HTMLCanvasElement||w instanceof OffscreenCanvas?w.getContext("2d"):null;if(r){let w=c();w.width=e.width,w.height=e.height;let l=f(w);if(l!=null){let b=e.height,S=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(b=t.resizedHeight,S=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=b,d.width=S}else d.tensorFormat="RGBA",d.height=b,d.width=S;l.drawImage(e,0,0),o=l.getImageData(0,0,S,b).data}else throw new Error("Can not access image data")}else if(n){let w,l;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(w=t.resizedHeight,l=t.resizedWidth):(w=e.height,l=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=w,d.width=l,t!==void 0){let b=c();b.width=l,b.height=w;let S=f(b);if(S!=null)S.putImageData(e,0,0),o=S.getImageData(0,0,l,w).data;else throw new Error("Can not access image data")}else o=e.data}else if(s){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let w=c();w.width=e.width,w.height=e.height;let l=f(w);if(l!=null){let b=e.height,S=e.width;return l.drawImage(e,0,0,S,b),o=l.getImageData(0,0,S,b).data,d.height=b,d.width=S,Pe(o,d)}else throw new Error("Can not access image data")}else{if(i)return new Promise((w,l)=>{let b=c(),S=f(b);if(!e||!S)return l();let T=new Image;T.crossOrigin="Anonymous",T.src=e,T.onload=()=>{b.width=T.width,b.height=T.height,S.drawImage(T,0,0,b.width,b.height);let C=S.getImageData(0,0,b.width,b.height);d.height=b.height,d.width=b.width,w(Pe(C.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(o!==void 0)return Pe(o,d);throw new Error("Input data provided is not supported - aborted tensor creation")},Xe=(e,t)=>{let{width:r,height:n,download:s,dispose:i}=t,o=[1,n,r,4];return new st({location:"texture",type:"float32",texture:e,dims:o,download:s,dispose:i})},ct=(e,t)=>{let{dataType:r,dims:n,download:s,dispose:i}=t;return new st({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:s,dispose:i})},ge=(e,t,r)=>new st({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),ce,Ee,K,We,dt=D(()=>{ce=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Ee=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),K=!1,We=()=>{if(!K){K=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=typeof Float16Array<"u"&&Float16Array.from;e&&(ce.set("int64",BigInt64Array),Ee.set(BigInt64Array,"int64")),t&&(ce.set("uint64",BigUint64Array),Ee.set(BigUint64Array,"uint64")),r?(ce.set("float16",Float16Array),Ee.set(Float16Array,"float16")):ce.set("float16",Uint16Array)}}}),tt,at,Oe=D(()=>{Tt(),tt=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},at=(e,t)=>{switch(e.location){case"cpu":return new st(e.type,e.data,t);case"cpu-pinned":return new st({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new st({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new st({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),st,Tt=D(()=>{Se(),V(),dt(),Oe(),st=class{constructor(e,t,r){We();let n,s;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,s=e.dims,e.location){case"cpu-pinned":{let o=ce.get(n);if(!o)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof o))throw new TypeError(`buffer should be of type ${o.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let o,d;if(typeof e=="string")if(n=e,d=r,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");o=t}else{let c=ce.get(e);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&c===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");e==="uint64"||e==="int64"?o=c.from(t,BigInt):o=c.from(t)}else if(t instanceof c)o=t;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(d=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof e[0];if(c==="string")n="string",o=e;else if(c==="boolean")n="bool",o=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=Ee.get(e.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=c,o=e}if(d===void 0)d=[o.length];else if(!Array.isArray(d))throw new TypeError("A tensor's dims must be a number array");s=d,this.cpuData=o,this.dataLocation="cpu"}let i=tt(s);if(this.cpuData&&i!==this.cpuData.length)throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=i}static async fromImage(e,t){return Ye(e,t)}static fromTexture(e,t){return Xe(e,t)}static fromGpuBuffer(e,t){return ct(e,t)}static fromPinnedBuffer(e,t,r){return ge(e,t,r)}toDataURL(e){return we(this,e)}toImageData(e){return Ce(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return at(this,e)}}}),Ie,G=D(()=>{Tt(),Ie=st}),$e,He,Re,Ne,qe=D(()=>{R(),$e=(e,t)=>{(typeof I.trace>"u"?!I.wasm.trace:!I.trace)||console.timeStamp(`${e}::ORT::${t}`)},He=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let s=0;s<r.length;s++){if(n&&!r[s].includes("TRACE_FUNC")){let i=`FUNC_${e}::${r[s].trim().split(" ")[1]}`;t&&(i+=`::${t}`),$e("CPU",i);return}r[s].includes("TRACE_FUNC")&&(n=!0)}},Re=e=>{(typeof I.trace>"u"?!I.wasm.trace:!I.trace)||He("BEGIN",e)},Ne=e=>{(typeof I.trace>"u"?!I.wasm.trace:!I.trace)||He("END",e)}}),ut,ht=D(()=>{te(),G(),qe(),ut=class Hh{constructor(t){this.handler=t}async run(t,r,n){Re();let s={},i={};if(typeof t!="object"||t===null||t instanceof Ie||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Ie)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(let f of r){if(typeof f!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(f)===-1)throw new RangeError(`'fetches' contains invalid output name: ${f}.`);s[f]=null}if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let f=!1,w=Object.getOwnPropertyNames(r);for(let l of this.outputNames)if(w.indexOf(l)!==-1){let b=r[l];(b===null||b instanceof Ie)&&(f=!0,o=!1,s[l]=b)}if(f){if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else i=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let f of this.inputNames)if(typeof t[f]>"u")throw new Error(`input '${f}' is missing in 'feeds'.`);if(o)for(let f of this.outputNames)s[f]=null;let d=await this.handler.run(t,s,i),c={};for(let f in d)if(Object.hasOwnProperty.call(d,f)){let w=d[f];w instanceof Ie?c[f]=w:c[f]=new Ie(w.type,w.data,w.dims)}return Ne(),c}async release(){return this.handler.dispose()}static async create(t,r,n,s){Re();let i,o={};if(typeof t=="string"){if(i=t,typeof r=="object"&&r!==null)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(i=t,typeof r=="object"&&r!==null)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let w=t,l=0,b=t.byteLength;if(typeof r=="object"&&r!==null)o=r;else if(typeof r=="number"){if(l=r,!Number.isSafeInteger(l))throw new RangeError("'byteOffset' must be an integer.");if(l<0||l>=w.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${w.byteLength}).`);if(b=t.byteLength-l,typeof n=="number"){if(b=n,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||l+b>w.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${w.byteLength-l}].`);if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(w,l,b)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[d,c]=await L(o),f=await d.createInferenceSessionHandler(i,c);return Ne(),new Hh(f)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),vt,xt=D(()=>{ht(),vt=ut}),M=D(()=>{}),U=D(()=>{}),A=D(()=>{}),ee=D(()=>{}),he,Ze,Ke=D(()=>{te(),G(),he="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Ze=class Kh{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let n=t.evalModel||"",s=t.optimizerModel||"",i=r||{},[o,d]=await L(i);if(o.createTrainingSessionHandler){let c=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,s,d);return new Kh(c,!!t.optimizerModel,!!t.evalModel)}else throw new Error(he)}typeNarrowingForRunStep(t,r,n,s,i){let o={},d={};if(typeof n!="object"||n===null||n instanceof Ie||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let c=!0;if(typeof s=="object"){if(s===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(s instanceof Ie)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(s)){if(s.length===0)throw new TypeError("'fetches' cannot be an empty array.");c=!1;for(let f of s){if(typeof f!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(f)===-1)throw new RangeError(`'fetches' contains invalid output name: ${f}.`);o[f]=null}if(typeof i=="object"&&i!==null)d=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else{let f=!1,w=Object.getOwnPropertyNames(s);for(let l of r)if(w.indexOf(l)!==-1){let b=s[l];(b===null||b instanceof Ie)&&(f=!0,c=!1,o[l]=b)}if(f){if(typeof i=="object"&&i!==null)d=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else d=s}}else if(typeof s<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let f of t)if(typeof n[f]>"u")throw new Error(`input '${f}' is missing in 'feeds'.`);if(c)for(let f of r)o[f]=null;return[o,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let s=t[n];s instanceof Ie?r[n]=s:r[n]=new Ie(s.type,s.data,s.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[s,i]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),o=await this.handler.runTrainStep(t,s,i);return this.convertHandlerReturnTypeToMapOfTensors(o)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[s,i]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),o=await this.handler.runEvalStep(t,s,i);return this.convertHandlerReturnTypeToMapOfTensors(o)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}}),_t,rt=D(()=>{Ke(),_t=Ze}),Te={};E(Te,{InferenceSession:()=>vt,TRACE:()=>$e,TRACE_FUNC_BEGIN:()=>Re,TRACE_FUNC_END:()=>Ne,Tensor:()=>Ie,TrainingSession:()=>_t,env:()=>k,registerBackend:()=>oe});var $=D(()=>{J(),_e(),xt(),G(),M(),U(),qe(),A(),ee(),rt()}),ie=D(()=>{}),ve={};E(ve,{default:()=>ze});var Fe,ke,ze,lt=D(()=>{pp(),un(),Nr(),Fe="ort-wasm-proxy-worker",ke=globalThis.self?.name===Fe,ke&&(self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Zn(r.wasm).then(()=>{Sd(r).then(()=>{postMessage({type:t})},n=>{postMessage({type:t,err:n})})},n=>{postMessage({type:t,err:n})});break;case"init-ep":{let{epName:n,env:s}=r;$d(s,n).then(()=>{postMessage({type:t})},i=>{postMessage({type:t,err:i})});break}case"copy-from":{let{buffer:n}=r,s=ed(n);postMessage({type:t,out:s});break}case"create":{let{model:n,options:s}=r;kd(n,s).then(i=>{postMessage({type:t,out:i})},i=>{postMessage({type:t,err:i})});break}case"release":Pd(r),postMessage({type:t});break;case"run":{let{sessionId:n,inputIndices:s,inputs:i,outputIndices:o,options:d}=r;Id(n,s,i,o,new Array(o.length).fill(null),d).then(c=>{c.some(f=>f[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:c},Od([...i,...c]))},c=>{postMessage({type:t,err:c})});break}case"end-profiling":Fd(r),postMessage({type:t});break;default:}}catch(n){postMessage({type:t,err:n})}}),ze=ke?null:e=>new Worker(e??Ge,{type:"module",name:Fe})}),nt={};E(nt,{default:()=>Et});var bt,ft,Et,zt=D(()=>{ft=(bt=self.location.href,async function(e={}){function t(){return dr.buffer!=lr.buffer&&vn(),lr}function r(){return dr.buffer!=lr.buffer&&vn(),Vt}function n(){return dr.buffer!=lr.buffer&&vn(),or}function s(){return dr.buffer!=lr.buffer&&vn(),Ue}function i(){return dr.buffer!=lr.buffer&&vn(),Lt}function o(){return dr.buffer!=lr.buffer&&vn(),ar}function d(){return dr.buffer!=lr.buffer&&vn(),Hr}function c(){return dr.buffer!=lr.buffer&&vn(),Un}var f,w,l=Object.assign({},e),b=new Promise((a,m)=>{f=a,w=m}),S=typeof window=="object",T=typeof importScripts=="function",C=T&&self.name=="em-pthread";l.mountExternalData=(a,m)=>{(l.Fb||(l.Fb=new Map)).set(a,m)},l.unmountExternalData=()=>{delete l.Fb};var H=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let q=()=>{let a=(y,x,F)=>(...ue)=>{let Le=Qn,ot=x?.();ue=y(...ue);let kt=x?.();return ot!==kt&&(y=kt,F(ot),x=F=null),Qn!=Le?new Promise((Ft,Kt)=>{Zd={resolve:Ft,reject:Kt}}):ue},m=y=>async(...x)=>{try{if(l.Eb)throw Error("Session already started");let F=l.Eb={bc:x[0],errors:[]},ue=await y(...x);if(l.Eb!==F)throw Error("Session mismatch");l.Mb?.flush();let Le=F.errors;if(0<Le.length){let ot=await Promise.all(Le);if(ot=ot.filter(kt=>kt),0<ot.length)throw Error(ot.join(`
`))}return ue}finally{l.Eb=null}};l._OrtCreateSession=a(l._OrtCreateSession,()=>l._OrtCreateSession,y=>l._OrtCreateSession=y),l._OrtRun=m(a(l._OrtRun,()=>l._OrtRun,y=>l._OrtRun=y)),l._OrtRunWithBinding=m(a(l._OrtRunWithBinding,()=>l._OrtRunWithBinding,y=>l._OrtRunWithBinding=y)),l._OrtBindInput=a(l._OrtBindInput,()=>l._OrtBindInput,y=>l._OrtBindInput=y),q=void 0};l.jsepInit=(a,m)=>{if(q?.(),a==="webgpu"){[l.Mb,l.Tb,l.Xb,l.Nb,l.Wb,l.jb,l.Yb,l.$b,l.Ub,l.Vb,l.Zb]=m;let y=l.Mb;l.jsepRegisterBuffer=(x,F,ue,Le)=>y.registerBuffer(x,F,ue,Le),l.jsepGetBuffer=x=>y.getBuffer(x),l.jsepCreateDownloader=(x,F,ue)=>y.createDownloader(x,F,ue),l.jsepOnReleaseSession=x=>{y.onReleaseSession(x)},l.jsepOnRunStart=x=>y.onRunStart(x)}};var O,ne,se=Object.assign({},l),fe="./this.program",et=(a,m)=>{throw m},Ve="";(S||T)&&(T?Ve=self.location.href:typeof document<"u"&&document.currentScript&&(Ve=document.currentScript.src),bt&&(Ve=bt),Ve=Ve.startsWith("blob:")?"":Ve.substr(0,Ve.replace(/[?#].*/,"").lastIndexOf("/")+1),T&&(ne=a=>{var m=new XMLHttpRequest;return m.open("GET",a,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),O=(a,m,y)=>{var x=new XMLHttpRequest;x.open("GET",a,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?m(x.response):y()},x.onerror=y,x.send(null)});var pt,Nt=console.log.bind(console),At=console.error.bind(console),hr=Nt,ir=At;if(Object.assign(l,se),se=null,C){let a=function(m){try{var y=m.data,x=y.cmd;if(x==="load"){let F=[];self.onmessage=ue=>F.push(ue),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let ue of F)a(ue);self.onmessage=a};for(let ue of y.handlers)l[ue]&&!l[ue].proxy||(l[ue]=(...Le)=>{postMessage({Lb:"callHandler",kc:ue,args:Le})},ue=="print"&&(hr=l[ue]),ue=="printErr"&&(ir=l[ue]));dr=y.wasmMemory,vn(),vr(y.wasmModule)}else if(x==="run"){rc(y.pthread_ptr,0,0,1,0,0),Xd(y.pthread_ptr),Cf(),Lp(),Mr||(zh(),Mr=!0);try{Ef(y.start_routine,y.arg)}catch(F){if(F!="unwind")throw F}}else x==="cancel"?vo()&&hd(-1):y.target!=="setimmediate"&&(x==="checkMailbox"?Mr&&sd():x&&(ir(`worker: received unknown command ${x}`),ir(y)))}catch(F){throw Dh(),F}};var vr,Mr=!1;ir=function(...m){m=m.join(" "),console.error(m)},self.alert=function(...m){postMessage({Lb:"alert",text:m.join(" "),mc:vo()})},l.instantiateWasm=(m,y)=>new Promise(x=>{vr=F=>{F=new WebAssembly.Instance(F,Fp()),y(F),x()}}),self.onunhandledrejection=m=>{throw m.reason||m},self.onmessage=a}l.wasmBinary&&(pt=l.wasmBinary);var dr,Wt,Pr,lr,Vt,or,Ue,Lt,ar,Hr,Lr,Fn,Un,Kr=!1;function vn(){var a=dr.buffer;l.HEAP8=lr=new Int8Array(a),l.HEAP16=or=new Int16Array(a),l.HEAPU8=Vt=new Uint8Array(a),l.HEAPU16=Ue=new Uint16Array(a),l.HEAP32=Lt=new Int32Array(a),l.HEAPU32=ar=new Uint32Array(a),l.HEAPF32=Hr=new Float32Array(a),l.HEAPF64=Un=new Float64Array(a),l.HEAP64=Lr=new BigInt64Array(a),l.HEAPU64=Fn=new BigUint64Array(a)}if(!C){if(!((dr=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof H))throw ir("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");vn()}var hn=[],ln=[],Is=[],Fs=0,oi=null;function $p(){if(--Fs==0&&oi){var a=oi;oi=null,a()}}function yo(a){throw ir(a="Aborted("+a+")"),Kr=!0,Pr=1,a=new WebAssembly.RuntimeError(a+". Build with -sASSERTIONS for more info."),w(a),a}var Bd,kp=a=>a.startsWith("data:application/octet-stream;base64,"),Pp=a=>a.startsWith("file://");function Ap(a){if(a==Bd&&pt)return new Uint8Array(pt);if(ne)return ne(a);throw"both async and sync fetching of the wasm failed"}function Ip(a,m,y){return function(x){if(!pt&&(S||T)){if(typeof fetch=="function"&&!Pp(x))return fetch(x,{credentials:"same-origin"}).then(F=>{if(!F.ok)throw`failed to load wasm binary file at '${x}'`;return F.arrayBuffer()}).catch(()=>Ap(x));if(O)return new Promise((F,ue)=>{O(x,Le=>F(new Uint8Array(Le)),ue)})}return Promise.resolve().then(()=>Ap(x))}(a).then(x=>WebAssembly.instantiate(x,m)).then(y,x=>{ir(`failed to asynchronously prepare wasm: ${x}`),yo(x)})}function Fp(){return{a:{M:Tf,za:xf,b:$f,$:Vp,z:Gp,pa:qp,X:Kp,Z:Xp,qa:Qp,na:Yp,ga:Zp,ma:Jp,J:eh,Y:th,V:rh,oa:nh,W:sh,va:kf,D:Pf,P:Af,O:Ff,C:zf,s:Df,p:Bf,E:Lf,y:Gf,Q:qf,ta:Hf,ja:Kf,T:Xf,aa:Qf,F:Yf,ia:Xd,sa:Zf,u:Jf,B:rm,o:nm,m:im,c:Hd,n:om,k:um,Aa:dm,r:cm,f:pm,v:hm,l:fm,g:mm,i:_m,j:gm,h:wm,e:ym,da:bm,ea:Mm,fa:vm,ba:wh,ca:yh,S:xm,d:Tm,N:Cm,G:Em,K:Sm,w:$m,ra:km,U:Pm,t:Mh,x:Am,L:Im,R:Fm,ya:Om,xa:zm,ka:Th,la:Ch,_:Vd,A:Eh,I:Sh,ha:$h,H:kh,a:dr,wa:jd,ua:Ih,q:Lm}}}var Ld={848436:(a,m,y,x)=>{if(l===void 0||!l.Fb)return 1;if((a=nn(a>>>0)).startsWith("./")&&(a=a.substring(2)),!(a=l.Fb.get(a)))return 2;if(x>>>=0,(m>>>=0)+(y>>>=0)>a.byteLength)return 3;try{return r().set(a.subarray(m,m+y),x>>>0),0}catch{return 4}},848937:()=>{l.Ub()},848968:()=>{l.Vb()},848997:()=>{l.Zb()},849022:a=>l.Tb(a),849055:a=>l.Xb(a),849087:(a,m,y)=>{l.Nb(a,m,y,!0)},849126:(a,m,y)=>{l.Nb(a,m,y)},849159:()=>typeof wasmOffsetConverter<"u",849216:a=>{l.jb("Abs",a,void 0)},849267:a=>{l.jb("Neg",a,void 0)},849318:a=>{l.jb("Floor",a,void 0)},849371:a=>{l.jb("Ceil",a,void 0)},849423:a=>{l.jb("Reciprocal",a,void 0)},849481:a=>{l.jb("Sqrt",a,void 0)},849533:a=>{l.jb("Exp",a,void 0)},849584:a=>{l.jb("Erf",a,void 0)},849635:a=>{l.jb("Sigmoid",a,void 0)},849690:(a,m,y)=>{l.jb("HardSigmoid",a,{alpha:m,beta:y})},849769:a=>{l.jb("Log",a,void 0)},849820:a=>{l.jb("Sin",a,void 0)},849871:a=>{l.jb("Cos",a,void 0)},849922:a=>{l.jb("Tan",a,void 0)},849973:a=>{l.jb("Asin",a,void 0)},850025:a=>{l.jb("Acos",a,void 0)},850077:a=>{l.jb("Atan",a,void 0)},850129:a=>{l.jb("Sinh",a,void 0)},850181:a=>{l.jb("Cosh",a,void 0)},850233:a=>{l.jb("Asinh",a,void 0)},850286:a=>{l.jb("Acosh",a,void 0)},850339:a=>{l.jb("Atanh",a,void 0)},850392:a=>{l.jb("Tanh",a,void 0)},850444:a=>{l.jb("Not",a,void 0)},850495:(a,m,y)=>{l.jb("Clip",a,{min:m,max:y})},850564:a=>{l.jb("Clip",a,void 0)},850616:(a,m)=>{l.jb("Elu",a,{alpha:m})},850674:a=>{l.jb("Relu",a,void 0)},850726:(a,m)=>{l.jb("LeakyRelu",a,{alpha:m})},850790:(a,m)=>{l.jb("ThresholdedRelu",a,{alpha:m})},850860:(a,m)=>{l.jb("Cast",a,{to:m})},850918:a=>{l.jb("Add",a,void 0)},850969:a=>{l.jb("Sub",a,void 0)},851020:a=>{l.jb("Mul",a,void 0)},851071:a=>{l.jb("Div",a,void 0)},851122:a=>{l.jb("Pow",a,void 0)},851173:a=>{l.jb("Equal",a,void 0)},851226:a=>{l.jb("Greater",a,void 0)},851281:a=>{l.jb("GreaterOrEqual",a,void 0)},851343:a=>{l.jb("Less",a,void 0)},851395:a=>{l.jb("LessOrEqual",a,void 0)},851454:(a,m,y,x,F)=>{l.jb("ReduceMean",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},851613:(a,m,y,x,F)=>{l.jb("ReduceMax",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},851771:(a,m,y,x,F)=>{l.jb("ReduceMin",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},851929:(a,m,y,x,F)=>{l.jb("ReduceProd",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},852088:(a,m,y,x,F)=>{l.jb("ReduceSum",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},852246:(a,m,y,x,F)=>{l.jb("ReduceL1",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},852403:(a,m,y,x,F)=>{l.jb("ReduceL2",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},852560:(a,m,y,x,F)=>{l.jb("ReduceLogSum",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},852721:(a,m,y,x,F)=>{l.jb("ReduceSumSquare",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},852885:(a,m,y,x,F)=>{l.jb("ReduceLogSumExp",a,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},853049:a=>{l.jb("Where",a,void 0)},853102:(a,m,y)=>{l.jb("Transpose",a,{perm:m?Array.from(i().subarray(m>>>0,y>>>0)):[]})},853210:(a,m,y,x)=>{l.jb("DepthToSpace",a,{blocksize:m,mode:nn(y),format:x?"NHWC":"NCHW"})},853343:(a,m,y,x)=>{l.jb("DepthToSpace",a,{blocksize:m,mode:nn(y),format:x?"NHWC":"NCHW"})},853476:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr)=>{l.jb("ConvTranspose",a,{format:kt?"NHWC":"NCHW",autoPad:m,dilations:[y],group:x,kernelShape:[F],pads:[ue,Le],strides:[ot],wIsConst:()=>!!t()[Ft>>>0],outputPadding:Kt?Array.from(i().subarray(Kt>>>0,Sr>>>0)):[],outputShape:Ar?Array.from(i().subarray(Ar>>>0,Ae>>>0)):[],activation:nn(tr)})},853877:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae)=>{l.jb("ConvTranspose",a,{format:ot?"NHWC":"NCHW",autoPad:m,dilations:Array.from(i().subarray(y>>>0,2+(y>>>0)>>>0)),group:x,kernelShape:Array.from(i().subarray(F>>>0,2+(F>>>0)>>>0)),pads:Array.from(i().subarray(ue>>>0,4+(ue>>>0)>>>0)),strides:Array.from(i().subarray(Le>>>0,2+(Le>>>0)>>>0)),wIsConst:()=>!!t()[kt>>>0],outputPadding:Ft?Array.from(i().subarray(Ft>>>0,Kt>>>0)):[],outputShape:Sr?Array.from(i().subarray(Sr>>>0,Ar>>>0)):[],activation:nn(Ae)})},854442:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr)=>{l.jb("ConvTranspose",a,{format:kt?"NHWC":"NCHW",autoPad:m,dilations:[y],group:x,kernelShape:[F],pads:[ue,Le],strides:[ot],wIsConst:()=>!!t()[Ft>>>0],outputPadding:Kt?Array.from(i().subarray(Kt>>>0,Sr>>>0)):[],outputShape:Ar?Array.from(i().subarray(Ar>>>0,Ae>>>0)):[],activation:nn(tr)})},854843:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae)=>{l.jb("ConvTranspose",a,{format:ot?"NHWC":"NCHW",autoPad:m,dilations:Array.from(i().subarray(y>>>0,2+(y>>>0)>>>0)),group:x,kernelShape:Array.from(i().subarray(F>>>0,2+(F>>>0)>>>0)),pads:Array.from(i().subarray(ue>>>0,4+(ue>>>0)>>>0)),strides:Array.from(i().subarray(Le>>>0,2+(Le>>>0)>>>0)),wIsConst:()=>!!t()[kt>>>0],outputPadding:Ft?Array.from(i().subarray(Ft>>>0,Kt>>>0)):[],outputShape:Sr?Array.from(i().subarray(Sr>>>0,Ar>>>0)):[],activation:nn(Ae)})},855408:(a,m)=>{l.jb("GlobalAveragePool",a,{format:m?"NHWC":"NCHW"})},855499:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr,Ir)=>{l.jb("AveragePool",a,{format:Ir?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:F,dilations:[ue,Le],kernel_shape:[ot,kt],pads:[Ft,Kt,Sr,Ar],strides:[Ae,tr]})},855783:(a,m)=>{l.jb("GlobalAveragePool",a,{format:m?"NHWC":"NCHW"})},855874:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr,Ir)=>{l.jb("AveragePool",a,{format:Ir?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:F,dilations:[ue,Le],kernel_shape:[ot,kt],pads:[Ft,Kt,Sr,Ar],strides:[Ae,tr]})},856158:(a,m)=>{l.jb("GlobalMaxPool",a,{format:m?"NHWC":"NCHW"})},856245:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr,Ir)=>{l.jb("MaxPool",a,{format:Ir?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:F,dilations:[ue,Le],kernel_shape:[ot,kt],pads:[Ft,Kt,Sr,Ar],strides:[Ae,tr]})},856525:(a,m)=>{l.jb("GlobalMaxPool",a,{format:m?"NHWC":"NCHW"})},856612:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr,Ir)=>{l.jb("MaxPool",a,{format:Ir?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:F,dilations:[ue,Le],kernel_shape:[ot,kt],pads:[Ft,Kt,Sr,Ar],strides:[Ae,tr]})},856892:(a,m,y,x,F)=>{l.jb("Gemm",a,{alpha:m,beta:y,transA:x,transB:F})},856996:a=>{l.jb("MatMul",a,void 0)},857050:(a,m,y,x)=>{l.jb("ArgMax",a,{keepDims:!!m,selectLastIndex:!!y,axis:x})},857158:(a,m,y,x)=>{l.jb("ArgMin",a,{keepDims:!!m,selectLastIndex:!!y,axis:x})},857266:(a,m)=>{l.jb("Softmax",a,{axis:m})},857329:(a,m)=>{l.jb("Concat",a,{axis:m})},857389:(a,m,y,x,F)=>{l.jb("Split",a,{axis:m,numOutputs:y,splitSizes:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},857529:a=>{l.jb("Expand",a,void 0)},857583:(a,m)=>{l.jb("Gather",a,{axis:Number(m)})},857654:(a,m)=>{l.jb("GatherElements",a,{axis:Number(m)})},857733:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt)=>{l.jb("Resize",a,{antialias:m,axes:y?Array.from(i().subarray(y>>>0,x>>>0)):[],coordinateTransformMode:nn(F),cubicCoeffA:ue,excludeOutside:Le,extrapolationValue:ot,keepAspectRatioPolicy:nn(kt),mode:nn(Ft),nearestMode:nn(Kt)})},858079:(a,m,y,x,F,ue,Le)=>{l.jb("Slice",a,{starts:m?Array.from(i().subarray(m>>>0,y>>>0)):[],ends:x?Array.from(i().subarray(x>>>0,F>>>0)):[],axes:ue?Array.from(i().subarray(ue>>>0,Le>>>0)):[]})},858295:a=>{l.jb("Tile",a,void 0)},858347:(a,m,y)=>{l.jb("InstanceNormalization",a,{epsilon:m,format:y?"NHWC":"NCHW"})},858461:(a,m,y)=>{l.jb("InstanceNormalization",a,{epsilon:m,format:y?"NHWC":"NCHW"})},858575:a=>{l.jb("Range",a,void 0)},858628:(a,m)=>{l.jb("Einsum",a,{equation:nn(m)})},858709:(a,m,y,x,F)=>{l.jb("Pad",a,{mode:m,value:y,pads:x?Array.from(i().subarray(x>>>0,F>>>0)):[]})},858836:(a,m,y,x,F,ue)=>{l.jb("BatchNormalization",a,{epsilon:m,momentum:y,spatial:!!F,trainingMode:!!x,format:ue?"NHWC":"NCHW"})},859005:(a,m,y,x,F,ue)=>{l.jb("BatchNormalization",a,{epsilon:m,momentum:y,spatial:!!F,trainingMode:!!x,format:ue?"NHWC":"NCHW"})},859174:(a,m,y)=>{l.jb("CumSum",a,{exclusive:Number(m),reverse:Number(y)})},859271:(a,m,y,x,F,ue,Le,ot,kt)=>{l.jb("Attention",a,{numHeads:m,isUnidirectional:y,maskFilterValue:x,scale:F,doRotary:ue,qkvHiddenSizes:Le?Array.from(i().subarray(Number(ot)>>>0,Number(ot)+Le>>>0)):[],pastPresentShareBuffer:!!kt})},859543:a=>{l.jb("BiasAdd",a,void 0)},859598:a=>{l.jb("BiasSplitGelu",a,void 0)},859659:a=>{l.jb("FastGelu",a,void 0)},859715:(a,m,y,x,F,ue,Le,ot,kt,Ft,Kt,Sr,Ar,Ae,tr,Ir)=>{l.jb("Conv",a,{format:Sr?"NHWC":"NCHW",auto_pad:m,dilations:y?Array.from(i().subarray(y>>>0,x>>>0)):[],group:F,kernel_shape:ue?Array.from(i().subarray(ue>>>0,Le>>>0)):[],pads:ot?Array.from(i().subarray(ot>>>0,kt>>>0)):[],strides:Ft?Array.from(i().subarray(Ft>>>0,Kt>>>0)):[],w_is_const:()=>!!t()[Ar>>>0],activation:nn(Ae),activation_params:tr?Array.from(d().subarray(tr>>>0,Ir>>>0)):[]})},860211:a=>{l.jb("Gelu",a,void 0)},860263:(a,m,y,x)=>{l.jb("GroupQueryAttention",a,{numHeads:m,kvNumHeads:y,scale:x})},860376:(a,m,y,x)=>{l.jb("LayerNormalization",a,{axis:m,epsilon:y,simplified:!!x})},860487:(a,m,y,x)=>{l.jb("LayerNormalization",a,{axis:m,epsilon:y,simplified:!!x})},860598:(a,m,y,x,F,ue)=>{l.jb("MatMulNBits",a,{k:m,n:y,accuracyLevel:x,bits:F,blockSize:ue})},860725:(a,m,y,x,F,ue)=>{l.jb("MultiHeadAttention",a,{numHeads:m,isUnidirectional:y,maskFilterValue:x,scale:F,doRotary:ue})},860884:(a,m)=>{l.jb("QuickGelu",a,{alpha:m})},860948:(a,m,y,x,F)=>{l.jb("RotaryEmbedding",a,{interleaved:!!m,numHeads:y,rotaryEmbeddingDim:x,scale:F})},861087:(a,m,y)=>{l.jb("SkipLayerNormalization",a,{epsilon:m,simplified:!!y})},861189:a=>{l.Yb(a)},861223:(a,m)=>l.$b(a,m,l.Eb.bc,l.Eb.errors),861335:(a,m,y)=>{l.jb("SkipLayerNormalization",a,{epsilon:m,simplified:!!y})}};function xf(a,m,y){return hh(async()=>{await l.Wb(a,m,y)})}function Tf(){return typeof wasmOffsetConverter<"u"}function Rd(a){this.name="ExitStatus",this.message=`Program terminated with exit(${a})`,this.status=a}var Nd=a=>{a.terminate(),a.onmessage=()=>{}},Op=a=>{Os.length==0&&(Np(),Rp(Os[0]));var m=Os.pop();if(!m)return 6;li.push(m),Kn[a.Ab]=m,m.Ab=a.Ab;var y={cmd:"run",start_routine:a.cc,arg:a.Pb,pthread_ptr:a.Ab};return m.postMessage(y,a.ic),0},ai=0,Gr=(a,m,...y)=>{for(var x=2*y.length,F=ic(),ue=sc(8*x),Le=ue>>>3,ot=0;ot<y.length;ot++){var kt=y[ot];typeof kt=="bigint"?(Lr[Le+2*ot]=1n,Lr[Le+2*ot+1]=kt):(Lr[Le+2*ot]=0n,c()[Le+2*ot+1>>>0]=kt)}return a=Bh(a,0,x,ue,m),fd(F),a};function jd(a){if(C)return Gr(0,1,a);if(Pr=a,!(0<ai)){for(var m of li)Nd(m);for(m of Os)Nd(m);Os=[],li=[],Kn=[],Kr=!0}et(a,new Rd(a))}function zp(a){if(C)return Gr(1,0,a);Vd(a)}var Vd=a=>{if(Pr=a,C)throw zp(a),"unwind";jd(a)},Os=[],li=[],Dp=[],Kn={},Bp=a=>{var m=a.Ab;delete Kn[m],Os.push(a),li.splice(li.indexOf(a),1),a.Ab=0,nc(m)};function Lp(){Dp.forEach(a=>a())}var Rp=a=>new Promise(m=>{a.onmessage=F=>{var ue=(F=F.data).cmd;if(F.targetThread&&F.targetThread!=vo()){var Le=Kn[F.targetThread];Le?Le.postMessage(F,F.transferList):ir(`Internal error! Worker sent a message "${ue}" to target pthread ${F.targetThread}, but that thread no longer exists!`)}else ue==="checkMailbox"?sd():ue==="spawnThread"?Op(F):ue==="cleanupThread"?Bp(Kn[F.thread]):ue==="killThread"?(F=F.thread,ue=Kn[F],delete Kn[F],Nd(ue),nc(F),li.splice(li.indexOf(ue),1),ue.Ab=0):ue==="cancelThread"?Kn[F.thread].postMessage({cmd:"cancel"}):ue==="loaded"?(a.loaded=!0,m(a)):ue==="alert"?alert(`Thread ${F.threadId}: ${F.text}`):F.target==="setimmediate"?a.postMessage(F):ue==="callHandler"?l[F.handler](...F.args):ue&&ir(`worker sent an unknown command ${ue}`)},a.onerror=F=>{throw ir(`worker sent an error! ${F.filename}:${F.lineno}: ${F.message}`),F};var y,x=[];for(y of[])l.hasOwnProperty(y)&&x.push(y);a.postMessage({cmd:"load",handlers:x,wasmMemory:dr,wasmModule:Wt})});function Np(){var a=new Worker(new URL(self.location.href),{type:"module",workerData:"em-pthread",name:"em-pthread"});Os.push(a)}var nd=a=>{for(;0<a.length;)a.shift()(l)},Cf=()=>{var a=vo(),m=o()[a+52>>>2>>>0];a=o()[a+56>>>2>>>0],Rh(m,m-a),fd(m)},Ef=(a,m)=>{ai=0,a=Nh(a,m),0<ai?Pr=a:hd(a)};class Sf{constructor(m){this.Ib=m-24}}function $f(a,m,y){var x=new Sf(a>>>=0);throw m>>>=0,y>>>=0,o()[x.Ib+16>>>2>>>0]=0,o()[x.Ib+4>>>2>>>0]=m,o()[x.Ib+8>>>2>>>0]=y,a}function jp(a,m,y,x){return C?Gr(2,1,a,m,y,x):Vp(a,m,y,x)}function Vp(a,m,y,x){if(a>>>=0,m>>>=0,y>>>=0,x>>>=0,H===void 0)return ir("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var F=[];return C&&F.length===0?jp(a,m,y,x):(a={cc:y,Ab:a,Pb:x,ic:F},C?(a.Lb="spawnThread",postMessage(a,F),0):Op(a))}var Up=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Wp=(a,m,y)=>{var x=(m>>>=0)+y;for(y=m;a[y]&&!(y>=x);)++y;if(16<y-m&&a.buffer&&Up)return Up.decode(a.buffer instanceof H?a.slice(m,y):a.subarray(m,y));for(x="";m<y;){var F=a[m++];if(128&F){var ue=63&a[m++];if((224&F)==192)x+=String.fromCharCode((31&F)<<6|ue);else{var Le=63&a[m++];65536>(F=(240&F)==224?(15&F)<<12|ue<<6|Le:(7&F)<<18|ue<<12|Le<<6|63&a[m++])?x+=String.fromCharCode(F):(F-=65536,x+=String.fromCharCode(55296|F>>10,56320|1023&F))}}else x+=String.fromCharCode(F)}return x},nn=(a,m)=>(a>>>=0)?Wp(r(),a,m):"";function Gp(a,m,y){return C?Gr(3,1,a,m,y):0}function qp(a,m){if(C)return Gr(4,1,a,m)}var Ud=a=>{for(var m=0,y=0;y<a.length;++y){var x=a.charCodeAt(y);127>=x?m++:2047>=x?m+=2:55296<=x&&57343>=x?(m+=4,++y):m+=3}return m},Hp=(a,m,y,x)=>{if(!(0<x))return 0;var F=y>>>=0;x=y+x-1;for(var ue=0;ue<a.length;++ue){var Le=a.charCodeAt(ue);if(55296<=Le&&57343>=Le&&(Le=65536+((1023&Le)<<10)|1023&a.charCodeAt(++ue)),127>=Le){if(y>=x)break;m[y++>>>0]=Le}else{if(2047>=Le){if(y+1>=x)break;m[y++>>>0]=192|Le>>6}else{if(65535>=Le){if(y+2>=x)break;m[y++>>>0]=224|Le>>12}else{if(y+3>=x)break;m[y++>>>0]=240|Le>>18,m[y++>>>0]=128|Le>>12&63}m[y++>>>0]=128|Le>>6&63}m[y++>>>0]=128|63&Le}}return m[y>>>0]=0,y-F},bo=(a,m,y)=>Hp(a,r(),m,y);function Kp(a,m){if(C)return Gr(5,1,a,m)}function Xp(a,m,y){if(C)return Gr(6,1,a,m,y)}function Qp(a,m,y){return C?Gr(7,1,a,m,y):0}function Yp(a,m){if(C)return Gr(8,1,a,m)}function Zp(a,m,y){if(C)return Gr(9,1,a,m,y)}function Jp(a,m,y,x){if(C)return Gr(10,1,a,m,y,x)}function eh(a,m,y,x){if(C)return Gr(11,1,a,m,y,x)}function th(a,m,y,x){if(C)return Gr(12,1,a,m,y,x)}function rh(a){if(C)return Gr(13,1,a)}function nh(a,m){if(C)return Gr(14,1,a,m)}function sh(a,m,y){if(C)return Gr(15,1,a,m,y)}var ih,zs,kf=()=>{yo("")},Xn=a=>{for(var m="";r()[a>>>0];)m+=ih[r()[a++>>>0]];return m},Wd={},Gd={};function ds(a,m,y={}){if(!("argPackAdvance"in m))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(x,F,ue={}){var Le=F.name;if(!x)throw new zs(`type "${Le}" must have a positive integer typeid pointer`);if(Gd.hasOwnProperty(x)){if(ue.Rb)return;throw new zs(`Cannot register type '${Le}' twice`)}Gd[x]=F,Wd.hasOwnProperty(x)&&(F=Wd[x],delete Wd[x],F.forEach(ot=>ot()))}(a,m,y)}var oh=(a,m,y)=>{switch(m){case 1:return y?x=>t()[x>>>0]:x=>r()[x>>>0];case 2:return y?x=>n()[x>>>1>>>0]:x=>s()[x>>>1>>>0];case 4:return y?x=>i()[x>>>2>>>0]:x=>o()[x>>>2>>>0];case 8:return y?x=>Lr[x>>>3]:x=>Fn[x>>>3];default:throw new TypeError(`invalid integer width (${m}): ${a}`)}};function Pf(a,m,y){y>>>=0,ds(a>>>=0,{name:m=Xn(m>>>0),fromWireType:x=>x,toWireType:function(x,F){if(typeof F!="bigint"&&typeof F!="number")throw F=F===null?"null":(x=typeof F)=="object"||x==="array"||x==="function"?F.toString():""+F,new TypeError(`Cannot convert "${F}" to ${this.name}`);return typeof F=="number"&&(F=BigInt(F)),F},argPackAdvance:Ds,readValueFromPointer:oh(m,y,m.indexOf("u")==-1),Db:null})}var Ds=8;function Af(a,m,y,x){ds(a>>>=0,{name:m=Xn(m>>>0),fromWireType:function(F){return!!F},toWireType:function(F,ue){return ue?y:x},argPackAdvance:Ds,readValueFromPointer:function(F){return this.fromWireType(r()[F>>>0])},Db:null})}var qd=[],cs=[];function Hd(a){9<(a>>>=0)&&--cs[a+1]==0&&(cs[a]=void 0,qd.push(a))}var On=a=>{if(!a)throw new zs("Cannot use deleted val. handle = "+a);return cs[a]},zn=a=>{switch(a){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let m=qd.pop()||cs.length;return cs[m]=a,cs[m+1]=1,m}};function Kd(a){return this.fromWireType(o()[a>>>2>>>0])}var If={name:"emscripten::val",fromWireType:a=>{var m=On(a);return Hd(a),m},toWireType:(a,m)=>zn(m),argPackAdvance:Ds,readValueFromPointer:Kd,Db:null};function Ff(a){return ds(a>>>0,If)}var Of=(a,m)=>{switch(m){case 4:return function(y){return this.fromWireType(d()[y>>>2>>>0])};case 8:return function(y){return this.fromWireType(c()[y>>>3>>>0])};default:throw new TypeError(`invalid float width (${m}): ${a}`)}};function zf(a,m,y){y>>>=0,ds(a>>>=0,{name:m=Xn(m>>>0),fromWireType:x=>x,toWireType:(x,F)=>F,argPackAdvance:Ds,readValueFromPointer:Of(m,y),Db:null})}function Df(a,m,y,x,F){if(a>>>=0,y>>>=0,m=Xn(m>>>0),F===-1&&(F=4294967295),F=ot=>ot,x===0){var ue=32-8*y;F=ot=>ot<<ue>>>ue}var Le=m.includes("unsigned")?function(ot,kt){return kt>>>0}:function(ot,kt){return kt};ds(a,{name:m,fromWireType:F,toWireType:Le,argPackAdvance:Ds,readValueFromPointer:oh(m,y,x!==0),Db:null})}function Bf(a,m,y){function x(ue){var Le=o()[ue>>>2>>>0];return ue=o()[ue+4>>>2>>>0],new F(t().buffer,ue,Le)}var F=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][m];ds(a>>>=0,{name:y=Xn(y>>>0),fromWireType:x,argPackAdvance:Ds,readValueFromPointer:x},{Rb:!0})}function Lf(a,m){a>>>=0;var y=(m=Xn(m>>>0))==="std::string";ds(a,{name:m,fromWireType:function(x){var F=o()[x>>>2>>>0],ue=x+4;if(y)for(var Le=ue,ot=0;ot<=F;++ot){var kt=ue+ot;if(ot==F||r()[kt>>>0]==0){if(Le=nn(Le,kt-Le),Ft===void 0)var Ft=Le;else Ft+="\0",Ft+=Le;Le=kt+1}}else{for(Ft=Array(F),ot=0;ot<F;++ot)Ft[ot]=String.fromCharCode(r()[ue+ot>>>0]);Ft=Ft.join("")}return Yn(x),Ft},toWireType:function(x,F){F instanceof ArrayBuffer&&(F=new Uint8Array(F));var ue=typeof F=="string";if(!(ue||F instanceof Uint8Array||F instanceof Uint8ClampedArray||F instanceof Int8Array))throw new zs("Cannot pass non-string to std::string");var Le=y&&ue?Ud(F):F.length,ot=pd(4+Le+1),kt=ot+4;if(o()[ot>>>2>>>0]=Le,y&&ue)bo(F,kt,Le+1);else if(ue)for(ue=0;ue<Le;++ue){var Ft=F.charCodeAt(ue);if(255<Ft)throw Yn(kt),new zs("String has UTF-16 code units that do not fit in 8 bits");r()[kt+ue>>>0]=Ft}else for(ue=0;ue<Le;++ue)r()[kt+ue>>>0]=F[ue];return x!==null&&x.push(Yn,ot),ot},argPackAdvance:Ds,readValueFromPointer:Kd,Db(x){Yn(x)}})}var ah=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Rf=(a,m)=>{for(var y=a>>1,x=y+m/2;!(y>=x)&&s()[y>>>0];)++y;if(32<(y<<=1)-a&&ah)return ah.decode(r().slice(a,y));for(y="",x=0;!(x>=m/2);++x){var F=n()[a+2*x>>>1>>>0];if(F==0)break;y+=String.fromCharCode(F)}return y},Nf=(a,m,y)=>{if(y??=2147483647,2>y)return 0;var x=m;y=(y-=2)<2*a.length?y/2:a.length;for(var F=0;F<y;++F){var ue=a.charCodeAt(F);n()[m>>>1>>>0]=ue,m+=2}return n()[m>>>1>>>0]=0,m-x},jf=a=>2*a.length,Vf=(a,m)=>{for(var y=0,x="";!(y>=m/4);){var F=i()[a+4*y>>>2>>>0];if(F==0)break;++y,65536<=F?(F-=65536,x+=String.fromCharCode(55296|F>>10,56320|1023&F)):x+=String.fromCharCode(F)}return x},Uf=(a,m,y)=>{if(m>>>=0,y??=2147483647,4>y)return 0;var x=m;y=x+y-4;for(var F=0;F<a.length;++F){var ue=a.charCodeAt(F);if(55296<=ue&&57343>=ue&&(ue=65536+((1023&ue)<<10)|1023&a.charCodeAt(++F)),i()[m>>>2>>>0]=ue,(m+=4)+4>y)break}return i()[m>>>2>>>0]=0,m-x},Wf=a=>{for(var m=0,y=0;y<a.length;++y){var x=a.charCodeAt(y);55296<=x&&57343>=x&&++y,m+=4}return m};function Gf(a,m,y){if(a>>>=0,m>>>=0,y=Xn(y>>>=0),m===2)var x=Rf,F=Nf,ue=jf,Le=ot=>s()[ot>>>1>>>0];else m===4&&(x=Vf,F=Uf,ue=Wf,Le=ot=>o()[ot>>>2>>>0]);ds(a,{name:y,fromWireType:ot=>{for(var kt,Ft=o()[ot>>>2>>>0],Kt=ot+4,Sr=0;Sr<=Ft;++Sr){var Ar=ot+4+Sr*m;Sr!=Ft&&Le(Ar)!=0||(Kt=x(Kt,Ar-Kt),kt===void 0?kt=Kt:(kt+="\0",kt+=Kt),Kt=Ar+m)}return Yn(ot),kt},toWireType:(ot,kt)=>{if(typeof kt!="string")throw new zs(`Cannot pass non-string to C++ string type ${y}`);var Ft=ue(kt),Kt=pd(4+Ft+m);return o()[Kt>>>2>>>0]=Ft/m,F(kt,Kt+4,Ft+m),ot!==null&&ot.push(Yn,Kt),Kt},argPackAdvance:Ds,readValueFromPointer:Kd,Db(ot){Yn(ot)}})}function qf(a,m){ds(a>>>=0,{Sb:!0,name:m=Xn(m>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var Hf=()=>1;function Kf(a){rc(a>>>0,!T,1,!S,131072,!1),Lp()}var lh=a=>{if(!Kr)try{if(a(),!(0<ai))try{C?hd(Pr):Vd(Pr)}catch(m){m instanceof Rd||m=="unwind"||et(1,m)}}catch(m){m instanceof Rd||m=="unwind"||et(1,m)}};function Xd(a){a>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(i(),a>>>2,a).value.then(sd),a+=128,Atomics.store(i(),a>>>2,1))}var sd=()=>{var a=vo();a&&(Xd(a),lh(Lh))};function Xf(a,m){(a>>>=0)==m>>>0?setTimeout(sd):C?postMessage({targetThread:a,cmd:"checkMailbox"}):(a=Kn[a])&&a.postMessage({cmd:"checkMailbox"})}var Qd=[];function Qf(a,m,y,x,F){for(m>>>=0,x/=2,Qd.length=x,y=F>>>0>>>3,F=0;F<x;F++)Qd[F]=Lr[y+2*F]?Lr[y+2*F+1]:c()[y+2*F+1>>>0];return(m?Ld[m]:Rm[a])(...Qd)}function Yf(a){a>>>=0,C?postMessage({cmd:"cleanupThread",thread:a}):Bp(Kn[a])}function Zf(a){}var Yd=(a,m)=>{var y=Gd[a];if(y===void 0)throw a=Oh(a),y=Xn(a),Yn(a),new zs(`${m} has unknown type ${y}`);return y},uh=(a,m,y)=>{var x=[];return a=a.toWireType(x,y),x.length&&(o()[m>>>2>>>0]=zn(x)),a};function Jf(a,m,y){return m>>>=0,y>>>=0,a=On(a>>>0),m=Yd(m,"emval::as"),uh(m,y,a)}var id=a=>{try{a()}catch(m){yo(m)}},Bs=0,Qn=null,dh=0,od=[],ch={},ph={},em=0,Zd=null,tm=[];function hh(a){return function(m){if(!Kr){if(Bs===0){var y=!1,x=!1;m((F=0)=>{if(!Kr&&(dh=F,y=!0,x)){Bs=2,id(()=>Uh(Qn)),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.resume(),F=!1;try{var ue=function(){var kt=i()[Qn+8>>>2>>>0];return kt=Ut[ph[kt]],--ai,kt()}()}catch(kt){ue=kt,F=!0}var Le=!1;if(!Qn){var ot=Zd;ot&&(Zd=null,(F?ot.reject:ot.resolve)(ue),Le=!0)}if(F&&!Le)throw ue}}),x=!0,y||(Bs=1,Qn=function(){var F=pd(65548),ue=F+12;o()[F>>>2>>>0]=ue,o()[F+4>>>2>>>0]=ue+65536,ue=od[0];var Le=ch[ue];return Le===void 0&&(Le=em++,ch[ue]=Le,ph[Le]=ue),ue=Le,i()[F+8>>>2>>>0]=ue,F}(),typeof Browser<"u"&&Browser.Jb.Qb&&Browser.Jb.pause(),id(()=>jh(Qn)))}else Bs===2?(Bs=0,id(Wh),Yn(Qn),Qn=null,tm.forEach(lh)):yo(`invalid state: ${Bs}`);return dh}}(m=>{a().then(m)})}function rm(a){return a>>>=0,hh(()=>(a=On(a)).then(zn))}var ad=[];function nm(a,m,y,x){return y>>>=0,x>>>=0,(a=ad[a>>>0])(null,m=On(m>>>0),y,x)}var sm={},ld=a=>{var m=sm[a];return m===void 0?Xn(a):m};function im(a,m,y,x,F){return y>>>=0,x>>>=0,F>>>=0,(a=ad[a>>>0])(m=On(m>>>0),m[y=ld(y)],x,F)}var fh=()=>typeof globalThis=="object"?globalThis:Function("return this")();function om(a){return(a>>>=0)==0?zn(fh()):(a=ld(a),zn(fh()[a]))}var am=a=>{var m=ad.length;return ad.push(a),m},lm=(a,m)=>{for(var y=Array(a),x=0;x<a;++x)y[x]=Yd(o()[m+4*x>>>2>>>0],"parameter "+x);return y},mh=(a,m)=>Object.defineProperty(m,"name",{value:a});function um(a,m,y){var x=(m=lm(a,m>>>0)).shift();a--;var F=`return function (obj, func, destructorsRef, args) {
`,ue=0,Le=[];y===0&&Le.push("obj");for(var ot=["retType"],kt=[x],Ft=0;Ft<a;++Ft)Le.push("arg"+Ft),ot.push("argType"+Ft),kt.push(m[Ft]),F+=`  var arg${Ft} = argType${Ft}.readValueFromPointer(args${ue?"+"+ue:""});
`,ue+=m[Ft].argPackAdvance;return F+=`  var rv = ${y===1?"new func":"func.call"}(${Le.join(", ")});
`,x.Sb||(ot.push("emval_returnValue"),kt.push(uh),F+=`  return emval_returnValue(retType, destructorsRef, rv);
`),ot.push(F+`};
`),a=function(Kt){var Sr=Function;if(!(Sr instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof Sr} which is not a function`);var Ar=mh(Sr.name||"unknownFunctionName",function(){});return Ar.prototype=Sr.prototype,Ar=new Ar,(Kt=Sr.apply(Ar,Kt))instanceof Object?Kt:Ar}(ot)(...kt),y=`methodCaller<(${m.map(Kt=>Kt.name).join(", ")}) => ${x.name}>`,am(mh(y,a))}function dm(a){return a=ld(a>>>0),zn(l[a])}function cm(a,m){return m>>>=0,a=On(a>>>0),m=On(m),zn(a[m])}function pm(a){9<(a>>>=0)&&(cs[a+1]+=1)}function hm(){return zn([])}function fm(a){a=On(a>>>0);for(var m=Array(a.length),y=0;y<a.length;y++)m[y]=a[y];return zn(m)}function mm(a){return zn(ld(a>>>0))}function _m(){return zn({})}function gm(a){for(var m=On(a>>>=0);m.length;){var y=m.pop();m.pop()(y)}Hd(a)}function wm(a,m,y){m>>>=0,y>>>=0,a=On(a>>>0),m=On(m),y=On(y),a[m]=y}function ym(a,m){return m>>>=0,a=(a=Yd(a>>>0,"_emval_take_value")).readValueFromPointer(m),zn(a)}function bm(a,m){a=-9007199254740992>a||9007199254740992<a?NaN:Number(a),m>>>=0,a=new Date(1e3*a),i()[m>>>2>>>0]=a.getUTCSeconds(),i()[m+4>>>2>>>0]=a.getUTCMinutes(),i()[m+8>>>2>>>0]=a.getUTCHours(),i()[m+12>>>2>>>0]=a.getUTCDate(),i()[m+16>>>2>>>0]=a.getUTCMonth(),i()[m+20>>>2>>>0]=a.getUTCFullYear()-1900,i()[m+24>>>2>>>0]=a.getUTCDay(),a=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[m+28>>>2>>>0]=a}var Mo=a=>a%4==0&&(a%100!=0||a%400==0),_h=[0,31,60,91,121,152,182,213,244,274,305,335],gh=[0,31,59,90,120,151,181,212,243,273,304,334];function Mm(a,m){a=-9007199254740992>a||9007199254740992<a?NaN:Number(a),m>>>=0,a=new Date(1e3*a),i()[m>>>2>>>0]=a.getSeconds(),i()[m+4>>>2>>>0]=a.getMinutes(),i()[m+8>>>2>>>0]=a.getHours(),i()[m+12>>>2>>>0]=a.getDate(),i()[m+16>>>2>>>0]=a.getMonth(),i()[m+20>>>2>>>0]=a.getFullYear()-1900,i()[m+24>>>2>>>0]=a.getDay();var y=(Mo(a.getFullYear())?_h:gh)[a.getMonth()]+a.getDate()-1|0;i()[m+28>>>2>>>0]=y,i()[m+36>>>2>>>0]=-60*a.getTimezoneOffset(),y=new Date(a.getFullYear(),6,1).getTimezoneOffset();var x=new Date(a.getFullYear(),0,1).getTimezoneOffset();a=0|(y!=x&&a.getTimezoneOffset()==Math.min(x,y)),i()[m+32>>>2>>>0]=a}function vm(a){a>>>=0;var m=new Date(i()[a+20>>>2>>>0]+1900,i()[a+16>>>2>>>0],i()[a+12>>>2>>>0],i()[a+8>>>2>>>0],i()[a+4>>>2>>>0],i()[a>>>2>>>0],0),y=i()[a+32>>>2>>>0],x=m.getTimezoneOffset(),F=new Date(m.getFullYear(),6,1).getTimezoneOffset(),ue=new Date(m.getFullYear(),0,1).getTimezoneOffset(),Le=Math.min(ue,F);return 0>y?i()[a+32>>>2>>>0]=+(F!=ue&&Le==x):0<y!=(Le==x)&&(F=Math.max(ue,F),m.setTime(m.getTime()+6e4*((0<y?Le:F)-x))),i()[a+24>>>2>>>0]=m.getDay(),y=(Mo(m.getFullYear())?_h:gh)[m.getMonth()]+m.getDate()-1|0,i()[a+28>>>2>>>0]=y,i()[a>>>2>>>0]=m.getSeconds(),i()[a+4>>>2>>>0]=m.getMinutes(),i()[a+8>>>2>>>0]=m.getHours(),i()[a+12>>>2>>>0]=m.getDate(),i()[a+16>>>2>>>0]=m.getMonth(),i()[a+20>>>2>>>0]=m.getYear(),a=m.getTime(),BigInt(isNaN(a)?-1:a/1e3)}function wh(a,m,y,x,F,ue,Le){return C?Gr(16,1,a,m,y,x,F,ue,Le):-52}function yh(a,m,y,x,F,ue){if(C)return Gr(17,1,a,m,y,x,F,ue)}function xm(a,m,y,x){a>>>=0,m>>>=0,y>>>=0,x>>>=0;var F=new Date().getFullYear(),ue=new Date(F,0,1),Le=new Date(F,6,1);F=ue.getTimezoneOffset();var ot=Le.getTimezoneOffset(),kt=Math.max(F,ot);o()[a>>>2>>>0]=60*kt,i()[m>>>2>>>0]=+(F!=ot),ue=(a=Ft=>Ft.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(ue),Le=a(Le),ot<F?(bo(ue,y,17),bo(Le,x,17)):(bo(ue,x,17),bo(Le,y,17))}var Jd=[],bh=(a,m)=>{Jd.length=0;for(var y;y=r()[a++>>>0];){var x=y!=105;m+=(x&=y!=112)&&m%8?4:0,Jd.push(y==112?o()[m>>>2>>>0]:y==106?Lr[m>>>3]:y==105?i()[m>>>2>>>0]:c()[m>>>3>>>0]),m+=x?8:4}return Jd};function Tm(a,m,y){return a>>>=0,m=bh(m>>>0,y>>>0),Ld[a](...m)}function Cm(a,m,y){return a>>>=0,m=bh(m>>>0,y>>>0),Ld[a](...m)}var Em=()=>{},Sm=()=>Date.now();function $m(a,m){return ir(nn(a>>>0,m>>>0))}var Mh,km=()=>{throw ai+=1,"unwind"};function Pm(){return 4294901760}Mh=()=>performance.timeOrigin+performance.now();var Am=()=>navigator.hardwareConcurrency;function Im(){return yo("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function Fm(a){a>>>=0;var m=r().length;if(a<=m||4294901760<a)return!1;for(var y=1;4>=y;y*=2){var x=m*(1+.2/y);x=Math.min(x,a+100663296);var F=Math;x=Math.max(a,x);e:{F=(F.min.call(F,4294901760,x+(65536-x%65536)%65536)-dr.buffer.byteLength+65535)/65536;try{dr.grow(F),vn();var ue=1;break e}catch{}ue=void 0}if(ue)return!0}return!1}var ud=()=>(yo("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),uu={},vh=a=>{a.forEach(m=>{ud()})};function Om(){var a=Error().stack.toString().split(`
`);return a[0]=="Error"&&a.shift(),vh(a),uu.Ob=ud(),uu.ac=a,uu.Ob}function zm(a,m,y){if(a>>>=0,m>>>=0,uu.Ob==a)var x=uu.ac;else(x=Error().stack.toString().split(`
`))[0]=="Error"&&x.shift(),vh(x);for(var F=3;x[F]&&ud()!=a;)++F;for(a=0;a<y&&x[a+F];++a)i()[m+4*a>>>2>>>0]=ud();return a}var ec,tc={},xh=()=>{if(!ec){var a,m={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:fe};for(a in tc)tc[a]===void 0?delete m[a]:m[a]=tc[a];var y=[];for(a in m)y.push(`${a}=${m[a]}`);ec=y}return ec};function Th(a,m){if(C)return Gr(18,1,a,m);a>>>=0,m>>>=0;var y=0;return xh().forEach((x,F)=>{var ue=m+y;for(F=o()[a+4*F>>>2>>>0]=ue,ue=0;ue<x.length;++ue)t()[F++>>>0]=x.charCodeAt(ue);t()[F>>>0]=0,y+=x.length+1}),0}function Ch(a,m){if(C)return Gr(19,1,a,m);a>>>=0,m>>>=0;var y=xh();o()[a>>>2>>>0]=y.length;var x=0;return y.forEach(F=>x+=F.length+1),o()[m>>>2>>>0]=x,0}function Eh(a){return C?Gr(20,1,a):52}function Sh(a,m,y,x){return C?Gr(21,1,a,m,y,x):52}function $h(a,m,y,x){return C?Gr(22,1,a,m,y,x):70}var Dm=[null,[],[]];function kh(a,m,y,x){if(C)return Gr(23,1,a,m,y,x);m>>>=0,y>>>=0,x>>>=0;for(var F=0,ue=0;ue<y;ue++){var Le=o()[m>>>2>>>0],ot=o()[m+4>>>2>>>0];m+=8;for(var kt=0;kt<ot;kt++){var Ft=r()[Le+kt>>>0],Kt=Dm[a];Ft===0||Ft===10?((a===1?hr:ir)(Wp(Kt,0)),Kt.length=0):Kt.push(Ft)}F+=ot}return o()[x>>>2>>>0]=F,0}var Ph=[31,29,31,30,31,30,31,31,30,31,30,31],Ah=[31,28,31,30,31,30,31,31,30,31,30,31],Bm=(a,m)=>{t().set(a,m>>>0)};function Ih(a,m,y,x){function F(Ae,tr,Ir){for(Ae=typeof Ae=="number"?Ae.toString():Ae||"";Ae.length<tr;)Ae=Ir[0]+Ae;return Ae}function ue(Ae,tr){return F(Ae,tr,"0")}function Le(Ae,tr){function Ir(qh){return 0>qh?-1:0<qh?1:0}var ui;return(ui=Ir(Ae.getFullYear()-tr.getFullYear()))===0&&(ui=Ir(Ae.getMonth()-tr.getMonth()))===0&&(ui=Ir(Ae.getDate()-tr.getDate())),ui}function ot(Ae){switch(Ae.getDay()){case 0:return new Date(Ae.getFullYear()-1,11,29);case 1:return Ae;case 2:return new Date(Ae.getFullYear(),0,3);case 3:return new Date(Ae.getFullYear(),0,2);case 4:return new Date(Ae.getFullYear(),0,1);case 5:return new Date(Ae.getFullYear()-1,11,31);case 6:return new Date(Ae.getFullYear()-1,11,30)}}function kt(Ae){var tr=Ae.Bb;for(Ae=new Date(new Date(Ae.Cb+1900,0,1).getTime());0<tr;){var Ir=Ae.getMonth(),ui=(Mo(Ae.getFullYear())?Ph:Ah)[Ir];if(!(tr>ui-Ae.getDate())){Ae.setDate(Ae.getDate()+tr);break}tr-=ui-Ae.getDate()+1,Ae.setDate(1),11>Ir?Ae.setMonth(Ir+1):(Ae.setMonth(0),Ae.setFullYear(Ae.getFullYear()+1))}return Ir=new Date(Ae.getFullYear()+1,0,4),tr=ot(new Date(Ae.getFullYear(),0,4)),Ir=ot(Ir),0>=Le(tr,Ae)?0>=Le(Ir,Ae)?Ae.getFullYear()+1:Ae.getFullYear():Ae.getFullYear()-1}a>>>=0,m>>>=0,y>>>=0,x>>>=0;var Ft=o()[x+40>>>2>>>0];for(var Kt in x={fc:i()[x>>>2>>>0],ec:i()[x+4>>>2>>>0],Gb:i()[x+8>>>2>>>0],Kb:i()[x+12>>>2>>>0],Hb:i()[x+16>>>2>>>0],Cb:i()[x+20>>>2>>>0],ub:i()[x+24>>>2>>>0],Bb:i()[x+28>>>2>>>0],nc:i()[x+32>>>2>>>0],dc:i()[x+36>>>2>>>0],hc:Ft?nn(Ft):""},y=nn(y),Ft={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})y=y.replace(new RegExp(Kt,"g"),Ft[Kt]);var Sr="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ar="January February March April May June July August September October November December".split(" ");for(Kt in Ft={"%a":Ae=>Sr[Ae.ub].substring(0,3),"%A":Ae=>Sr[Ae.ub],"%b":Ae=>Ar[Ae.Hb].substring(0,3),"%B":Ae=>Ar[Ae.Hb],"%C":Ae=>ue((Ae.Cb+1900)/100|0,2),"%d":Ae=>ue(Ae.Kb,2),"%e":Ae=>F(Ae.Kb,2," "),"%g":Ae=>kt(Ae).toString().substring(2),"%G":kt,"%H":Ae=>ue(Ae.Gb,2),"%I":Ae=>((Ae=Ae.Gb)==0?Ae=12:12<Ae&&(Ae-=12),ue(Ae,2)),"%j":Ae=>{for(var tr=0,Ir=0;Ir<=Ae.Hb-1;tr+=(Mo(Ae.Cb+1900)?Ph:Ah)[Ir++]);return ue(Ae.Kb+tr,3)},"%m":Ae=>ue(Ae.Hb+1,2),"%M":Ae=>ue(Ae.ec,2),"%n":()=>`
`,"%p":Ae=>0<=Ae.Gb&&12>Ae.Gb?"AM":"PM","%S":Ae=>ue(Ae.fc,2),"%t":()=>"	","%u":Ae=>Ae.ub||7,"%U":Ae=>ue(Math.floor((Ae.Bb+7-Ae.ub)/7),2),"%V":Ae=>{var tr=Math.floor((Ae.Bb+7-(Ae.ub+6)%7)/7);if(2>=(Ae.ub+371-Ae.Bb-2)%7&&tr++,tr)tr==53&&((Ir=(Ae.ub+371-Ae.Bb)%7)==4||Ir==3&&Mo(Ae.Cb)||(tr=1));else{tr=52;var Ir=(Ae.ub+7-Ae.Bb-1)%7;(Ir==4||Ir==5&&Mo(Ae.Cb%400-1))&&tr++}return ue(tr,2)},"%w":Ae=>Ae.ub,"%W":Ae=>ue(Math.floor((Ae.Bb+7-(Ae.ub+6)%7)/7),2),"%y":Ae=>(Ae.Cb+1900).toString().substring(2),"%Y":Ae=>Ae.Cb+1900,"%z":Ae=>{var tr=0<=(Ae=Ae.dc);return Ae=Math.abs(Ae)/60,(tr?"+":"-")+("0000"+(Ae/60*100+Ae%60)).slice(-4)},"%Z":Ae=>Ae.hc,"%%":()=>"%"},y=y.replace(/%%/g,"\0\0"),Ft)y.includes(Kt)&&(y=y.replace(new RegExp(Kt,"g"),Ft[Kt](x)));return Kt=function(Ae){var tr=Array(Ud(Ae)+1);return Hp(Ae,tr,0,tr.length),tr}(y=y.replace(/\0\0/g,"%")),Kt.length>m?0:(Bm(Kt,a),Kt.length-1)}function Lm(a,m,y,x){return Ih(a>>>0,m>>>0,y>>>0,x>>>0)}C||function(){for(var a=l.numThreads-1;a--;)Np();hn.unshift(()=>{Fs++,function(m){C?m():Promise.all(Os.map(Rp)).then(m)}(()=>$p())})}();for(var Fh=Array(256),dd=0;256>dd;++dd)Fh[dd]=String.fromCharCode(dd);ih=Fh,zs=l.BindingError=class extends Error{constructor(a){super(a),this.name="BindingError"}},l.InternalError=class extends Error{constructor(a){super(a),this.name="InternalError"}},cs.push(0,1,void 0,1,null,1,!0,1,!1,1),l.count_emval_handles=()=>cs.length/2-5-qd.length;var Rm=[jd,zp,jp,Gp,qp,Kp,Xp,Qp,Yp,Zp,Jp,eh,th,rh,nh,sh,wh,yh,Th,Ch,Eh,Sh,$h,kh],Ut=function(){function a(y,x){return Ut=y.exports,Ut=function(){var F=Ut,ue={};for(let[Le,ot]of Object.entries(F))ue[Le]=typeof ot=="function"?(...kt)=>{od.push(Le);try{return ot(...kt)}finally{Kr||(od.pop(),Qn&&Bs===1&&od.length===0&&(Bs=0,ai+=1,id(Vh),typeof Fibers<"u"&&Fibers.oc()))}}:ot;return ue}(),Ut=function(){var F=Ut,ue=ot=>kt=>ot(kt)>>>0,Le=ot=>()=>ot()>>>0;return(F=Object.assign({},F)).Ca=ue(F.Ca),F.fb=Le(F.fb),F.gb=ue(F.gb),F.emscripten_main_runtime_thread_id=Le(F.emscripten_main_runtime_thread_id),F.sb=ue(F.sb),F.tb=Le(F.tb),F}(),Dp.push(Ut.ib),ln.unshift(Ut.Ba),Wt=x,$p(),Ut}var m=Fp();if(Fs++,l.instantiateWasm)try{return l.instantiateWasm(m,a)}catch(y){ir(`Module.instantiateWasm callback failed with error: ${y}`),w(y)}return Bd||=l.locateFile?kp("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":l.locateFile?l.locateFile("ort-wasm-simd-threaded.jsep.wasm",Ve):Ve+"ort-wasm-simd-threaded.jsep.wasm":new URL(u("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),u.b).href,function(y,x){var F=Bd;return pt||typeof WebAssembly.instantiateStreaming!="function"||kp(F)||Pp(F)||typeof fetch!="function"?Ip(F,y,x):fetch(F,{credentials:"same-origin"}).then(ue=>WebAssembly.instantiateStreaming(ue,y).then(x,function(Le){return ir(`wasm streaming compile failed: ${Le}`),ir("falling back to ArrayBuffer instantiation"),Ip(F,y,x)}))}(m,function(y){a(y.instance,y.module)}).catch(w),{}}(),Oh=a=>(Oh=Ut.Ca)(a),zh=()=>(zh=Ut.Da)();l._OrtInit=(a,m)=>(l._OrtInit=Ut.Ea)(a,m),l._OrtGetLastError=(a,m)=>(l._OrtGetLastError=Ut.Fa)(a,m),l._OrtCreateSessionOptions=(a,m,y,x,F,ue,Le,ot,kt,Ft)=>(l._OrtCreateSessionOptions=Ut.Ga)(a,m,y,x,F,ue,Le,ot,kt,Ft),l._OrtAppendExecutionProvider=(a,m)=>(l._OrtAppendExecutionProvider=Ut.Ha)(a,m),l._OrtAddFreeDimensionOverride=(a,m,y)=>(l._OrtAddFreeDimensionOverride=Ut.Ia)(a,m,y),l._OrtAddSessionConfigEntry=(a,m,y)=>(l._OrtAddSessionConfigEntry=Ut.Ja)(a,m,y),l._OrtReleaseSessionOptions=a=>(l._OrtReleaseSessionOptions=Ut.Ka)(a),l._OrtCreateSession=(a,m,y)=>(l._OrtCreateSession=Ut.La)(a,m,y),l._OrtReleaseSession=a=>(l._OrtReleaseSession=Ut.Ma)(a),l._OrtGetInputOutputCount=(a,m,y)=>(l._OrtGetInputOutputCount=Ut.Na)(a,m,y),l._OrtGetInputName=(a,m)=>(l._OrtGetInputName=Ut.Oa)(a,m),l._OrtGetOutputName=(a,m)=>(l._OrtGetOutputName=Ut.Pa)(a,m),l._OrtFree=a=>(l._OrtFree=Ut.Qa)(a),l._OrtCreateTensor=(a,m,y,x,F,ue)=>(l._OrtCreateTensor=Ut.Ra)(a,m,y,x,F,ue),l._OrtGetTensorData=(a,m,y,x,F)=>(l._OrtGetTensorData=Ut.Sa)(a,m,y,x,F),l._OrtReleaseTensor=a=>(l._OrtReleaseTensor=Ut.Ta)(a),l._OrtCreateRunOptions=(a,m,y,x)=>(l._OrtCreateRunOptions=Ut.Ua)(a,m,y,x),l._OrtAddRunConfigEntry=(a,m,y)=>(l._OrtAddRunConfigEntry=Ut.Va)(a,m,y),l._OrtReleaseRunOptions=a=>(l._OrtReleaseRunOptions=Ut.Wa)(a),l._OrtCreateBinding=a=>(l._OrtCreateBinding=Ut.Xa)(a),l._OrtBindInput=(a,m,y)=>(l._OrtBindInput=Ut.Ya)(a,m,y),l._OrtBindOutput=(a,m,y,x)=>(l._OrtBindOutput=Ut.Za)(a,m,y,x),l._OrtClearBoundOutputs=a=>(l._OrtClearBoundOutputs=Ut._a)(a),l._OrtReleaseBinding=a=>(l._OrtReleaseBinding=Ut.$a)(a),l._OrtRunWithBinding=(a,m,y,x,F)=>(l._OrtRunWithBinding=Ut.ab)(a,m,y,x,F),l._OrtRun=(a,m,y,x,F,ue,Le,ot)=>(l._OrtRun=Ut.bb)(a,m,y,x,F,ue,Le,ot),l._OrtEndProfiling=a=>(l._OrtEndProfiling=Ut.cb)(a),l._JsepOutput=(a,m,y)=>(l._JsepOutput=Ut.db)(a,m,y),l._JsepGetNodeName=a=>(l._JsepGetNodeName=Ut.eb)(a);var cd,vo=()=>(vo=Ut.fb)(),pd=l._malloc=a=>(pd=l._malloc=Ut.gb)(a),Yn=l._free=a=>(Yn=l._free=Ut.hb)(a),rc=(a,m,y,x,F,ue)=>(rc=Ut.kb)(a,m,y,x,F,ue),Dh=()=>(Dh=Ut.lb)(),Bh=(a,m,y,x,F)=>(Bh=Ut.mb)(a,m,y,x,F),nc=a=>(nc=Ut.nb)(a),hd=a=>(hd=Ut.ob)(a),Lh=()=>(Lh=Ut.pb)(),Rh=(a,m)=>(Rh=Ut.qb)(a,m),fd=a=>(fd=Ut.rb)(a),sc=a=>(sc=Ut.sb)(a),ic=()=>(ic=Ut.tb)(),Nh=l.dynCall_ii=(a,m)=>(Nh=l.dynCall_ii=Ut.vb)(a,m),jh=a=>(jh=Ut.wb)(a),Vh=()=>(Vh=Ut.xb)(),Uh=a=>(Uh=Ut.yb)(a),Wh=()=>(Wh=Ut.zb)();function Gh(){0<Fs||(C?(f(l),C||nd(ln),startWorker(l)):(nd(hn),0<Fs||cd||(cd=!0,l.calledRun=!0,Kr||(C||nd(ln),f(l),C||nd(Is)))))}return l.___start_em_js=861437,l.___stop_em_js=861659,l.stackSave=()=>ic(),l.stackRestore=a=>fd(a),l.stackAlloc=a=>sc(a),l.UTF8ToString=nn,l.stringToUTF8=bo,l.lengthBytesUTF8=Ud,oi=function a(){cd||Gh(),cd||(oi=a)},Gh(),b}),Et=ft,globalThis.self?.name==="em-pthread"&&ft()}),Ge,Bt,Dt,Gt,Xt,Jt,jt,xr,Nr=D(()=>{ie(),Ge=self.location.href??(typeof document<"u"?document.currentScript?.src:typeof self<"u"?self.location?.href:void 0),Bt=typeof location>"u"?void 0:location.origin,Dt=(e,t)=>{try{let r=t??Ge;return(r?new URL(e,r):new URL(e)).origin===Bt}catch{return!1}},Gt=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},Xt=(lt(),P(ve)).default,Jt=async()=>{if(!Ge)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Dt(Ge))return[void 0,Xt()];let e=await Gt(Ge);return[e,Xt(e)]},jt=(zt(),P(nt)).default,xr=async(e,t,r)=>[void 0,jt]}),Tr,Qe,St,Ot,Zr,ps,Zn,jr,un=D(()=>{Nr(),Qe=!1,St=!1,Ot=!1,Zr=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},ps=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Zn=async e=>{if(Qe)return Promise.resolve();if(St)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Ot)throw new Error("previous call to 'initializeWebAssembly()' failed.");St=!0;let t=e.initTimeout,r=e.numThreads;if(!ps())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=Zr();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let s=e.wasmPaths,i=typeof s=="string"?s:void 0,o=s?.mjs,d=o?.href??o,c=s?.wasm,f=c?.href??c,w=e.wasmBinary,[l,b]=await xr(d,i,r>1),S=!1,T=[];if(t>0&&T.push(new Promise(C=>{setTimeout(()=>{S=!0,C()},t)})),T.push(new Promise((C,H)=>{let q={numThreads:r};w?q.wasmBinary=w:(f||i)&&(q.locateFile=(O,ne)=>f??(i??ne)+O),b(q).then(O=>{St=!1,Qe=!0,Tr=O,C(),l&&URL.revokeObjectURL(l)},O=>{St=!1,Ot=!0,H(O)})})),await Promise.race(T),S)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},jr=()=>{if(Qe&&Tr)return Tr;throw new Error("WebAssembly is not initialized yet.")}}),qr,Wn,Or,Dn=D(()=>{un(),qr=(e,t)=>{let r=jr(),n=r.lengthBytesUTF8(e)+1,s=r._malloc(n);return r.stringToUTF8(e,s,n),t.push(s),s},Wn=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([s,i])=>{let o=t?t+s:s;if(typeof i=="object")Wn(i,o+".",r,n);else if(typeof i=="string"||typeof i=="number")n(o,i.toString());else if(typeof i=="boolean")n(o,i?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},Or=e=>{let t=jr(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let s=t.HEAP32[n/4],i=t.HEAPU32[n/4+1],o=i?t.UTF8ToString(i):"";throw new Error(`${e} ERROR_CODE: ${s}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}}),En,Ls=D(()=>{un(),Dn(),En=e=>{let t=jr(),r=0,n=[],s=e||{};try{if(e?.logSeverityLevel===void 0)s.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)s.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(s.terminate=!1);let i=0;return e?.tag!==void 0&&(i=qr(e.tag,n)),r=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,i),r===0&&Or("Can't create run options."),e?.extra!==void 0&&Wn(e.extra,"",new WeakSet,(o,d)=>{let c=qr(o,n),f=qr(d,n);t._OrtAddRunConfigEntry(r,c,f)!==0&&Or(`Can't set a run config entry: ${o} - ${d}.`)}),[r,n]}catch(i){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(o=>t._free(o)),i}}}),hs,fs,ms,_s,Bn,Rs=D(()=>{un(),Dn(),hs=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},fs=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ms=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},_s=(e,t,r)=>{for(let n of t){let s=typeof n=="string"?n:n.name;switch(s){case"webnn":if(s="WEBNN",typeof n!="string"){let o=n?.deviceType;if(o){let d=qr("deviceType",r),c=qr(o,r);jr()._OrtAddSessionConfigEntry(e,d,c)!==0&&Or(`Can't set a session config entry: 'deviceType' - ${o}.`)}}break;case"webgpu":if(s="JS",typeof n!="string"){let o=n;if(o?.preferredLayout){if(o.preferredLayout!=="NCHW"&&o.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${o.preferredLayout}`);let d=qr("preferredLayout",r),c=qr(o.preferredLayout,r);jr()._OrtAddSessionConfigEntry(e,d,c)!==0&&Or(`Can't set a session config entry: 'preferredLayout' - ${o.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${s}`)}let i=qr(s,r);jr()._OrtAppendExecutionProvider(e,i)!==0&&Or(`Can't append execution provider: ${s}.`)}},Bn=e=>{let t=jr(),r=0,n=[],s=e||{};ms(s);try{let i=hs(s.graphOptimizationLevel??"all"),o=fs(s.executionMode??"sequential"),d=typeof s.logId=="string"?qr(s.logId,n):0,c=s.logSeverityLevel??2;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log serverity level is not valid: ${c}`);let f=s.logVerbosityLevel??0;if(!Number.isInteger(f)||f<0||f>4)throw new Error(`log verbosity level is not valid: ${f}`);let w=typeof s.optimizedModelFilePath=="string"?qr(s.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(i,!!s.enableCpuMemArena,!!s.enableMemPattern,o,!!s.enableProfiling,0,d,c,f,w),r===0&&Or("Can't create session options."),s.executionProviders&&_s(r,s.executionProviders,n),s.enableGraphCapture!==void 0){if(typeof s.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${s.enableGraphCapture}`);let l=qr("enableGraphCapture",n),b=qr(s.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(r,l,b)!==0&&Or(`Can't set a session config entry: 'enableGraphCapture' - ${s.enableGraphCapture}.`)}if(s.freeDimensionOverrides)for(let[l,b]of Object.entries(s.freeDimensionOverrides)){if(typeof l!="string")throw new Error(`free dimension override name must be a string: ${l}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let S=qr(l,n);t._OrtAddFreeDimensionOverride(r,S,b)!==0&&Or(`Can't set a free dimension override: ${l} - ${b}.`)}return s.extra!==void 0&&Wn(s.extra,"",new WeakSet,(l,b)=>{let S=qr(l,n),T=qr(b,n);t._OrtAddSessionConfigEntry(r,S,T)!==0&&Or(`Can't set a session config entry: ${l} - ${b}.`)}),[r,n]}catch(i){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(o=>t._free(o)),i}}}),Jn,xn,Sn,$n,Gn,es,ts,Yt=D(()=>{Jn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},xn=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Sn=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],$n=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Gn=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},es=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool",ts=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}}),qn,gs=D(()=>{ie(),qn=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let s=t.body.getReader(),i;try{i=new ArrayBuffer(n)}catch(d){if(d instanceof RangeError){let c=Math.ceil(n/65536);i=new WebAssembly.Memory({initial:c,maximum:c}).buffer}else throw d}let o=0;for(;;){let{done:d,value:c}=await s.read();if(d)break;let f=c.byteLength;new Uint8Array(i,o,f).set(c),o+=f}return new Uint8Array(i,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),ws,rs,ys,bs,ns,Ms,Dr,fn=D(()=>{Yt(),ws=["V","I","W","E","F"],rs=(e,t)=>{console.log(`[${ws[e]},${new Date().toISOString()}]${t}`)},ns=(e,t)=>{ys=e,bs=t},Ms=(e,t)=>{let r=Gn(e),n=Gn(ys);r>=n&&rs(r,typeof t=="function"?t():t)},Dr=(...e)=>{bs&&Ms(...e)}}),ye,_=D(()=>{Yt(),ye=(e,t)=>new($n(t))(e)}),z=D(()=>{}),X,Q,xe,De,Mt,gt,Ct,mt,cr,rr=D(()=>{fn(),z(),X=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Q=[],xe=e=>Math.ceil(e/16)*16,De=e=>{for(let t=0;t<Q.length;t++){let r=Q[t];if(e<=r)return r}return Math.ceil(e/16)*16},Mt=1,gt=()=>Mt++,Ct=async(e,t,r,n)=>{let s=xe(r),i=e.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let o=e.getCommandEncoder();e.endComputePass(),o.copyBufferToBuffer(t,0,i,0,s),e.flush(),await i.mapAsync(GPUMapMode.READ);let d=i.getMappedRange();if(n){let c=n();return c.set(new Uint8Array(d,0,r)),c}else return new Uint8Array(d.slice(0,r))}finally{i.destroy()}},mt=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map;for(let[t]of X)Q.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[])}upload(e,t){let r=t.buffer,n=t.byteOffset,s=t.byteLength,i=xe(s),o=this.storageCache.get(e);if(!o)throw new Error("gpu data for uploading does not exist");if(o.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${o.originalSize}, data size=${s}`);let d=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=d.getMappedRange();new Uint8Array(c).set(new Uint8Array(r,n,s)),d.unmap();let f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(d,0,o.gpuData.buffer,0,i),Dr("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`),this.buffersForUploadingPending.push(d)}memcpy(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=xe(r.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(e,t,r){let n;if(r){if(n=this.externalBuffers.get(r),n===void 0)throw new Error("previous buffer is not registered");if(e===r)return Dr("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(r)}else n=gt();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),this.externalBuffers.set(e,n),Dr("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){let t=this.externalBuffers.get(e);t!==void 0&&(this.storageCache.delete(t),this.externalBuffers.delete(e),Dr("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=De(e),n,s=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||i){let d=(s?this.freeBuffers:this.freeUniformBuffers).get(r);d?d.length>0?n=d.pop():n=this.backend.device.createBuffer({size:r,usage:t}):n=this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let o={id:gt(),type:0,buffer:n};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),Dr("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${o.id}`),o}get(e){return this.storageCache.get(e)?.gpuData}release(e){let t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return Dr("verbose",()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("data does not exist");await Ct(this.backend,r.gpuData.buffer,r.originalSize,t)}refreshPendingBuffers(){for(let e of this.buffersForUploadingPending)e.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=X.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let r=this.freeBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let r=this.freeUniformBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(r=>{r.destroy()}),this.capturedPendingBuffers.delete(e))}},cr=(...e)=>new mt(...e)}),fr,Qt,Er=D(()=>{fr=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Qt=e=>new fr(e)}),mn,zr,Je,kn,gr,Xr,sn,Zt=D(()=>{mn=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},zr=class{static calcShape(e,t,r=!1){let n=e.length,s=t.length;if(n===0)return t;if(s===0)return e;let i=Math.max(e.length,t.length),o=new Array(i);if(r){if(n<2||s<2)return;let d=mn.calcMatMulShape([e[n-2],e[n-1]],[t[s-2],t[s-1]]);if(d===void 0)return;[o[i-2],o[i-1]]=d}for(let d=r?3:1;d<=i;d++){let c=n-d<0?1:e[n-d],f=s-d<0?1:t[s-d];if(c!==f&&c>1&&f>1)return;let w=Math.max(c,f);if(c&&f)o[i-d]=Math.max(c,f);else{if(w>1)return;o[i-d]=0}}return o}static isValidBroadcast(e,t){let r=e.length,n=t.length;if(r>n)return!1;for(let s=1;s<=r;s++)if(e[r-s]!==1&&e[r-s]!==t[n-s])return!1;return!0}},Je=class md{static size(t){return md.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let s=new Array(n),i=n-1;for(;i>=0;){if(t[i]%r===0){s[i]=t[i]/r;break}if(r%t[i]!==0)throw new Error("cannot convert shape");s[i]=1,r/=t[i],i--}for(i--;i>=0;i--)s[i]=t[i];return s}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return md.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return md.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let s=1;for(let i=r;i<n;i++){if(t[i]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");s*=t[i]}return s}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let s=r-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((s,i)=>s+r[i]+r[i+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,s)=>n===r[s])}},kn=class du{static adjustPoolAttributes(t,r,n,s,i,o){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=n.length?n.push(r[d+2]):n[d]=r[d+2];for(let d=0;d<n.length;d++)if(d<s.length){if(s[d]<0)throw new Error("strides should be greater than or equal to 1")}else s.push(1);for(let d=0;d<n.length;d++)if(d<i.length){if(i[d]<0)throw new Error("dilations should be greater than or equal to 1")}else i.push(1);for(let d=0;d<n.length*2;d++)if(d<o.length){if(o[d]<0)throw new Error("pad should be greater than or equal to 1")}else o.push(0);for(let d=0;d<n.length;d++){if(n[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(o[d]>=n[d]||o[d+n.length]>=n[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,s,i,o,d){if(d){if(i.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let c=0;c<t.length-2;c++)du.adjustPadAndReturnShape(t[c+(o?1:2)],r[c],n[c],s[c],i,c,c+t.length-2,d)}}static computePoolOutputShape(t,r,n,s,i,o,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let c=[r[0],r[1]];return du.computeShapeHelper(t,r,c,n,s,i,o,d),c}static computeConvOutputShape(t,r,n,s,i,o,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let c=[t[0],r[0]];return du.computeShapeHelper(!1,t,c,n,s,i,o,d),c}static computeShapeHelper(t,r,n,s,i,o,d,c){if(t)for(let f=0;f<r.length-2;f++)n.push(1);else for(let f=0;f<r.length-2;f++)n.push(du.adjustPadAndReturnShape(r[f+2],s[f],i[f],o[f],d,f,f+r.length-2,c))}static adjustPadAndReturnShape(t,r,n,s,i,o,d,c){let f=n*(s-1)+1;if(c&&c!=="NOTSET")switch(c){case"VALID":return i[o]=0,i[d]=0,Math.floor((t-f)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let w=((t+r-1)/r-1)*r+s-t;return i[o]=Math.floor(c==="SAME_LOWER"?(w+1)/2:w/2),i[d]=w-i[o],Math.floor((t+w-s)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+i[o]+i[d]-f)/r+1)}},gr=class{static getShapeOfGemmResult(e,t,r,n,s){if(e.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let i,o,d;t?(i=e[1],o=e[0]):(i=e[0],o=e[1]);let c=-1;if(n?(d=r[0],c=1):(d=r[1],c=0),r[c]!==o)throw new Error("dimension mismatch");if(i<=0||d<=0||o<=0)throw new Error("invalid shape specified");if(s&&!zr.isValidBroadcast(s,[i,d]))throw new Error("gemm: invalid bias shape for broadcast");return[i,d,o]}},Xr=-34028234663852886e22,sn=34028234663852886e22}),dn,Jr,wr,yr,$t,mr,$r,Br,cn,It,Ns,it,Rt,di,ci,xo,ss,nr=D(()=>{Yt(),Zt(),dn=64,Jr=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},wr=(e,t=1)=>{let r=Jr(e,t);return typeof r=="string"?r:r[0]},yr=(e,t=1)=>{let r=Jr(e,t);return typeof r=="string"?r:r[1]},$t=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:Je.computeStrides(r)})}),t},mr=e=>e%4===0?4:e%2===0?2:1,$r=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Br=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,cn=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,It=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Ns=(e,t,r,n,s)=>{let i=typeof r=="number",o=i?r:r.length,d=[...new Array(o).keys()],c=o<2?"u32":o<=4?`vec${o}<u32>`:`array<u32, ${o}>`,f=Jr(t,s),w=typeof f=="string"?f:f[1],l=typeof f=="string"?f:f[0],b={indices:c,value:w,storage:l,tensor:t},S=Ue=>typeof Ue=="string"?Ue:`${Ue}u`,T={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},C=i?"uniforms.":"",H=`${C}${e}_shape`,q=`${C}${e}_strides`,O="";for(let Ue=0;Ue<o-1;Ue++)O+=`
    let dim${Ue} = current / ${It(q,Ue,o)};
    let rest${Ue} = current % ${It(q,Ue,o)};
    indices[${Ue}] = dim${Ue};
    current = rest${Ue};
    `;O+=`indices[${o-1}] = current;`;let ne=o<2?"":`
  fn o2i_${e}(offset: u32) -> ${b.indices} {
    var indices: ${b.indices};
    var current = offset;
    ${O}
    return indices;
  }`,se=Ue=>(T.offsetToIndices=!0,o<2?Ue:`o2i_${e}(${Ue})`),fe=[];if(o>=2)for(let Ue=o-1;Ue>=0;Ue--)fe.push(`${It(q,Ue,o)} * (indices[${Ue}])`);let et=o<2?"":`
  fn i2o_${e}(indices: ${b.indices}) -> u32 {
    return ${fe.join("+")};
  }`,Ve=Ue=>(T.indicesToOffset=!0,o<2?Ue:`i2o_${e}(${Ue})`),pt=(...Ue)=>o===0?"0u":`${b.indices}(${Ue.map(S).join(",")})`,Nt=(Ue,Lt)=>o<2?`${Ue}`:`${It(Ue,Lt,o)}`,At=(Ue,Lt,ar)=>o<2?`${Ue}=${ar};`:`${It(Ue,Lt,o)}=${ar};`,hr={},ir=(Ue,Lt)=>{T.broadcastedIndicesToOffset=!0;let ar=`${Lt.name}broadcastedIndicesTo${e}Offset`;if(ar in hr)return`${ar}(${Ue})`;let Hr=[];for(let Lr=o-1;Lr>=0;Lr--){let Fn=Lt.indicesGet("outputIndices",Lr+Lt.rank-o);Hr.push(`${Nt(q,Lr)} * (${Fn} % ${Nt(H,Lr)})`)}return hr[ar]=`fn ${ar}(outputIndices: ${Lt.type.indices}) -> u32 {
             return ${Hr.length>0?Hr.join("+"):"0u"};
           }`,`${ar}(${Ue})`},vr=(Ue,Lt)=>(()=>{if(b.storage===b.value)return`${e}[${Ue}]=${Lt};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${Ue}]=vec2<u32>(u32(${Lt}), select(0u, 0xFFFFFFFFu, ${Lt} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${Ue}]=vec2<u32>(u32(${Lt}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${Ue}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${Lt}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),Mr=Ue=>(()=>{if(b.storage===b.value)return`${e}[${Ue}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${Ue}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${Ue}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${Ue}] & 0xFFu), bool(${e}[${Ue}] & 0xFF00u), bool(${e}[${Ue}] & 0xFF0000u), bool(${e}[${Ue}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),dr=o<2?"":`
  fn get_${e}ByIndices(indices: ${b.indices}) -> ${w} {
    return ${Mr(`i2o_${e}(indices)`)};
  }`,Wt=o<2?"":(()=>{let Ue=d.map(ar=>`d${ar}: u32`).join(", "),Lt=d.map(ar=>`d${ar}`).join(", ");return`
  fn get_${e}(${Ue}) -> ${w} {
    return get_${e}ByIndices(${pt(Lt)});
  }`})(),Pr=(...Ue)=>{if(Ue.length!==o)throw new Error(`indices length must be ${o}`);let Lt=Ue.map(S).join(",");return o===0?Mr("0u"):o===1?Mr(Lt[0]):(T.get=!0,T.getByIndices=!0,T.indicesToOffset=!0,`get_${e}(${Lt})`)},lr=Ue=>o<2?Mr(Ue):(T.getByIndices=!0,T.indicesToOffset=!0,`get_${e}ByIndices(${Ue})`),Vt=o<2?"":`
  fn set_${e}ByIndices(indices: ${b.indices}, value: ${w}) {
    ${vr(`i2o_${e}(indices)`,"value")}
  }`,or=o<2?"":(()=>{let Ue=d.map(ar=>`d${ar}: u32`).join(", "),Lt=d.map(ar=>`d${ar}`).join(", ");return`
  fn set_${e}(${Ue}, value: ${w}) {
    set_${e}ByIndices(${pt(Lt)}, value);
  }`})();return{impl:()=>{let Ue=[],Lt=!1;return T.offsetToIndices&&(Ue.push(ne),Lt=!0),T.indicesToOffset&&(Ue.push(et),Lt=!0),T.broadcastedIndicesToOffset&&(Object.values(hr).forEach(ar=>Ue.push(ar)),Lt=!0),T.set&&(Ue.push(or),Lt=!0),T.setByIndices&&(Ue.push(Vt),Lt=!0),T.get&&(Ue.push(Wt),Lt=!0),T.getByIndices&&(Ue.push(dr),Lt=!0),!i&&Lt&&Ue.unshift(`const ${H} = ${b.indices}(${r.join(",")});`,`const ${q} = ${b.indices}(${Je.computeStrides(r).join(",")});`),Ue.join(`
`)},type:b,offsetToIndices:se,indicesToOffset:Ve,broadcastedIndicesToOffset:ir,indices:pt,indicesGet:Nt,indicesSet:At,set:(...Ue)=>{if(Ue.length!==o+1)throw new Error(`indices length must be ${o}`);let Lt=Ue[o];if(typeof Lt!="string")throw new Error("value must be string");let ar=Ue.slice(0,o).map(S).join(",");return o===0?vr("0u",Lt):o===1?vr(ar[0],Lt):(T.set=!0,T.setByIndices=!0,T.indicesToOffset=!0,`set_${e}(${ar}, ${Lt})`)},setByOffset:vr,setByIndices:(Ue,Lt)=>o<2?vr(Ue,Lt):(T.setByIndices=!0,T.indicesToOffset=!0,`set_${e}ByIndices(${Ue}, ${Lt});`),get:Pr,getByOffset:Mr,getByIndices:lr,usage:n,name:e,strides:q,shape:H,rank:o}},it=(e,t,r,n=1)=>Ns(e,t,r,"input",n),Rt=(e,t,r,n=1)=>Ns(e,t,r,"output",n),di=(e,t,r,n=1)=>Ns(e,t,r,"internal",n),ci=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=dn){let t=typeof e=="number"?e:e[0],r=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||r>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*r*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,i=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,o=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${t*r*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${r}, ${n})
  fn main(${i}) {
    ${o}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let r=e.usage==="input"?"read":"read_write",n=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${r}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,r=1){return this.uniforms.push({name:e,type:t,length:r}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:r,length:n}of this.uniforms)if(n&&n>4)r==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${r}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?r:`vec${n}<${r}>`;e.push(`${t}:${s}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},xo=(e,t)=>new ci(e,t),ss=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;s++){let i=r-1-s,o=e[i]||1;(t[t.length-1-s]||1)>1&&o===1&&n.unshift(i)}return n}}),To,pi,vs,Co,Tn,Eo,hi,is=D(()=>{Yt(),Zt(),Er(),nr(),To=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},pi=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,vs=(e,t)=>Je.sortBasedOnPerm(e,pi(e.length,t)),Co=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let i=0;i<t;++i)s.push(r.indicesSet("a",e[i],`i[${i}]`));return s.push("return a;}"),s.join(`
`)},Tn=(e,t)=>{let r=e.dataType,n=e.dims.length,s=pi(n,t),i=vs(e.dims,s),o=Rt("output",r,i.length),d=it("a",r,n),c;if(s.length===2&&s[0]===1&&s[1]===0){let f=o.type.value,w=[16,16,1];c=l=>`
  ${l.registerUniform("output_size","u32").declareVariables(d,o)}
  var<workgroup> tile : array<array<${f}, ${w[0]+1}>, ${w[0]}>;
  ${l.mainStart(w)}
    var x = workgroup_id.x * ${w[0]}u + local_id.x;
    var y = workgroup_id.y * ${w[0]}u + local_id.y;
    let width = uniforms.output_shape[0];
    let height = uniforms.output_shape[1];
    if (x < width && y < height) {
      tile[local_id.y][local_id.x] = ${d.getByOffset("y * width + x")};
    }
    workgroupBarrier();
    x = workgroup_id.y * ${w[0]}u + local_id.x;
    y = workgroup_id.x * ${w[0]}u + local_id.y;
    if (x < height && y < width) {
      ${o.setByOffset("y * height + x","tile[local_id.x][local_id.y]")}
    }
  }`}else c=f=>`
  ${f.registerUniform("output_size","u32").declareVariables(d,o)}

  ${Co(s,n,d,o)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${o.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${o.setByOffset("global_idx",d.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:f=>{let w=Je.size(i);return{outputs:[{dims:i,dataType:f[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:12,data:w},...$t(f[0].dims,i)]}},getShaderSource:c}},Eo=(e,t)=>{To(e.inputs),e.compute(Tn(e.inputs[0],t.perm))},hi=e=>Qt({perm:e.perm})}),So,$o,ko,Po,fi,Ao,Io,mi,Fo,Oo,_n,zo,Do,_i,Bo,Lo,gi,Ro,No,wi,jo,cu=D(()=>{Yt(),Zt(),nr(),Ci(),is(),So={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},$o={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},ko={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Po={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},fi=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},Ao=(e,t)=>{let r=[],n=e.length;for(let i=0;i<n;i++)t.indexOf(i)===-1&&r.push(e[i]);let s=t.map(i=>e[i]);return[r,s]},Io=(e,t)=>{let r=e.length+t.length,n=[],s=0;for(let i=0;i<r;i++)t.indexOf(i)===-1?n.push(e[s++]):n.push(1);return n},mi=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Fo=(e,t)=>{let r=[];if(!mi(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},Oo=(e,t,r,n,s,i,o)=>{let d=r[0].dims,c=Je.size(i),f=Je.size(o),w=it("_A",r[0].dataType,d),l=Rt("output",s,i),b=32,S=`
          var<workgroup> aBestValues : array<f32, ${b}>;
       `;return{name:e,shaderCache:t,getShaderSource:T=>`
        ${T.registerUniform("reduceSize","u32").declareVariables(w,l)}
        ${S}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${T.mainStart(b)}

          let outputIndex = global_idx / ${b};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${ko[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${b}) {
           let candidate = f32(${w.getByOffset("offset + k")});
           bestValue = ${So[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${b}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${$o[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${l.setByOffset("outputIndex",`${n==="mean"?`${l.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${l.type.storage}(${Po[n]})`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:c},programUniforms:[{type:12,data:f}]})}},_n=(e,t,r,n)=>{let s=e.inputs.length===1?r:Vs(e.inputs,r),i=s.axes;i.length===0&&!s.noopWithEmptyAxes&&(i=e.inputs[0].dims.map((S,T)=>T));let o=Je.normalizeAxes(i,e.inputs[0].dims.length),d=o,c=e.inputs[0],f=Fo(d,e.inputs[0].dims.length);f.length>0&&(c=e.compute(Tn(e.inputs[0],f),{inputs:[0],outputs:[-1]})[0],d=fi(d.length,c.dims.length));let[w,l]=Ao(c.dims,d),b=w;s.keepDims&&(b=Io(w,o)),e.compute(Oo(t,{hint:s.cacheKey,inputDependencies:["type"]},[c],n,e.inputs[0].dataType,b,l),{inputs:[c]})},zo=(e,t)=>{_n(e,"ReduceMeanShared",t,"mean")},Do=(e,t)=>{_n(e,"ReduceL1Shared",t,"l1")},_i=(e,t)=>{_n(e,"ReduceL2Shared",t,"l2")},Bo=(e,t)=>{_n(e,"ReduceLogSumExpShared",t,"logSumExp")},Lo=(e,t)=>{_n(e,"ReduceMaxShared",t,"max")},gi=(e,t)=>{_n(e,"ReduceMinShared",t,"min")},Ro=(e,t)=>{_n(e,"ReduceProdShared",t,"prod")},No=(e,t)=>{_n(e,"ReduceSumShared",t,"sum")},wi=(e,t)=>{_n(e,"ReduceSumSquareShared",t,"sumSquare")},jo=(e,t)=>{_n(e,"ReduceLogSumShared",t,"logSum")}}),gn,Vo,js,Vs,bn,Uo,yi,Wo,Go,bi,qo,Ho,Mi,Ko,Xo,wn,Qo,Yo,vi,Zo,Jo,xi,ea,ta,Ti,ra,Ci=D(()=>{Yt(),Zt(),Er(),nr(),cu(),gn=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Vo=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],js=(e,t,r,n,s,i,o=!1,d=!1)=>{let c=[],f=r[0].dims,w=f.length,l=Je.normalizeAxes(s,w),b=!d&&l.length===0;f.forEach((C,H)=>{b||l.indexOf(H)>=0?o&&c.push(1):c.push(C)});let S=c.length,T=Je.size(c);return{name:e,shaderCache:t,getShaderSource:C=>{let H=[],q=it("_A",r[0].dataType,w),O=Rt("output",i,S),ne=n(q,O,l),se=ne[2];for(let fe=0,et=0;fe<w;fe++)b||l.indexOf(fe)>=0?(o&&et++,se=`for(var j${fe}: u32 = 0; j${fe} < ${f[fe]}; j${fe}++) {
                  ${ne[2].includes("last_index")?`let last_index = j${fe};`:""}
                  ${q.indicesSet("input_indices",fe,`j${fe}`)}
                  ${se}
                }`):(H.push(`${q.indicesSet("input_indices",fe,O.indicesGet("output_indices",et))};`),et++);return`

        ${C.registerUniform("output_size","u32").declareVariables(q,O)}

        ${C.mainStart()}
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${q.type.indices};
          let output_indices = ${O.offsetToIndices("global_idx")};

          ${H.join(`
`)}
          ${ne[0]}       // init ops for reduce max/min
          ${ne[1]}
          ${se}
          ${ne[3]}
          ${ne.length===4?O.setByOffset("global_idx","value"):ne.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:c,dataType:i}],dispatchGroup:{x:Math.ceil(T/64)},programUniforms:[{type:12,data:T},...$t(f,c)]})}},Vs=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),Qt({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},bn=(e,t,r,n)=>{let s=e.inputs,i=s.length===1?r:Vs(s,r);e.compute(js(t,{hint:i.cacheKey,inputDependencies:["rank"]},[s[0]],i.noopWithEmptyAxes&&i.axes.length===0?Vo:n,i.axes,s[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},Uo=(e,t)=>{gn(e.inputs),bn(e,"ReduceLogSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},yi=(e,t)=>{gn(e.inputs),bn(e,"ReduceL1",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},Wo=(e,t)=>{gn(e.inputs),bn(e,"ReduceL2",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Go=(e,t)=>{gn(e.inputs),bn(e,"ReduceLogSumExp",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},bi=(e,t)=>{gn(e.inputs),bn(e,"ReduceMax",t,(r,n,s)=>{let i=[];for(let o=0;o<r.rank;o++)(s.indexOf(o)>=0||s.length===0)&&i.push(r.indicesSet("input_indices",o,0));return[`${i.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},qo=(e,t)=>{gn(e.inputs),bn(e,"ReduceMean",t,(r,n,s)=>{let i=1;for(let o=0;o<r.rank;o++)(s.indexOf(o)>=0||s.length===0)&&(i*=e.inputs[0].dims[o]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${i});`]})},Ho=(e,t)=>{gn(e.inputs),bn(e,"ReduceMin",t,(r,n,s)=>{let i=[];for(let o=0;o<r.rank;o++)(s.indexOf(o)>=0||s.length===0)&&i.push(`input_indices[${o}] = 0;`);return[`${i.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},Mi=(e,t)=>{gn(e.inputs),bn(e,"ReduceProd",t,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},Ko=(e,t)=>{gn(e.inputs),bn(e,"ReduceSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},Xo=(e,t)=>{gn(e.inputs),bn(e,"ReduceSumSquare",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},wn=(e,t,r)=>{if(t.length===0)return r;let n=1,s=1;for(let i=0;i<t.length;i++)t.indexOf(i)===-1?n*=e[i]:s*=e[i];return s<32&&n>1024},Qo=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?qo(e,t):zo(e,t)},Yo=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yi(e,t):Do(e,t)},vi=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wo(e,t):_i(e,t)},Zo=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Go(e,t):Bo(e,t)},Jo=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bi(e,t):Lo(e,t)},xi=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ho(e,t):gi(e,t)},ea=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Mi(e,t):Ro(e,t)},ta=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ko(e,t):No(e,t)},Ti=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Xo(e,t):wi(e,t)},ra=(e,t)=>{wn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Uo(e,t):jo(e,t)}}),Us,na,sa,Ws,pu=D(()=>{Yt(),Er(),Ci(),Us=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},na=(e,t)=>{Us(e.inputs);let r=(n,s,i)=>{let o=[];for(let d=0;d<n.rank;d++)(i.indexOf(d)>=0||i.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(js("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},sa=(e,t)=>{Us(e.inputs);let r=(n,s,i)=>{let o=[];for(let d=0;d<n.rank;d++)(i.indexOf(d)>=0||i.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(js("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ws=e=>Qt(e)}),ia,Ei,oa,aa,os,la,ua,Gs=D(()=>{Yt(),z(),nr(),ia=(e,t)=>{let r=e[0],n=e[1],s=e[2],i=e[3],o=e[4],d=e[5];if(o&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let c=r.dims[0],f=r.dims[1],w=r.dims[2];if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==w)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let l=s.dims[0]/3,b=l,S=b;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let ne of t.qkvHiddenSizes)if(ne%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");l=t.qkvHiddenSizes[0],b=t.qkvHiddenSizes[1],S=t.qkvHiddenSizes[2]}let T=f;if(l!==b)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==l+b+S)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let C=0;if(o){if(b!==S)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(o.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(o.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(o.dims[1]!==c)throw new Error('Input "past" second dimension must be batch_size');if(o.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(o.dims[4]!==b/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(C=o.dims[3])}let H=T+C,q=-1,O=0;if(i)throw new Error("Mask not supported");if(o)throw new Error("past is not supported");return{batchSize:c,sequenceLength:f,pastSequenceLength:C,kvSequenceLength:T,totalSequenceLength:H,maxSequenceLength:q,inputHiddenSize:w,hiddenSize:l,vHiddenSize:S,headSize:Math.floor(l/t.numHeads),vHeadSize:Math.floor(S/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:O,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ei=(e,t,r,n)=>{let s=mr(n),i=64,o=n/s;o<i?i=1:o/8<64&&(i=Math.ceil(o/8));let d=Math.ceil(n/s/i),c=[{type:t.dataType,data:1/n},{type:12,data:o},{type:12,data:d}],f=wr(t.dataType,s),w=yr(1,s),l=b=>{let S=Rt("x",t.dataType,t.dims,s),T=[{name:"d_inv",type:yr(t.dataType)},{name:"d_comp",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${i}>;
  var<workgroup> thread_sum: array<f32, ${i}>;
  ${b.registerUniforms(T).declareVariables(S)}
  ${b.mainStart([i,1,1])}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = workgroup_id.x * uniforms.d_comp + local_offset;

    var thread_max_vector = ${w}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      thread_max_vector = max(${w}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(s){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${s}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${i}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${w}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      sum_vector += exp(${w}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(s){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${s}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${i}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        x[offset + i] = ${S.type.value}(uniforms.d_inv);
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        var f32input = ${w}(x[offset + i]);
        x[offset + i] = ${S.type.value}(exp(f32input - max_value) / sum);
      }
    }
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${i};${f};${s}`},getShaderSource:l,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:c})}},oa=(e,t,r,n,s,i,o,d)=>{let c=d+i.kvSequenceLength,f=[i.batchSize,i.numHeads,i.sequenceLength,c],w=i.kvNumHeads===void 0&&e.outputCount>1,l=w?[i.batchSize,i.numHeads,c,i.headSize]:void 0,b=o.scale===0?1/Math.sqrt(i.headSize):o.scale,S=mr(i.headSize),T=i.headSize/S,C=12,H={x:Math.ceil(c/C),y:Math.ceil(i.sequenceLength/C),z:i.batchSize*i.numHeads},q=[{type:12,data:i.sequenceLength},{type:12,data:T},{type:12,data:c},{type:12,data:i.numHeads},{type:1,data:b},{type:12,data:d},{type:12,data:i.kvSequenceLength}],O=["type","type"];n&&O.push("type"),s&&O.push("type");let ne=[{dims:f,dataType:t.dataType,gpuDataType:0}];w&&ne.push({dims:l,dataType:t.dataType,gpuDataType:0});let se=fe=>{let et=it("q",t.dataType,t.dims,S),Ve=it("key",r.dataType,r.dims,S),pt=[et,Ve];if(n){let vr=it("past_key",n.dataType,n.dims,S);pt.push(vr)}s&&pt.push(it("relative_position_bias",s.dataType,s.dims));let Nt=Rt("output",t.dataType,f),At=[Nt];w&&At.push(Rt("present_key",t.dataType,l,S));let hr=yr(1,S),ir=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${C}u;

  var<workgroup> tileQ: array<${et.type.storage}, ${C*C}>;
  var<workgroup> tileK: array<${et.type.storage}, ${C*C}>;
  ${fe.registerUniforms(ir).declareVariables(...pt,...At)}
  ${fe.mainStart([C,C,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    ${n&&w?`
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;
    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;`:`
    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;`}
    ${w?"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;":""}
    var value = ${hr}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${n&&w?`
              if (n + local_id.y < uniforms.past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else {
                tileK[idx] =
                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];
              }`:"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];"}
      ${w?"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];":""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
        value += ${hr}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(S){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${S}`)}})()};
        output[outputIdx] = ${Nt.type.value} (sum * uniforms.alpha) + ${s?"relative_position_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${S};${s!==void 0};${n!==void 0};${e.outputCount}`,inputDependencies:O},getRunData:()=>({outputs:ne,dispatchGroup:H,programUniforms:q}),getShaderSource:se}},aa=(e,t,r,n,s,i)=>{let o=i+s.kvSequenceLength,d=s.nReps?s.nReps:1,c=s.vHiddenSize*d,f=s.kvNumHeads==null&&e.outputCount>1,w=f?[s.batchSize,s.numHeads,o,s.headSize]:void 0,l=[s.batchSize,s.sequenceLength,c],b=12,S={x:Math.ceil(s.vHeadSize/b),y:Math.ceil(s.sequenceLength/b),z:s.batchSize*s.numHeads},T=[{type:12,data:s.sequenceLength},{type:12,data:o},{type:12,data:s.vHeadSize},{type:12,data:s.numHeads},{type:12,data:c},{type:12,data:i},{type:12,data:s.kvSequenceLength}],C=n?["type","type","type"]:["type","type"],H=[{dims:l,dataType:t.dataType,gpuDataType:0}];f&&H.push({dims:w,dataType:t.dataType,gpuDataType:0});let q=O=>{let ne=it("probs",t.dataType,t.dims),se=it("v",r.dataType,r.dims),fe=[ne,se];n&&fe.push(it("past_value",n.dataType,n.dims));let et=[Rt("output",t.dataType,l)];f&&et.push(Rt("present_value",t.dataType,w));let Ve=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${b}u;
  var<workgroup> tileQ: array<${ne.type.value}, ${b*b}>;
  var<workgroup> tileK: array<${ne.type.value}, ${b*b}>;
  ${O.registerUniforms(Ve).declareVariables(...fe,...et)}
  ${O.mainStart([b,b,1])}
   let headIdx = workgroup_id.z;
   let m = global_id.y;
   let n = global_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   ${n&&f?`
    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;
    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;
      `:`
   let offsetB = headIdx * uniforms.N * uniforms.K + n;
            `}
    ${f?"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${ne.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${n&&f?`
        if (w + local_id.y < uniforms.past_sequence_length) {
          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else {
          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];
        }
      `:`
        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];
      `}
        ${f?"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];":""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e.outputCount}`,inputDependencies:C},getRunData:()=>({outputs:H,dispatchGroup:S,programUniforms:T}),getShaderSource:q}},os=(e,t,r,n,s,i,o,d,c,f,w)=>{let l=e.outputCount,b=f.kvNumHeads!==void 0||l>1?f.pastSequenceLength:0,S=b+f.kvSequenceLength,T=f.kvNumHeads===void 0&&l>1&&o?[t,r,o]:[t,r];c&&T.push(c);let C=e.compute(oa(e,t,r,l>1?o:void 0,c,f,w,b),{inputs:T,outputs:f.kvNumHeads===void 0&&l>1?[-1,1]:[-1]})[0];e.compute(Ei(e,C,f.batchSize*f.numHeads*f.sequenceLength,S),{inputs:[C],outputs:[]});let H=f.kvNumHeads===void 0&&l>1&&d?[C,n,d]:[C,n];e.compute(aa(e,C,n,l>1&&d?d:void 0,f,b),{inputs:H,outputs:f.kvNumHeads===void 0&&l>1?[0,2]:[0]})},la=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,s=t.inputHiddenSize,i=t.headSize,o=12,d={x:Math.ceil(t.headSize/o),y:Math.ceil(t.sequenceLength/o),z:t.batchSize*t.numHeads},c=[e.inputs[0],e.inputs[1],e.inputs[2]],f=[{type:12,data:n},{type:12,data:s},{type:12,data:i},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],w=l=>{let b=Rt("output_q",c[0].dataType,r),S=Rt("output_k",c[0].dataType,r),T=Rt("output_v",c[0].dataType,r),C=it("input",c[0].dataType,c[0].dims),H=it("weight",c[1].dataType,c[1].dims),q=it("bias",c[2].dataType,c[2].dims),O=C.type.storage,ne=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${o}u;
  var<workgroup> tileInput: array<${O}, ${o*o}>;
  var<workgroup> tileWeightQ: array<${O}, ${o*o}>;
  var<workgroup> tileWeightK: array<${O}, ${o*o}>;
  var<workgroup> tileWeightV: array<${O}, ${o*o}>;
  ${l.registerUniforms(ne).declareVariables(C,H,q,b,S,T)}
  ${l.mainStart([o,o,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${O}(0);
    var valueK = ${O}(0);
    var valueV = ${O}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:f}),getShaderSource:w},{inputs:c,outputs:[-1,-1,-1]})},ua=(e,t)=>{let r=ia(e.inputs,t),[n,s,i]=la(e,r);return os(e,n,s,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}}),da,ca,pa,ha,fa=D(()=>{$(),Yt(),Zt(),Er(),nr(),da=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,s,i)=>{let o=s.length;if(o!==n.length)throw new Error(`${i}: num dimensions != ${o}`);s.forEach((d,c)=>{if(d!==n[c])throw new Error(`${i}: dim[${c}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},ca=(e,t)=>{let{epsilon:r,spatial:n,format:s}=t,i=e[0].dims,o=n?mr(i[i.length-1]):1,d=s==="NHWC"&&i.length>1?o:1,c=Je.size(i)/o,f=n,w=f?i.length:i,l=it("x",e[0].dataType,e[0].dims,o),b=it("scale",e[1].dataType,e[1].dims,d),S=it("bias",e[2].dataType,e[2].dims,d),T=it("inputMean",e[3].dataType,e[3].dims,d),C=it("inputVar",e[4].dataType,e[4].dims,d),H=Rt("y",e[0].dataType,w,o),q=()=>{let ne="";if(n)ne=`let cOffset = ${i.length===1?"0u":s==="NHWC"?`outputIndices[${i.length-1}] / ${o}`:"outputIndices[1]"};`;else if(s==="NCHW")ne=`
            ${H.indicesSet("outputIndices","0","0")}
            let cOffset = ${H.indicesToOffset("outputIndices")};`;else{ne=`var cIndices = ${b.type.indices}(0);
                       cIndices[0] = outputIndices[${i.length-1}];`;for(let se=1;se<b.rank;se++)ne+=`cIndices[${se}] = outputIndices[${se}];`;ne+=`let cOffset = ${b.indicesToOffset("cIndices")};`}return ne},O=ne=>`
  const epsilon = ${r};
  ${ne.registerUniform("outputSize","u32").declareVariables(l,b,S,T,C,H)}
  ${ne.mainStart()}
  ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${H.offsetToIndices(`global_idx * ${o}`)};
    ${q()}
    let scale = ${b.getByOffset("cOffset")};
    let bias = ${S.getByOffset("cOffset")};
    let inputMean = ${T.getByOffset("cOffset")};
    let inputVar = ${C.getByOffset("cOffset")};
    let x = ${l.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${H.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${o}`,inputDependencies:f?["rank","type","type","type","type"]:void 0},getShaderSource:O,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:f?[{type:12,data:c},...$t(i)]:[{type:12,data:c}]})}},pa=e=>Qt(e),ha=(e,t)=>{let{inputs:r,outputCount:n}=e,s=pa({...t,outputCount:n});if(k.webgpu.validateInputContent&&da(r,s),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(ca(r,s))}}),ma,_a,Si,hu=D(()=>{Zt(),nr(),ma=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},_a=e=>{let t=e[0].dims,r=e[0].dims[2],n=Je.size(t)/4,s=e[0].dataType,i=it("input",s,t,4),o=it("bias",s,[r],4),d=it("residual",s,t,4),c=Rt("output",s,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:f=>`
  const channels = ${r}u / 4;
  ${f.declareVariables(i,o,d,c)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${i.getByOffset("global_idx")}
      + ${o.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${c.setByOffset("global_idx","value")}
  }`}},Si=e=>{ma(e.inputs),e.compute(_a(e.inputs))}}),ga,_r,wa,ya,$i,ba,Ma,ki,va,xa,qs,Ta,Ca,Ea,Pi,Sa,as,$a,Hs,ka,Ai,Pa,Aa,Ia,Ii,Fa,Oa,Fi,za,Da,Oi,Ba,La,zi,Ra,Di,Bi,Li,Ri,Na,ja,Ni,Va,Ua,Wa,ji=D(()=>{Yt(),Zt(),Er(),nr(),ga=(e,t,r,n,s,i)=>{let o=Math.ceil(t/4),d="";typeof s=="string"?d=`${s}(a)`:d=s("a");let c=it("inputData",r,[o],4),f=Rt("outputData",n,[o],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(c,f)}

  ${i??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${c.getByOffset("global_idx")};
    ${f.setByOffset("global_idx",d)}
  }`},_r=(e,t,r,n,s,i=e.dataType)=>({name:t,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:o=>ga(o,Je.size(e.dims),e.dataType,i,r,n),getRunData:o=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(Je.size(o[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(Je.size(e.dims)/4)}]})}),wa=e=>{e.compute(_r(e.inputs[0],"Abs","abs"))},ya=e=>{e.compute(_r(e.inputs[0],"Acos","acos"))},$i=e=>{e.compute(_r(e.inputs[0],"Acosh","acosh"))},ba=e=>{e.compute(_r(e.inputs[0],"Asin","asin"))},Ma=e=>{e.compute(_r(e.inputs[0],"Asinh","asinh"))},ki=e=>{e.compute(_r(e.inputs[0],"Atan","atan"))},va=e=>{e.compute(_r(e.inputs[0],"Atanh","atanh"))},xa=e=>Qt(e),qs=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(_r(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Ta=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Xr,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:sn;return Qt({min:t,max:r})},Ca=(e,t)=>{let r=e.inputs.length===1?t:Ta(e.inputs),n=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"Clip",s=>`clamp(${s}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${n}> = vec4(${n}(${r.min}));
    const clip_max_: vec4<${n}> = vec4(${n}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Ea=e=>{e.compute(_r(e.inputs[0],"Ceil","ceil"))},Pi=e=>{e.compute(_r(e.inputs[0],"Cos","cos"))},Sa=e=>{e.compute(_r(e.inputs[0],"Cosh","cosh"))},as=e=>Qt(e),$a=(e,t)=>{let r=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},Hs=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,ka=e=>{let t=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Hs(t)))},Ai=e=>{e.compute(_r(e.inputs[0],"Exp","exp"))},Pa=e=>{e.compute(_r(e.inputs[0],"Floor","floor"))},Aa=e=>{let t=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Hs(t)))},Ia=(e,t)=>{let r=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Ii=e=>{e.compute(_r(e.inputs[0],"Not",t=>`!${t}`))},Fa=e=>{e.compute(_r(e.inputs[0],"Neg",t=>`-${t}`))},Oa=e=>{e.compute(_r(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Fi=e=>{let t=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},za=e=>{e.compute(_r(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},Da=e=>Qt(e),Oi=(e,t)=>{let r=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},Ba=e=>{e.compute(_r(e.inputs[0],"Sin","sin"))},La=e=>{e.compute(_r(e.inputs[0],"Sinh","sinh"))},zi=e=>{e.compute(_r(e.inputs[0],"Sqrt","sqrt"))},Ra=e=>{e.compute(_r(e.inputs[0],"Tan","tan"))},Di=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Bi=e=>{e.compute(_r(e.inputs[0],"Tanh",Di))},Li=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Di("v")};
}
`,Ri=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Na=e=>{let t=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"FastGelu",Ri,Li(t),void 0,e.inputs[0].dataType))},ja=(e,t)=>{let r=yr(e.inputs[0].dataType);return e.compute(_r(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Ni=e=>{e.compute(_r(e.inputs[0],"Log","log"))},Va=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,Ua=e=>`quick_gelu_impl(${e})`,Wa=(e,t)=>{let r=yr(e.inputs[0].dataType);e.compute(_r(e.inputs[0],"QuickGelu",Ua,Va(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),Vi,Ga,qa,Ha=D(()=>{Zt(),nr(),ji(),Vi=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ga=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=it("input",e[0].dataType,e[0].dims,4),n=it("bias",e[0].dataType,[e[0].dims[2]],4),s=Rt("output",e[0].dataType,t,4),i=Je.size(t)/4,o=wr(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:d=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${d.declareVariables(r,n,s)}

  ${Hs(o)}

  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${s.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},qa=e=>{Vi(e.inputs),e.compute(Ga(e.inputs))}}),Ka,Xa,yn,Qa,Ya,Ui,Za,Ja,el,tl,rl,nl,Wi,fu=D(()=>{Yt(),Zt(),nr(),Ka=(e,t,r,n,s,i,o,d,c,f,w,l)=>{let b,S;typeof d=="string"?b=S=(O,ne)=>`${d}((${O}),(${ne}))`:typeof d=="function"?b=S=d:(b=d.scalar,S=d.vector);let T=Rt("outputData",w,n.length,4),C=it("aData",c,t.length,4),H=it("bData",f,r.length,4),q;if(s)if(i){let O=Je.size(t)===1,ne=Je.size(r)===1,se=t.length>0&&t[t.length-1]%4===0,fe=r.length>0&&r[r.length-1]%4===0;O||ne?q=T.setByOffset("global_idx",S(O?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"),ne?`${H.type.value}(${H.getByOffset("0")}.x)`:H.getByOffset("global_idx"))):q=`
            let outputIndices = ${T.offsetToIndices("global_idx * 4u")};
            let offsetA = ${C.broadcastedIndicesToOffset("outputIndices",T)};
            let offsetB = ${H.broadcastedIndicesToOffset("outputIndices",T)};
            ${T.setByOffset("global_idx",S(o||se?C.getByOffset("offsetA / 4u"):`${C.type.value}(${C.getByOffset("offsetA / 4u")}[offsetA % 4u])`,o||fe?H.getByOffset("offsetB / 4u"):`${H.type.value}(${H.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else q=T.setByOffset("global_idx",S(C.getByOffset("global_idx"),H.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let O=(ne,se,fe="")=>{let et=`aData[indexA${se}][componentA${se}]`,Ve=`bData[indexB${se}][componentB${se}]`;return`
            let outputIndices${se} = ${T.offsetToIndices(`global_idx * 4u + ${se}u`)};
            let offsetA${se} = ${C.broadcastedIndicesToOffset(`outputIndices${se}`,T)};
            let offsetB${se} = ${H.broadcastedIndicesToOffset(`outputIndices${se}`,T)};
            let indexA${se} = offsetA${se} / 4u;
            let indexB${se} = offsetB${se} / 4u;
            let componentA${se} = offsetA${se} % 4u;
            let componentB${se} = offsetB${se} % 4u;
            ${ne}[${se}] = ${fe}(${b(et,Ve)});
          `};w===9?q=`
            var data = vec4<u32>(0);
            ${O("data",0,"u32")}
            ${O("data",1,"u32")}
            ${O("data",2,"u32")}
            ${O("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:q=`
            ${O("outputData[global_idx]",0)}
            ${O("outputData[global_idx]",1)}
            ${O("outputData[global_idx]",2)}
            ${O("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(C,H,T)}

        ${l??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${q}
      }`},Xa=(e,t,r,n,s,i,o=r.dataType)=>{let d=!Je.areEqual(r.dims,n.dims),c=r.dims,f=Je.size(r.dims),w=!1,l=!1,b=[d];if(d){let S=zr.calcShape(r.dims,n.dims,!1);if(!S)throw new Error("Can't perform binary op on the given tensors");c=S,f=Je.size(c);let T=Je.size(r.dims)===1,C=Je.size(n.dims)===1,H=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,q=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;b.push(T),b.push(C),b.push(H),b.push(q);let O=1;for(let ne=1;ne<c.length;ne++){let se=r.dims[r.dims.length-ne]??1,fe=n.dims[n.dims.length-ne]??1;if(se===fe)O*=se;else break}O%4===0?(l=!0,w=!0):(T||C||H||q)&&(w=!0)}else w=!0;return b.push(w),{name:e,shaderCache:{hint:t+b.map(S=>S.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:S=>Ka(S,r.dims,n.dims,c,w,d,l,s,r.dataType,n.dataType,o,i),getRunData:()=>({outputs:[{dims:c,dataType:o}],dispatchGroup:{x:Math.ceil(f/64/4)},programUniforms:[{type:12,data:Math.ceil(Je.size(c)/4)},...$t(r.dims,n.dims,c)]})}},yn=(e,t,r,n,s,i)=>{e.compute(Xa(t,s??"",e.inputs[0],e.inputs[1],r,n,i))},Qa=e=>{yn(e,"Add",(t,r)=>`${t}+${r}`)},Ya=e=>{yn(e,"Div",(t,r)=>`${t}/${r}`)},Ui=e=>{yn(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Za=e=>{yn(e,"Mul",(t,r)=>`${t}*${r}`)},Ja=e=>{let t=it("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;yn(e,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},el=e=>{yn(e,"Sub",(t,r)=>`${t}-${r}`)},tl=e=>{yn(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},rl=e=>{yn(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},nl=e=>{yn(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Wi=e=>{yn(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}}),sl,Gi,il,ol,Ln,al,mu=D(()=>{Yt(),Zt(),Er(),nr(),sl=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],s=n.dataType,i=n.dims.length;e.forEach((o,d)=>{if(d!==r){if(o.dataType!==s)throw new Error("input tensors should be one type");if(o.dims.length!==i)throw new Error("input tensors should have the same shape");o.dims.forEach((c,f)=>{if(f!==t&&c!==n.dims[f])throw new Error("non concat dimensions must match")})}})},Gi=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,il=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;++s){let i=t.setByOffset("global_idx",e[s].getByIndices("indices"));r===1?n.push(i):s===0?n.push(`if (inputIndex == ${s}u) { ${i} }`):s===r-1?n.push(`else { ${i} }`):n.push(`else if (inputIndex == ${s}) { ${i} }`)}return n.join(`
`)},ol=(e,t,r,n)=>{let s=Je.size(r),i=new Array(e.length),o=new Array(e.length),d=0,c=[],f=[],w=[{type:12,data:s}];for(let C=0;C<e.length;++C)d+=e[C].dims[t],i[C]=d,f.push(e[C].dims.length),o[C]=it(`input${C}`,n,f[C]),c.push("rank"),w.push({type:12,data:i[C]});for(let C=0;C<e.length;++C)w.push(...$t(e[C].dims));w.push(...$t(r));let l=Rt("output",n,r.length),b=l.indicesGet("indices",t),S=Array.from(Array(i.length).keys()).map(C=>`uniforms.sizeInConcatAxis${C}`).join(","),T=C=>`

  ${(()=>{C.registerUniform("outputSize","u32");for(let H=0;H<e.length;H++)C.registerUniform(`sizeInConcatAxis${H}`,"u32");return C.declareVariables(...o,l)})()}

  ${Gi(i.length,S)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${l.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${b});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${i.length}u>(${S});
      ${b} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${il(o,l)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:T}},Ln=(e,t)=>{let r=e.inputs,n=r[0].dims,s=Je.normalizeAxis(t.axis,n.length);sl(r,s);let i=n.slice();i[s]=r.reduce((d,c)=>d+(c.dims.length>s?c.dims[s]:0),0);let o=r.filter(d=>Je.size(d.dims)>0);e.compute(ol(o,s,i,r[0].dataType),{inputs:o})},al=e=>Qt({axis:e.axis})}),Rn,Nn,Pn,qi,jn=D(()=>{Yt(),Zt(),Rn=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Nn=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Pn=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},qi=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,n]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=e?.activation_params||[Xr,sn];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}}),en,Hi,ls=D(()=>{en=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Hi=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),Ki,ll=D(()=>{Ki=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),ul,xs,Ks,Xi,dl,Xs,Qs,Qi,Ys=D(()=>{Yt(),Zt(),nr(),jn(),ls(),ul=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,xs=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ks=(e,t,r="f32",n,s=!1,i=32,o=!1,d=32)=>{let c=t[1]*e[1],f=t[0]*e[0],w=s?c:i,l=s?i:c,b=w/t[0],S=i/t[1];if(!((s&&b===4&&e[1]===4||!s&&(b===3||b===4))&&w%t[0]===0&&i%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${s} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${b} must be 3 or 4.
  tileAWidth ${w} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${w/b}>, ${l}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${f/e[0]}>, ${i}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${b};
const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${o?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${c};

  let num_tiles = ${o?`${Math.ceil(d/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${o?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${S};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${ul(s,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${xs(s,b)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Xi=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,dl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Xs=(e,t,r="f32",n,s=!1,i=32,o=!1,d=32,c=!1)=>{let f=e[1]*t[1],w=e[0]*t[0],l=s?f:i,b=s?i:f;if(!(b%t[1]===0&&l%t[0]===0&&i%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);let S=b/t[1],T=l/t[0],C=i/t[1],H=c?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${f};
    let globalColStart = i32(workgroupId.x) * ${w};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {
          ${Xi(s,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${w}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${f};

let tileRowA = i32(localId.y) * ${S};
let tileColA = i32(localId.x) * ${T};
let tileRowB = i32(localId.y) * ${C};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${T}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Xi(s,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${C}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${dl(s)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${l}>, ${b}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${w}>, ${i}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${o?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${o?`${Math.ceil(d/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${o?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;
    ${H}
  }
`},Qs=(e,t,r,n,s,i=!1)=>{let[o,d,c]=s,[f,w,l,b]=n,S=ss(o,c),T=ss(d,c),C=wr(n[0].type.tensor),H=()=>{let O=w.rank,ne=f.rank,se=`var aIndices: ${w.type.indices};`;for(let fe=O-2-1,et=ne-1;fe>=0;fe--,et--)se+=`
aIndices[${fe}] = ${ne>1?`batchIndices[${et}]`:"batchIndices"};`;return S.forEach(fe=>{se+=`
aIndices[${fe}] = 0;`}),se+=`
aIndices[${O-2}] = u32(row);
                   aIndices[${O-1}] = u32(colIn);`,se},q=()=>{let O=l.rank,ne=f.rank,se=`var bIndices: ${l.type.indices};`;for(let fe=O-2-1,et=ne-1;fe>=0;fe--,et--)se+=`
bIndices[${fe}] = ${ne>1?`batchIndices[${et}]`:"batchIndices"};`;return T.forEach(fe=>{se+=`
bIndices[${fe}] = 0;`}),se+=`
bIndices[${O-2}] = u32(row);
                   bIndices[${O-1}] = u32(colIn);`,se};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${f.type.indices}) -> ${en(e,C)} {
      var value = ${en(e,C)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${H()}
        value = ${w.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${f.type.indices}) -> ${en(e,C)} {
      var value = ${en(e,C)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${q()}
        value = ${l.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${en(e,C)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${i?"bias[colIn]":`${en(e,C)}(bias[row])`};`:""}
        ${r}
        ${b.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},Qi=(e,t,r,n,s=!1)=>{let i=e[0].dims,o=e[1].dims,d=i.slice(0,-2),c=o.slice(0,-2),f=n?n.slice(0,-2):r.slice(0,-2),w=Je.size(f),l=i[i.length-2],b=i[i.length-1],S=o[o.length-1],T=b%4===0&&S%4===0,C=l<=8?[4,1,1]:[4,4,1],H=[8,8,1],q=[Math.ceil(S/H[0]/C[0]),Math.ceil(l/H[1]/C[1]),Math.ceil(w/H[2]/C[2])],O=T?4:1,ne=[...d,l,b/O],se=ne.length,fe=[...c,b,S/O],et=fe.length,Ve=[w,l,S/O],pt=[{type:6,data:l},{type:6,data:S},{type:6,data:b}];Nn(t,pt),pt.push(...$t(f,ne,fe));let Nt=["rank","rank"],At=e.length>2;At&&(pt.push(...$t(e[2].dims)),Nt.push("rank")),pt.push(...$t(Ve));let hr=ir=>{let vr=f.length,Mr=di("batchDims",e[0].dataType,vr,1),dr=wr(e[0].dataType),Wt=it("a",e[0].dataType,se,O),Pr=it("b",e[1].dataType,et,O),lr=Rt("result",e[0].dataType,Ve.length,O),Vt=[Wt,Pr];if(At){let Hr=s?O:1;Vt.push(it("bias",e[2].dataType,e[2].dims.length,Hr))}let or=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Pn(t,or);let Ue=wr(lr.type.tensor),Lt=Rn(t,lr.type.value,Ue),ar=Qs(O,At,Lt,[Mr,Wt,Pr,lr],[d,c,f],s);return`
  ${ir.registerUniforms(or).registerInternalVariables(Mr).declareVariables(...Vt,lr)}
  ${ar}
  ${T?Ks(C,H,dr,Mr):Xs(C,H,dr,Mr)}
                   `};return{name:"MatMul",shaderCache:{hint:`${C};${t.activation};${T};${s}`,inputDependencies:Nt},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:q[0],y:q[1],z:q[2]},programUniforms:pt}),getShaderSource:hr}}}),cl,_u,gu=D(()=>{Yt(),fn(),nr(),jn(),ls(),ll(),Ys(),cl=(e,t,r,n,s=!1,i,o=4,d=4,c=4,f="f32")=>{let w=Nt=>{switch(Nt){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${f}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Nt} is not supported.`)}},l=Nt=>{switch(Nt){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Nt} is not supported.`)}},b=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,S=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,T=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",C=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",H=e?"row":"col",q=e?"col":"row",O=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${H} / outWidth;
    let outCol = ${H} % outWidth;

    let WRow = ${q} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${q} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${q} % inChannels;
    var resData = ${en(o,f)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${T} && xCol >= 0 && xCol < ${C}) {
      ${b}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${w(o)}
    }
    return resData;`,ne=e?t&&n?`
    let col = colIn * ${o};
    ${O}`:`
    let col = colIn * ${o};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${O}
    }
    return ${en(o,f)}(0.0);`:n&&r?`
    let col = colIn * ${o};
    ${O}`:`
    let col = colIn * ${o};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${O}
    }
    return ${en(o,f)}(0.0);`,se=`${l(d)}`,fe=en(c,f),et=en(e?o:d,f),Ve=en(e?d:o,f),pt=Rn(i,fe,f);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${et} {
      ${e?ne:se}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Ve} {
      ${e?se:ne}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${fe}) {
      let col = colIn * ${c};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${S}
      ${Hi(s)}
      ${pt}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},_u=(e,t,r,n,s,i,o,d)=>{let c=t.format==="NHWC",f=c?e[0].dims[3]:e[0].dims[1],w=r[0],l=c?r[2]:r[3],b=c?r[1]:r[2],S=c?r[3]:r[1],T=c&&(f%4===0||f%3===0)&&S%4===0,C=c?S:l*b,H=c?l*b:S,q=[8,8,1],O=n<=8?[4,1,1]:[4,4,1],ne=[Math.ceil(C/q[0]/O[0]),Math.ceil(H/q[1]/O[1]),Math.ceil(w/q[2]/O[2])];Dr("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${ne}`);let se=T?c&&f%4!==0?3:4:1,fe=q[1]*O[1],et=q[0]*O[0],Ve=Math.max(q[0]*se,q[1]),pt=n%fe===0,Nt=s%et===0,At=i%Ve===0,hr=T?[se,4,4]:[1,1,1],ir=[{type:6,data:n},{type:6,data:s},{type:6,data:i},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Nn(t,ir),ir.push(...$t(e[0].dims,e[1].dims));let vr=["rank","rank"];o&&(ir.push(...$t(e[2].dims)),vr.push("rank")),ir.push(...$t(r));let Mr=dr=>{let Wt=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Pn(t,Wt);let Pr=T?4:1,lr=wr(e[0].dataType),Vt=`
      fn setOutputAtIndex(flatIndex : i32, value : ${T?`vec4<${lr}>`:lr}) {
        result[flatIndex] = ${T?`vec4<${lr}>`:lr}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${T?`vec4<${lr}>`:lr}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${T?"/ 4":""}, value);
      }`,or=it("x",e[0].dataType,e[0].dims.length,se===3?1:se),Ue=it("w",e[1].dataType,e[1].dims.length,Pr),Lt=[or,Ue],ar=Rt("result",e[0].dataType,r.length,Pr);if(o){let Hr=it("bias",e[2].dataType,e[2].dims.length,Pr);Lt.push(Hr),Vt+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${T?`vec4<${lr}>`:lr} {
          return bias[coords.${c?"w":"y"}${T?"/ 4":""}];
        }`}return`
        ${Ki("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${dr.registerUniforms(Wt).declareVariables(...Lt,ar)}
        ${Vt}
        ${cl(c,pt,Nt,At,o,t,hr[0],hr[1],hr[2],lr)}
        ${T?Ks(O,q,lr,void 0,!c,Ve):Xs(O,q,lr,void 0,!c,Ve,!1,void 0,d)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${se};${T};${pt};${Nt};${At};${fe};${et};${Ve}`,inputDependencies:vr},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:ne[0],y:ne[1],z:ne[2]},programUniforms:ir}),getShaderSource:Mr}}}),pl,Yi,An,hl,Zi,fl,ml,_l,Ji=D(()=>{Yt(),fn(),Zt(),nr(),jn(),ls(),pl=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},Yi=e=>typeof e=="number"?[e,e,e]:e,An=(e,t)=>t<=1?e:e+(e-1)*(t-1),hl=(e,t,r,n=1)=>{let s=An(t,n);return Math.floor((e[0]*(r-1)-r+s)/2)},Zi=(e,t,r,n,s)=>{s==null&&(s=hl(e,t[0],n[0]));let i=[0,0,0,r];for(let o=0;o<3;o++)e[o]+2*s>=t[o]&&(i[o]=Math.trunc((e[o]-t[o]+2*s)/n[o]+1));return i},fl=(e,t,r,n,s,i,o,d,c,f)=>{let w,l,b,S;if(e==="VALID"&&(e=0),typeof e=="number"){w={top:e,bottom:e,left:e,right:e,front:e,back:e};let T=Zi([t,r,n,1],[d,c,f],1,[s,i,o],e);l=T[0],b=T[1],S=T[2]}else if(Array.isArray(e)){if(!e.every((C,H,q)=>C===q[0]))throw Error(`Unsupported padding parameter: ${e}`);w={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let T=Zi([t,r,n,1],[d,c,f],1,[s,i,o],e[0]);l=T[0],b=T[1],S=T[2]}else if(e==="SAME_UPPER"){l=Math.ceil(t/s),b=Math.ceil(r/i),S=Math.ceil(n/o);let T=(l-1)*s+d-t,C=(b-1)*i+c-r,H=(S-1)*o+f-n,q=Math.floor(T/2),O=T-q,ne=Math.floor(C/2),se=C-ne,fe=Math.floor(H/2),et=H-fe;w={top:ne,bottom:se,left:fe,right:et,front:q,back:O}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:w,outDepth:l,outHeight:b,outWidth:S}},ml=(e,t,r,n,s,i=!1,o="channelsLast")=>{let d,c,f,w,l;if(o==="channelsLast")[d,c,f,w,l]=e;else if(o==="channelsFirst")[d,l,c,f,w]=e;else throw new Error(`Unknown dataFormat ${o}`);let[b,,S,T,C]=t,[H,q,O]=Yi(r),[ne,se,fe]=Yi(n),et=An(S,ne),Ve=An(T,se),pt=An(C,fe),{padInfo:Nt,outDepth:At,outHeight:hr,outWidth:ir}=fl(s,c,f,w,H,q,O,et,Ve,pt),vr=i?b*l:b,Mr=[0,0,0,0,0];return o==="channelsFirst"?Mr=[d,vr,At,hr,ir]:o==="channelsLast"&&(Mr=[d,At,hr,ir,vr]),{batchSize:d,dataFormat:o,inDepth:c,inHeight:f,inWidth:w,inChannels:l,outDepth:At,outHeight:hr,outWidth:ir,outChannels:vr,padInfo:Nt,strideDepth:H,strideHeight:q,strideWidth:O,filterDepth:S,filterHeight:T,filterWidth:C,effectiveFilterDepth:et,effectiveFilterHeight:Ve,effectiveFilterWidth:pt,dilationDepth:ne,dilationHeight:se,dilationWidth:fe,inShape:e,outShape:Mr,filterShape:t}},_l=(e,t,r,n,s,i)=>{let o=i==="channelsLast";o?e[0].dims[3]:e[0].dims[1];let d=[64,1,1],c={x:r.map((H,q)=>q)},f=[Math.ceil(pl(c.x.map(H=>r[H]))/d[0]),1,1];Dr("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${f}`);let w=1,l=Je.size(r),b=[{type:12,data:l},{type:12,data:n},{type:12,data:s},{type:12,data:t.strides},{type:12,data:t.dilations}];Nn(t,b),b.push(...$t(e[0].dims,e[1].dims));let S=["rank","rank"],T=e.length===3;T&&(b.push(...$t(e[2].dims)),S.push("rank")),b.push(...$t(r));let C=H=>{let q=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:s.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];Pn(t,q);let O=1,ne=wr(e[0].dataType),se=it("x",e[0].dataType,e[0].dims.length,w),fe=it("W",e[1].dataType,e[1].dims.length,O),et=[se,fe],Ve=Rt("result",e[0].dataType,r.length,O),pt="";if(T){let hr=it("bias",e[2].dataType,e[2].dims.length,O);et.push(hr),pt+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${ne} {
          return bias[${o?It("coords",4,5):It("coords",1,5)}];
        }`}let Nt=en(w,ne),At=Rn(t,Nt,ne);return`
            ${pt}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${se.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${fe.getByIndices("aIndices")};
            }
          ${H.registerUniforms(q).declareVariables(...et,Ve)}
          ${H.mainStart()}
          ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${Ve.offsetToIndices("global_idx")};
              let batch = ${It("coords",0,se.rank)};
              let d2 = ${o?It("coords",se.rank-1,se.rank):It("coords",1,se.rank)};
              let xFRCCorner = vec3<u32>(${o?It("coords",1,se.rank):It("coords",2,se.rank)},
              ${o?It("coords",2,se.rank):It("coords",3,se.rank)},
              ${o?It("coords",3,se.rank):It("coords",4,se.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${o?It("uniforms.x_shape",1,se.rank):It("uniforms.x_shape",2,se.rank)};
              let xShapeZ = ${o?It("uniforms.x_shape",2,se.rank):It("uniforms.x_shape",3,se.rank)};
              let xShapeW = ${o?It("uniforms.x_shape",3,se.rank):It("uniforms.x_shape",4,se.rank)};
              let xShapeU = ${o?It("uniforms.x_shape",4,se.rank):It("uniforms.x_shape",1,se.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${o?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${o?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${o?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${o?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${T?"value = value + getBiasByOutputCoords(coords)":""};
              ${At}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${o};${w};${T}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:f[0],y:f[1],z:f[2]},programUniforms:b}),getShaderSource:C}}}),gl,wl,wu=D(()=>{Yt(),Zt(),nr(),xl(),jn(),gl=(e,t,r)=>{let n=e.length>2,s=n?"value += b[output_channel];":"",i=e[0].dims,o=e[1].dims,d=o[0]/t.group,c=t.format==="NHWC",f=Zs(i,o,t.dilations,t.pads,t.strides,c),w=Je.size(f),l=[{type:12,data:w},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];Nn(t,l),l.push(...$t(i,o));let b=["rank","rank"];n&&(l.push(...$t(e[2].dims)),b.push("rank")),l.push(...$t(f));let S=T=>{let C=Rt("output",e[0].dataType,f.length),H=wr(C.type.tensor),q=Rn(t,C.type.value,H),O=it("x",e[0].dataType,i.length),ne=it("w",e[1].dataType,o.length),se=[O,ne];n&&se.push(it("b",e[2].dataType,e[2].dims.length));let fe=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return Pn(t,fe),`
  ${T.registerUniforms(fe).declareVariables(...se,C)}

  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${C.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${c?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${c?1:2}], outputIndices[${c?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel / uniforms.output_channels_per_group;

    var value: ${C.type.value} = ${C.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[${c?1:2}]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[${c?2:3}]) {
            continue;
          }

          let xVal = ${c?O.get("batch","xHeight","xWidth","input_channel"):O.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${ne.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${s}
    ${q}
    ${C.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:b},getRunData:()=>({outputs:[{dims:r?r(f):f,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:l}),getShaderSource:S}},wl=(e,t,r)=>{let n=e.length>2,s=mr(r[3]),i=mr(r[2]),o=Je.size(r)/s/i,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],c=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],f=[r[0],r[1],r[2],r[3]/s],w=[{type:12,data:o},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Nn(t,w),w.push(...$t(d,c,f));let l=(i-1)*t.strides[1]+c[1],b=S=>{let T=Rt("output",e[0].dataType,f.length,s),C=wr(T.type.tensor),H=Rn(t,T.type.value,C),q=it("x",e[0].dataType,d.length,s),O=it("w",e[1].dataType,c.length,s),ne=[q,O];n&&ne.push(it("b",e[2].dataType,e[2].dims,s));let se=n?"value += b[output_channel];":"",fe=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Pn(t,fe),`
  ${S.registerUniforms(fe).declareVariables(...ne,T)}
  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${i}u;
    let col = (index1 % width1) * ${i}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${q.type.value}, ${l}>;
    var values: array<${T.type.value}, ${i}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${c[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${l}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${q.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${q.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${c[1]}; w_width++) {
          let w_val = ${O.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${i}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${i}u; i++) {
      var value = values[i];
      ${se}
      ${H}
      ${T.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${s};${i};${l};${c[0]};${c[1]}`,inputDependencies:n?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:w}),getShaderSource:b}}}),eo,yl,bl,to=D(()=>{Yt(),Zt(),Ys(),nr(),jn(),eo=(e,t,r,n,s=!1)=>{let i=e[0].dims,o=e[1].dims,d=i[i.length-2],c=o[o.length-1],f=i[i.length-1],w=mr(c),l=mr(f),b=mr(d),S=Je.size(r)/w/b,T=e.length>2,C=n?n.slice(0,-2):r.slice(0,-2),H=[Je.size(C),d,c],q=[{type:12,data:S},{type:12,data:d},{type:12,data:c},{type:12,data:f}];Nn(t,q),q.push(...$t(C,i,o)),T&&q.push(...$t(e[2].dims)),q.push(...$t(H));let O=ne=>{let se=di("batch_dims",e[0].dataType,C.length),fe=it("a",e[0].dataType,i.length,l),et=it("b",e[1].dataType,o.length,w),Ve=Rt("output",e[0].dataType,H.length,w),pt=wr(Ve.type.tensor),Nt=Rn(t,Ve.type.value,pt),At=[fe,et],hr="";if(T){let Vt=s?w:1;At.push(it("bias",e[2].dataType,e[2].dims.length,Vt)),hr=`${s?`value += bias[col / ${Vt}];`:`value += ${Ve.type.value}(bias[row + i]);`}`}let ir=i.slice(0,-2),vr=o.slice(0,-2),Mr=ss(ir,C),dr=ss(vr,C),Wt=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Pn(t,Wt);let Pr=(Vt,or)=>{let Ue=Vt.rank,Lt=Vt.name;if(Ue===2)return`var ${Lt}_indices = ${Vt.type.indices}(0u, 0u);`;let ar=se.rank,Hr=`var ${Lt}_indices: ${Vt.type.indices};`;for(let Lr=Ue-2-1,Fn=ar-1;Lr>=0;Lr--,Fn--)Hr+=`
${Lt}_indices[${Lr}] = ${ar>1?`batch_indices[${Fn}]`:"batch_indices"};`;return or.forEach(Lr=>{Hr+=`
${Lt}_indices[${Lr}] = 0;`}),Hr+=`${Lt}_indices[${Ue-2}] = 0u;
                     ${Lt}_indices[${Ue-1}] = 0u;`,Hr},lr=()=>{let Vt=`var a_data: ${fe.type.value};`;for(let or=0;or<l;or++)Vt+=`
              let b_data${or} = b[(b_offset + (k + ${or}) * uniforms.N + col) / ${w}];`;for(let or=0;or<b;or++){Vt+=`a_data = a[(a_offset + (row + ${or}) * uniforms.K + k) / ${l}];`;for(let Ue=0;Ue<l;Ue++)Vt+=`
            values[${or}] = fma(${et.type.value}(a_data${l===1?"":`[${Ue}]`}), b_data${Ue}, values[${or}]);
`}return Vt};return`
  ${ne.registerUniforms(Wt).registerInternalVariables(se).declareVariables(...At,Ve)}
  ${ne.mainStart()}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${w})) * ${w};
    var index1 = global_idx / (uniforms.N / ${w});
    let stride1 = uniforms.M / ${b};
    let row = (index1 % stride1) * ${b};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${se.offsetToIndices("batch")};`}
    ${Pr(fe,Mr)}
    let a_offset = ${fe.indicesToOffset("a_indices")};
    ${Pr(et,dr)}
    let b_offset = ${et.indicesToOffset("b_indices")};
    var values: array<${Ve.type.value}, ${b}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${l}) {
      ${lr()}
    }
    for (var i = 0u; i < ${b}u; i++) {
      var value = values[i];
      ${hr}
      ${Nt}
      let cur_indices = ${Ve.type.indices}(batch, row + i, col);
      let offset = ${Ve.indicesToOffset("cur_indices")};
      ${Ve.setByOffset(`offset / ${w}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${w};${l};${b};${s}`,inputDependencies:T?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:q}),getShaderSource:O}},yl=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},bl=e=>{yl(e.inputs);let t=zr.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(eo(e.inputs,{activation:""},t)):e.compute(Qi(e.inputs,{activation:""},t))}}),Zs,Js,ro,ei,no,so,Ml,vl,Ts,xl=D(()=>{Zt(),gu(),Ji(),Ys(),wu(),jn(),to(),is(),Zs=(e,t,r,n,s,i)=>{let o=e[0],d=e.slice(i?1:2,i?3:4),c=d.length,f=t[0],w=t.slice(2).map((b,S)=>b+(b-1)*(r[S]-1)),l=d.map((b,S)=>b+n[S]+n[S+c]).map((b,S)=>Math.floor((b-w[S]+s[S])/s[S]));return l.splice(0,0,o),l.splice(i?3:1,0,f),l},Js=[2,3,1,0],ro=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ei=(e,t)=>{let r=e.kernelShape.slice();for(let i=2;i<t[1].dims.length;++i)r[i-2]===0&&(r[i-2]=t[1].dims[i]);let n=e.pads.slice();kn.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let s=Object.assign({},e);return Object.assign(s,{kernelShape:r,pads:n}),s},no=e=>{let t=qi(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],s=e.dilations,i=e.group,o=e.kernel_shape,d=e.pads,c=e.strides,f=e.w_is_const();return{autoPad:n,format:r,dilations:s,group:i,kernelShape:o,pads:d,strides:c,wIsConst:f,...t,cacheKey:`${e.format};${t.activation};`}},so=(e,t,r)=>{let n=ei(r,t),s=r.format==="NHWC";if(r.group!==1){if(!e.adapterInfo.isArchitecture("ampere")&&s&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let et=Zs(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,s),Ve=e.kernelCustomData.wT??e.compute(Tn(t[1],Js),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Ve);let pt=[t[0],Ve];t.length===3&&pt.push(t[2]),e.compute(wl(pt,n,et),{inputs:pt})}else e.compute(gl(t,n));return}let i=t.length===3,o=t[0].dims[s?1:2],d=t[0].dims[s?2:3],c=t[0].dims[s?3:1],f=t[1].dims[2],w=t[1].dims[3],l=Zs(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,s),b=l[s?1:2],S=l[s?2:3],T=l[s?3:1],C=s&&f===o&&w===d&&r.pads[0]===0&&r.pads[1]===0;if(C||f===1&&w===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let et=l[0],Ve,pt,Nt,At=[];if(s){let vr=e.kernelCustomData.wT??e.compute(Tn(t[1],Js),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=vr),C){let Mr=o*d*c;Ve=t[0].reshape([1,et,Mr]),pt=vr.reshape([1,Mr,T]),Nt=[1,et,T]}else Ve=t[0].reshape([et,o*d,c]),pt=vr.reshape([1,c,T]),Nt=[et,b*S,T];At.push(Ve),At.push(pt)}else Ve=t[0].reshape([et,c,o*d]),pt=t[1].reshape([1,T,c]),Nt=[et,T,b*S],At.push(pt),At.push(Ve);i&&At.push(t[2]);let hr=Nt[2],ir=At[0].dims[At[0].dims.length-1];hr<8&&ir<8?e.compute(eo(At,n,l,Nt,s),{inputs:At}):e.compute(Qi(At,n,l,Nt,s),{inputs:At});return}let H=!0,q=e.kernelCustomData.wT??e.compute(Tn(t[1],Js),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=q);let O=[t[0],q];i&&O.push(t[2]);let ne=s?b*S:T,se=s?T:b*S,fe=f*w*c;e.compute(_u(O,n,l,ne,se,fe,i,H),{inputs:O})},Ml=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),o=[1].concat(t.dilations),d=[1].concat(t.kernelShape),c=ei({...t,pads:s,strides:i,dilations:o,kernelShape:d},n);e.compute(gl(n,c,f=>r?[f[0],f[2],f[3]]:[]))},vl=(e,t,r)=>{let n=r.format==="NHWC"?"channelsLast":"channelsFirst",s=ei(r,t),i=r.autoPad==="NOTSET"?r.pads:r.autoPad,o=ml(t[0].dims,t[1].dims,r.strides,r.dilations,i,!1,n);e.compute(_l(t,s,o.outShape,[o.filterDepth,o.filterHeight,o.filterWidth],[o.padInfo.front,o.padInfo.top,o.padInfo.left],n))},Ts=(e,t)=>{ro(e.inputs,t),e.inputs[0].dims.length===3?Ml(e,t):e.inputs[0].dims.length===5?vl(e,e.inputs,t):so(e,e.inputs,t)}}),Tl,Cl,yu=D(()=>{Yt(),fn(),nr(),jn(),ls(),ll(),Ys(),Tl=(e,t=!1,r,n,s=4)=>{let i=H=>{switch(H){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return ${n}(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${H} is not supported.`)}},o=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,c=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",f=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",w=e?"row":"col",l=e?"col":"row",b=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${w} / outWidth;
      let outCol = ${w} % outWidth;

      let WRow = ${l} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${l} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${c}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${f}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${l} % inChannels;
      ${o}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${s}];`,S=e?`
      let col = colIn * ${s};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${b}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${s};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${b}
      }
      return ${n}(0.0);`,T=`
      let col = colIn * ${s};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${i(s)}
      }
      return ${n}(0.0);
      `,C=Rn(r,n);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?S:T}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?T:S}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${s};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${Hi(t)}
      ${C}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${s}] = value;
    }
  }`},Cl=(e,t,r,n,s,i,o,d)=>{let c=t.format==="NHWC",f=c?e[0].dims[3]:e[0].dims[1],w=r[0],l=c?r[2]:r[3],b=c?r[1]:r[2],S=c?r[3]:r[1],T=c&&f%4===0&&f%3&&S%4===0,C=c?S:l*b,H=c?l*b:S,q=[8,8,1],O=n<=8?[4,1,1]:[4,4,1],ne=[Math.ceil(C/q[0]/O[0]),Math.ceil(H/q[1]/O[1]),Math.ceil(w/q[2]/O[2])];Dr("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${ne}`);let se=T?4:1,fe=Math.max(q[0]*se,q[1]),et=T?4:1,Ve=[t.kernelShape[c?1:2],t.kernelShape[c?2:3]],pt=[Ve[0]+(t.dilations[0]<=1?0:(Ve[0]-1)*(t.dilations[0]-1)),Ve[1]+(t.dilations[1]<=1?0:(Ve[1]-1)*(t.dilations[1]-1))],Nt=[pt[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),pt[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],At=[{type:6,data:n},{type:6,data:s},{type:6,data:i},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:Ve},{type:6,data:Nt}];Nn(t,At),At.push(...$t(e[0].dims,e[1].dims));let hr=["rank","rank"];o&&(At.push(...$t(e[2].dims)),hr.push("rank")),At.push(...$t(r));let ir=vr=>{let Mr=it("x",e[0].dataType,e[0].dims.length,et),dr=it("w",e[1].dataType,e[1].dims.length,1),Wt=Rt("result",e[0].dataType,r.length,et),Pr=[Mr,dr],lr="";if(o){let Ue=it("bias",e[2].dataType,e[2].dims.length,et);Pr.push(Ue),lr+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${Ue.type.value} {
            return bias[coords.${c?"w":"y"}${T?"/ 4":""}];
          }`}let Vt=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:Ve.length},{name:"pads",type:"i32",length:Nt.length}];Pn(t,Vt);let or=wr(e[0].dataType,1);if(or!=="f16"&&or!=="f32")throw new Error(`elemType ${or} is not supported.`);return`
        ${Ki("uniforms.result_strides")}
        ${vr.registerUniforms(Vt).declareVariables(...Pr,Wt)};
        ${lr}
        ${Tl(c,o,t,Mr.type.value,se)}
        ${T?Ks(O,q,or,void 0,!c,fe):Xs(O,q,or,void 0,!c,fe,!1,void 0,d)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${O};${q};${T}`,inputDependencies:hr},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:ne[0],y:ne[1],z:ne[2]},programUniforms:At}),getShaderSource:ir}}}),io,Cs,gd=D(()=>{Yt(),fn(),Zt(),nr(),io=(e,t,r,n,s,i=!1,o,d,c=!1)=>{let f=c?1:2,w=c?2:3,l=c?3:1,b=i?2:1,S=`
  fn setOutputAtIndex(flatIndex : u32, value : ${i?`vec4<${o}>`:o}) {
    result[flatIndex] = ${i?`vec4<${o}>`:o}(value);
  }`;n&&(S+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${i?`vec4<${o}>`:o} {
      return bias[coords.${c?"w":"y"}${i?"/ 4":""}];
    }`);let T=i?4:1,C=it("W",t[1].dataType,t[1].dims.length,T),H=it("Dy",t[0].dataType,t[0].dims.length,T),q=[H,C];n&&q.push(it("bias",t[2].dataType,[r[l]].length,T));let O=Rt("result",t[0].dataType,r.length,T),ne=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${b};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${o}>, ${b}>;
        for (var i = 0; i < ${b}; i++) {
          dotProd[i] = vec4<${o}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${o}(dyCorner.x) + ${o}(wR)) / ${o}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${o}(dyCorner.y) + ${o}(wC)) / ${o}(uniforms.strides.y);
            let dyC2 = (${o}(dyCorner.y) + 1.0 + ${o}(wC)) / ${o}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${o}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${H.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${H.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${o}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${l}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${H.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${H.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${b}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${o}>(0.0)`};
          ${O.set("batch","r","c + i","d1","value")};
        }
      }`,se=`
          let outputIndices = ${O.offsetToIndices("global_idx")};
          let batch = ${O.indicesGet("outputIndices",0)};
          let d1 = ${O.indicesGet("outputIndices",l)};
          let r = ${O.indicesGet("outputIndices",f)};
          let c = ${O.indicesGet("outputIndices",w)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${o}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${o}(dyRCorner) + ${o}(wR)) / ${o}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[${f}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${o}(dyCCorner) + ${o}(wC)) / ${o}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[${w}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${c?H.get("batch","idyR","idyC","inputChannel"):H.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${C.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${o}(0.0)`};
          ${O.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(d).declareVariables(...q,O)}
  ${S}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${i?ne:se}}`},Cs=(e,t,r)=>{let n=e.length>2,s=t.outputShape,i=Je.size(s),o=[Math.ceil(i/64),1,1];Dr("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${o}`);let d=t.format==="NHWC",c=["rank","rank"],f=[t.strides[0],t.strides[1]],w=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],l=[t.dilations[0],t.dilations[1]],b=[w[0]+(t.dilations[0]<=1?0:(t.kernelShape[d?1:2]-1)*(t.dilations[0]-1)),w[1]+(t.dilations[1]<=1?0:(t.kernelShape[d?2:3]-1)*(t.dilations[1]-1))],S=[b[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),b[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],T=!1,C=t.group,H=e[1].dims,q=H[0]/C,O=H[1],ne=[{type:12,data:i},{type:12,data:f},{type:12,data:w},{type:12,data:l},{type:12,data:b},{type:6,data:S},{type:12,data:q},{type:12,data:O},...$t(e[0].dims,e[1].dims)];n&&(ne.push(...$t(e[2].dims)),c.push("rank")),ne.push(...$t(s));let se=o[1]===1&&o[2]===1,fe=et=>{let Ve=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:f.length},{name:"filter_dims",type:"u32",length:w.length},{name:"dilations",type:"u32",length:w.length},{name:"effective_filter_dims",type:"u32",length:b.length},{name:"pads",type:"i32",length:S.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],pt=wr(e[0].dataType);return`${io(et,e,s,n,se,T,pt,Ve,d)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:c},getRunData:()=>({dispatchGroup:{x:o[0],y:o[1],z:o[2]},outputs:[{dims:r?r(s):s,dataType:e[0].dataType}],programUniforms:ne}),getShaderSource:fe}}}),El,Sl,oo,ao,$l,lo,kl,Pl,uo,bu,wd=D(()=>{yu(),gd(),jn(),is(),El=(e,t,r,n,s,i)=>(e-1)*t+r+(n-1)*s+1-i,Sl=(e,t,r,n,s)=>{let i=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=i,r[s]=e-i):t==="SAME_LOWER"&&(r[n]=e-i,r[s]=i)},oo=(e,t,r,n,s,i,o,d,c,f)=>{let w=e.length-2,l=f.length===0;if(c.length===0)for(let T=0;T<w;++T)c.push(0);let b=e[0],S=t[d?3:1]*s;for(let T=0,C=e.length-w-(d?1:0);T<w;++T,++C){let H=e[C],q=l?H*o[T]:f[T],O=El(H,o[T],i[T],t[C],r[T],q);Sl(O,n,i,T,T+w),l&&f.push(o[T]*(H-1)+c[T]+(t[C]-1)*r[T]+1-i[T]-i[T+w])}f.splice(0,0,b),f.splice(d?3:1,0,S)},ao=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((l,b)=>l*b,1)===0){r.length=0;for(let l=2;l<t[1].dims.length;++l)r.push(t[1].dims[l])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let s=e.pads.slice(),i=e.outputShape.slice(),o=e.outputPadding.slice(),d=t[0].dims,c=e.dilations.slice();if(c.reduce((l,b)=>l+b,0)===0){let l=t[0].dims.length-2;c=new Array(l).fill(1)}let f=e.strides.slice();if(f.reduce((l,b)=>l+b,0)===0){let l=t[0].dims.length-2;f=new Array(l).fill(1)}oo(d,r,c,e.autoPad,e.group,s,f,n,o,i);let w=Object.assign({},e);return Object.assign(w,{kernelShape:r,pads:s,outputPadding:o,outputShape:i,dilations:c,strides:f}),w},$l=e=>{let t=qi(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],s=e.dilations,i=e.group,o=e.kernelShape,d=e.pads,c=e.strides,f=e.wIsConst(),w=e.outputPadding,l=e.outputShape;return{autoPad:n,format:r,dilations:s,group:i,kernelShape:o,outputPadding:w,outputShape:l,pads:d,strides:c,wIsConst:f,...t,cacheKey:`${e.format};${t.activation};`}},lo=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let s=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==s))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.reduce((o,d)=>o+d,0)>0&&t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.reduce((o,d)=>o+d,0)>0&&t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.reduce((o,d)=>o+d,0)>0&&t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.outputPadding.length!==i&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(t.kernelShape.reduce((o,d)=>o+d,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},kl=[2,3,1,0],Pl=(e,t,r)=>{let n=ao(r,t),s=r.format==="NHWC",i=n.outputShape,o=i[s?3:1],d=t[0].dims[s?3:1];if(n.group!==1||o===1&&d===1){e.compute(Cs(t,n));return}let c=i[s?1:2],f=i[s?2:3],w=t[1].dims[2],l=t[1].dims[3],b=s?c*f:o,S=s?o:c*f,T=w*l*d,C=!0,H=e.kernelCustomData.wT??e.compute(Tn(t[1],kl),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=H);let q=[t[0],H],O=t.length===3;O&&(!s&&t[2].dims.length===1?q.push(t[2].reshape([t[2].dims[0],1,1])):q.push(t[2])),e.compute(Cl(q,n,i,b,S,T,O,C),{inputs:q})},uo=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=t.kernelShape;(s.length===0||s[0]===0)&&(s=[e.inputs[1].dims[2]]);let i=t.dilations;(i.length===0||i[0]===0)&&(i=[1]);let o=t.strides;(o.length===0||o[0]===0)&&(o=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],o=[1].concat(o),i=[1].concat(i),s=[1].concat(s);let c=ao({...t,pads:d,strides:o,dilations:i,kernelShape:s},n);e.compute(Cs(n,c,f=>r?[f[0],f[2],f[3]]:[f[0],f[1],f[3]]))},bu=(e,t)=>{lo(e.inputs,t),e.inputs[0].dims.length===3?uo(e,t):Pl(e,e.inputs,t)}}),co,po,Al,Mu=D(()=>{Yt(),Zt(),Er(),nr(),co=(e,t,r,n)=>{let s=Je.size(t),i=t.length,o=it("input",e,i),d=Rt("output",e,i),c=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),f=Je.normalizeAxis(c,i),w=l=>{let b=` i32(${o.indicesGet("inputIndices","uniforms.axis")}) `,S=It("uniforms.input_shape","uniforms.axis",i),T=n.reverse?b+(n.exclusive?" + 1":""):"0",C=n.reverse?S:b+(n.exclusive?"":" + 1");return`
                ${l.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(o,d)}
                ${l.mainStart()}
                  ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${T};
                  let last : i32 = ${C};
                  for (var i : i32 = first; i < last; i++) {
                    ${o.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${o.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},{type:12,data:f},...$t(t,t)]}),getShaderSource:w}},po=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,s=e.inputs[1];e.compute(co(n,r,s,t),{inputs:[0]})},Al=e=>{let t=e.exclusive===1,r=e.reverse===1;return Qt({exclusive:t,reverse:r})}}),ho,Il,Fl,fo,Ol,vu=D(()=>{Yt(),Zt(),Er(),nr(),ho=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},Il=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let i=0;i<t;++i)s.push(r.indicesSet("a",e[i],`i[${i}]`));return s.push("return a;}"),s.join(`
`)},Fl=(e,t)=>{let r,n,s,i,o,d,c=t.format==="NHWC",f=t.blocksize,w=t.mode==="DCR";c?([r,n,s,i]=e.dims,o=w?[r,n,s,f,f,i/f**2]:[r,n,s,i/f**2,f,f],d=w?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,s,i]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],o=w?[r,f,f,i/f**2,n,s]:[r,i/f**2,f,f,n,s],d=w?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let l=e.reshape(o),b=l.dims.length,S=e.dataType,T=it("a",S,b),C=Rt("output",S,b),H=q=>`
  ${q.registerUniform("output_size","u32").declareVariables(T,C)}

  ${Il(d,b,T,C)}

  ${q.mainStart()}
    ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${C.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${C.setByOffset("global_idx",T.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:q=>{let O=c?[r,n*f,s*f,i/f**2]:[r,i/f**2,n*f,s*f],ne=Je.size(O),se=l.dims,fe=Je.sortBasedOnPerm(se,d);return{outputs:[{dims:O,dataType:q[0].dataType}],dispatchGroup:{x:Math.ceil(ne/64)},programUniforms:[{type:12,data:ne},...$t(se,fe)]}},getShaderSource:H}},fo=(e,t)=>{ho(e.inputs),e.compute(Fl(e.inputs[0],t))},Ol=e=>Qt({blocksize:e.blocksize,mode:e.mode,format:e.format})}),Es,Ss,mo,Fr,xu,Tu,Cu,ti,zl,Dl,Bl,Eu=D(()=>{Yt(),Zt(),Er(),nr(),Es="[a-zA-Z]|\\.\\.\\.",Ss="("+Es+")+",mo="^"+Ss+"$",Fr="("+Ss+",)*"+Ss,xu="^"+Fr+"$",Tu=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let r=this.symbolToIndices.get(e);r===void 0?r=[t]:r.push(t),this.symbolToIndices.set(e,r)}},Cu=class{constructor(e,t){this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=t.includes("->")?t.split("->",2):[t,""];if(!r.match(RegExp(xu)))throw new Error("Invalid LHS term");if(r.split(",").forEach((s,i)=>{let o=e[i].dims.slice();if(!s.match(RegExp(mo)))throw new Error("Invalid LHS term");let d=this.processTerm(s,!0,o,i);this.lhs.push(d)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([s,i])=>i.count===1||s==="...").map(([s])=>s).join("");else if(!n.match(RegExp(Ss)))throw new Error("Invalid RHS");n.match(RegExp(Es,"g"))?.forEach(s=>{if(s==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(s);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,r){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:t,inputIndices:[r]};this.symbolToInfo.set(e,n)}processTerm(e,t,r,n=-1){let s=r.length,i=!1,o=[],d=0;if(!e.match(RegExp(mo))&&!t&&e!=="")throw new Error("Invalid LHS term");let c=e.match(RegExp(Es,"g")),f=new Tu(n);return c?.forEach((w,l)=>{if(w==="..."){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;let b=s-c.length+1;if(b<0)throw new Error("Ellipsis out of bounds");if(o=r.slice(d,d+b),this.hasEllipsis){if(this.ellipsisDims.length!==o.length||this.ellipsisDims.toString()!==o.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=o;else throw new Error("Ellipsis must be specified in the LHS");for(let S=0;S<o.length;S++){let T=String.fromCharCode(48+S);f.addSymbol(T,l+S),this.addSymbol(T,r[d++],n)}}else f.addSymbol(w,l+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(w,r[d++],n)}),f}},ti=e=>e+"_max",zl=(e,t,r,n)=>{let s=e.map(f=>f.length).map((f,w)=>it(`input${w}`,t,f)),i=Je.size(n),o=Rt("output",t,n.length),d=[...r.symbolToInfo.keys()].filter(f=>!r.rhs.symbolToIndices.has(f)),c=f=>{let w=[],l="var prod = 1.0;",b="var sum = 0.0;",S="sum += prod;",T=[],C=[],H=[],q=[],O=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((se,fe)=>{if(r.rhs.symbolToIndices.has(fe)){let et=r.rhs.symbolToIndices.get(fe)?.[0];et!==void 0&&r.lhs.forEach((Ve,pt)=>{if(se.inputIndices.includes(pt)){let Nt=Ve.symbolToIndices.get(fe);if(Nt===void 0)throw new Error("Invalid symbol error");Nt.forEach(At=>{w.push(`${s[pt].indicesSet(`input${pt}Indices`,At,o.indicesGet("outputIndices",et))}`)})}})}else r.lhs.forEach((et,Ve)=>{if(se.inputIndices.includes(Ve)){let pt=et.symbolToIndices.get(fe);if(pt===void 0)throw new Error("Invalid symbol error");pt.forEach(Nt=>{T.push(`${s[Ve].indicesSet(`input${Ve}Indices`,Nt,`${fe}`)}`)}),q.push(`prod *= ${s[Ve].getByIndices(`input${Ve}Indices`)};`)}}),C.push(`for(var ${fe}: u32 = 0; ${fe} < uniforms.${ti(fe)}; ${fe}++) {`),H.push("}")});let ne=O?[...w,`let sum = ${s.map((se,fe)=>se.getByIndices(`input${fe}Indices`)).join(" * ")};`]:[...w,b,...C,...T,l,...q,S,...H];return`
            ${f.registerUniforms(d.map(se=>({name:`${ti(se)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,o)}

            ${f.mainStart()}
            ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${o.offsetToIndices("global_idx")};
            ${s.map((se,fe)=>`var input${fe}Indices: ${s[fe].type.indices};`).join(`
`)}
            ${ne.join(`
`)};
            ${o.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let f=d.filter(l=>r.symbolToInfo.has(l)).map(l=>({type:12,data:r.symbolToInfo.get(l)?.dimValue||0}));f.push({type:12,data:i});let w=e.map((l,b)=>[...$t(l)]).reduce((l,b)=>l.concat(b),f);return w.push(...$t(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:w}},getShaderSource:c}},Dl=(e,t)=>{let r=new Cu(e.inputs,t.equation),n=r.outputDims,s=e.inputs.map((i,o)=>i.dims);e.compute(zl(s,e.inputs[0].dataType,r,n))},Bl=e=>{let t=e.equation.replace(/\s+/g,"");return Qt({equation:t})}}),_o,ri,Ll,Rl,go,yd=D(()=>{Yt(),Zt(),nr(),_o=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,s=t.length<r.length?0:t.length-r.length;for(;n<r.length&&s<t.length;++n,++s)if(r[n]!==t[s]&&r[n]!==1&&t[s]!==1)throw new Error("Expand requires shape to be broadcastable to input")},ri=(e,t)=>{let r=e.length-t.length,n=[];for(let s=0;s<r;++s)n.push(e[s]);for(let s=0;s<t.length;++s)n.push(t[s]===1?e[s+r]:t[s]);return n},Ll=(e,t)=>e.length>t.length?ri(e,t):ri(t,e),Rl=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=Ll(t,r),s=e[0].dataType,i=s===9?4:1,o=Math.ceil(Je.size(n)/i),d=f=>{let w=it("input",s,t.length,i),l=Rt("output",s,n.length,i),b;if(s===9){let S=(T,C,H="")=>`
          let outputIndices${C} = ${l.offsetToIndices(`outputOffset + ${C}u`)};
          let offset${C} = ${w.broadcastedIndicesToOffset(`outputIndices${C}`,l)};
          let index${C} = offset${C} / 4u;
          let component${C} = offset${C} % 4u;
          ${T}[${C}] = ${H}(${w.getByOffset(`index${C}`)}[component${C}]);
        `;b=`
        let outputOffset = global_idx * ${i};
        var data = vec4<u32>(0);
        ${S("data",0,"u32")}
        ${S("data",1,"u32")}
        ${S("data",2,"u32")}
        ${S("data",3,"u32")}
        ${l.setByOffset("global_idx","data")}
      }`}else b=`
        let outputIndices = ${l.offsetToIndices("global_idx")};
        let inputOffset = ${w.broadcastedIndicesToOffset("outputIndices",l)};
        ${l.setByOffset("global_idx",w.getByOffset("inputOffset"))}
      }`;return`
    ${f.registerUniform("vec_size","u32").declareVariables(w,l)}
    ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${b}`},c=[{type:12,data:o},...$t(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:["rank"]},getShaderSource:d,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c})}},go=e=>{_o(e.inputs),e.compute(Rl(e.inputs),{inputs:[0]})}}),Su,Nl,$u=D(()=>{Yt(),Zt(),nr(),ji(),Su=e=>{let t=e[0].dataType,r=Je.size(e[0].dims),n=Je.size(e[1].dims),s=n%4===0,i=o=>{let d=it("x",t,[1],4),c=it("bias",t,[1],4),f=Rt("y",t,[1],4),w=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],l=S=>`
      let bias${S}_offset: u32 = (global_idx * 4 + ${S}) % uniforms.bias_size;
      let bias${S} = ${c.getByOffset(`bias${S}_offset / 4`)}[bias${S}_offset % 4];`,b=s?`
      let bias = ${c.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${l(0)}${l(1)}${l(2)}${l(3)}
      let bias = ${d.type.value}(bias0, bias1, bias2, bias3);`;return`${o.registerUniforms(w).declareVariables(d,c,f)}

    ${Li(yr(t))}

    ${o.mainStart(dn)}
      ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${d.getByOffset("global_idx")};
      ${b}
      let x_in = x + bias;
      ${f.setByOffset("global_idx",Ri("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${s}`,inputDependencies:["type","type"]},getShaderSource:i,getRunData:o=>({outputs:[{dims:o[0].dims,dataType:o[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/dn/4)}})}},Nl=e=>{e.inputs.length<2||Je.size(e.inputs[1].dims)===0?Na(e):e.compute(Su(e.inputs))}}),jl,Vl,Ul,Wl,ku=D(()=>{Yt(),Zt(),Er(),nr(),jl=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Vl=(e,t)=>{let r=e[0].dims,n=e[1].dims,s=r.length,i=Je.normalizeAxis(t.axis,s),o=r.slice(0);o.splice(i,1,...n);let d=r[i],c=e[0].dataType===9?4:1,f=Math.ceil(Je.size(o)/c),w=[{type:12,data:f},{type:6,data:d},{type:12,data:i},...$t(e[0].dims,e[1].dims,o)],l=b=>{let S=it("data",e[0].dataType,e[0].dims.length,c),T=it("inputIndices",e[1].dataType,e[1].dims.length),C=Rt("output",e[0].dataType,o.length,c),H=O=>{let ne=n.length,se=`var indicesIndices${O}  = ${T.type.indices}(0);`;for(let fe=0;fe<ne;fe++)se+=`${ne>1?`indicesIndices${O}[${fe}]`:`indicesIndices${O}`} = ${o.length>1?`outputIndices${O}[uniforms.axis + ${fe}]`:`outputIndices${O}`};`;se+=`
          var idx${O} = ${T.getByIndices(`indicesIndices${O}`)};
          if (idx${O} < 0) {
            idx${O} = idx${O} + uniforms.axisDimLimit;
          }
          var dataIndices${O} : ${S.type.indices};
        `;for(let fe=0,et=0;fe<s;fe++)fe===i?(se+=`${s>1?`dataIndices${O}[${fe}]`:`dataIndices${O}`} = u32(idx${O});`,et+=ne):(se+=`${s>1?`dataIndices${O}[${fe}]`:`dataIndices${O}`} = ${o.length>1?`outputIndices${O}[${et}]`:`outputIndices${O}`};`,et++);return se},q;if(e[0].dataType===9){let O=(ne,se,fe="")=>`
          let outputIndices${se} = ${C.offsetToIndices(`outputOffset + ${se}u`)};
          ${H(se)};
          let offset${se} = ${S.indicesToOffset(`dataIndices${se}`)};
          let index${se} = offset${se} / 4u;
          let component${se} = offset${se} % 4u;
          ${ne}[${se}] = ${fe}(${S.getByOffset(`index${se}`)}[component${se}]);
        `;q=`
        let outputOffset = global_idx * ${c};
        var value = vec4<u32>(0);
        ${O("value",0,"u32")}
        ${O("value",1,"u32")}
        ${O("value",2,"u32")}
        ${O("value",3,"u32")}
        ${C.setByOffset("global_idx","value")}
      `}else q=`
      let outputIndices = ${C.offsetToIndices("global_idx")};
      ${H("")};
      let value = ${S.getByIndices("dataIndices")};
      ${C.setByOffset("global_idx","value")};
      `;return`
      ${b.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(S,T,C)}
      ${b.mainStart()}
        ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${q}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:w}),getShaderSource:l}},Ul=e=>Qt({axis:e.axis}),Wl=(e,t)=>{let r=e.inputs;jl(r),e.compute(Vl(e.inputs,t))}}),Gl,ql,Hl,Kl,Pu=D(()=>{Yt(),Zt(),Er(),nr(),Gl=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},ql=(e,t)=>{let r=e[0].dims,n=e[0].dataType,s=r.length,i=e[1].dims,o=e[1].dataType,d=Je.normalizeAxis(t.axis,s),c=r[d],f=i.slice(0),w=Je.size(f),l=it("input",n,s),b=it("indicesInput",o,i.length),S=Rt("output",n,f.length),T=[{type:12,data:w},{type:6,data:c},{type:12,data:d}];return T.push(...$t(r,i,f)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:f,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:T}),getShaderSource:C=>`
      ${C.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(l,b,S)}
      ${C.mainStart()}
      ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${S.offsetToIndices("global_idx")};

      var idx = ${b.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${l.type.indices}(outputIndices);
      ${l.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${l.getByIndices("inputIndices")};

      ${S.setByOffset("global_idx","value")};
  }`}},Hl=e=>Qt({axis:e.axis}),Kl=(e,t)=>{let r=e.inputs;Gl(r),e.compute(ql(e.inputs,t))}}),Xl,Ql,Yl,Au,bd=D(()=>{Yt(),Zt(),nr(),Xl=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ql=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[s,i,o]=gr.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),d=[s,i];if(!d)throw new Error("Can't use gemm on the given tensors");let c=Je.size(d),f=[{type:12,data:c},{type:12,data:s},{type:12,data:i},{type:12,data:o},{type:1,data:t.alpha},{type:1,data:t.beta}],w=["type","type"];e.length===3&&(f.push(...$t(e[2].dims)),w.push("rank")),f.push(...$t(d));let l=b=>{let S="";t.transA&&t.transB?S="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?S="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?S="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(S="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let T=t.alpha===1?"":"value *= uniforms.alpha;",C=it("a",e[0].dataType,e[0].dims),H=it("b",e[1].dataType,e[1].dims),q=C.type.value,O=null,ne=[C,H];e.length===3&&(O=it("c",e[2].dataType,e[2].dims.length),ne.push(O));let se=Rt("output",e[0].dataType,d.length);ne.push(se);let fe=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${b.registerUniforms(fe).declareVariables(...ne)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${q}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${S}
    }

    ${T}
    ${O!=null?`let cOffset = ${O.broadcastedIndicesToOffset("vec2(m, n)",se)}; value += ${q}(uniforms.beta) * ${O.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:f}),getShaderSource:l}},Yl=e=>{let t=e.transA,r=e.transB,n=e.alpha,s=e.beta;return{transA:t,transB:r,alpha:n,beta:s,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Au=(e,t)=>{Xl(e.inputs),e.compute(Ql(e.inputs,t))}}),on,Iu,Fu,Zl,Ou,ni,zu,Du=D(()=>{Yt(),Zt(),Er(),z(),Gs(),nr(),is(),on=(e,t)=>e.length>t&&e[t].dims.length>0&&Je.size(e[t].dims)>0?e[t]:void 0,Iu=(e,t)=>{let r=e[0],n=on(e,1),s=on(e,2),i=on(e,3),o=on(e,4),d=on(e,5),c=on(e,6),f=on(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let w=!1,l=r.dims[0],b=r.dims[1],S=r.dims.length===3?w?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],T=b,C=0,H=0,q=Math.floor(S/t.numHeads);if(c&&f){if(c.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims[0]!==l||c.dims[1]!==t.numHeads||c.dims[3]!==q)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(f.dims[0]!==l||f.dims[1]!==t.numHeads||f.dims[3]!==q)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(c.dims[2]!==f.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(f.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');C=c.dims[2],H=c.dims[2]}else if(c||f)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let O;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');O=2,T=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==q)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');O=5,T=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==q)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');O=0,T=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');O=3}if(i){if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let ne=0;if(o){ne=8;let pt=o.dims;throw pt.length===1?pt[0]===l?ne=1:pt[0]===3*l+2&&(ne=3):pt.length===2&&pt[0]===l&&pt[1]===T&&(ne=5),ne===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let se=!1,fe=S;if(s){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(T!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');fe=s.dims[2]}else{if(T!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');fe=s.dims[1]*s.dims[3],se=!0}}let et=C+T,Ve=!1;if(o)throw new Error("Key padding mask is not supported");if(d){if(d.dims.length!==4)throw new Error('Input "relative_position_bias" is expected to have 4 dimensions');if(d.dims[0]!==l&&d.dims[0]!==1||d.dims[1]!==t.numHeads||d.dims[2]!==b||d.dims[3]!==et)throw new Error('Input "relative_position_bias" shape (batch_size, 1, sequence_length, kv_sequence_length)')}return{batchSize:l,sequenceLength:b,pastSequenceLength:C,kvSequenceLength:T,totalSequenceLength:et,maxSequenceLength:H,inputHiddenSize:0,hiddenSize:S,vHiddenSize:fe,headSize:q,vHeadSize:Math.floor(fe/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:ne,scale:t.scale,broadcastResPosBias:Ve,passPastInKv:se,qkvFormat:O}},Fu=e=>Qt({...e}),Zl=Qt({perm:[0,2,1,3]}),Ou=(e,t,r,n,s,i,o)=>{let d=[n,s,i],c=Je.size(d),f=[{type:12,data:c},{type:12,data:o},{type:12,data:i}],w=l=>{let b=Rt("qkv_with_bias",t.dataType,d),S=it("qkv",t.dataType,d),T=it("bias",r.dataType,d),C=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${l.registerUniforms(C).declareVariables(S,T,b)}
  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:f}),getShaderSource:w},{inputs:[t,r],outputs:[-1]})[0]},ni=(e,t,r,n,s,i,o,d)=>{let c=i;if(o){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return c=Ou(e,i,o,t,n,r*s,d),c=c.reshape([t,n,r,s]),e.compute(Tn(c,Zl.perm),{inputs:[c],outputs:[-1]})[0]}else return i.dims.length===3&&(c=i.reshape([t,n,r,s])),e.compute(Tn(c,Zl.perm),{inputs:[c],outputs:[-1]})[0]},zu=(e,t)=>{let r=Iu(e.inputs,t),n=e.inputs[0],s=on(e.inputs,1),i=on(e.inputs,2),o=on(e.inputs,3),d=on(e.inputs,4),c=on(e.inputs,5),f=on(e.inputs,6),w=on(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if(s?.dims.length===5)throw new Error("Packed KV is not implemented");let l=s&&i&&s.dims.length===4&&i.dims.length===4,b=ni(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,o,0);if(l)return os(e,b,s,i,d,void 0,f,w,c,r,t);if(!s||!i)throw new Error("key and value must be provided");let S=ni(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,s,o,r.hiddenSize),T=ni(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,i,o,2*r.hiddenSize);os(e,b,S,T,d,void 0,f,w,c,r,t)}}),Jl,Bu,Lu,eu,Ru,Nu=D(()=>{Yt(),Zt(),nr(),Jl=e=>Array.from(e.getBigInt64Array(),Number),Bu=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Jl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Lu=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},eu=(e,t)=>{let r=e[0].dims,n=t??Jl(e[1]),s=Lu(r,n),i=Je.size(s),o=e[0].dataType,d=it("input",o,r.length),c=Rt("output",o,s.length),f=w=>`
      const inputShape = ${d.indices(...r)};
      ${w.registerUniform("output_size","u32").declareVariables(d,c)}
      ${w.mainStart()}
      ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${c.offsetToIndices("global_idx")};
      var input_indices: ${d.type.indices};
      for (var i = 0; i < ${r.length}; i++) {
        let input_dim_i = ${d.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${c.indicesGet("output_indices","i")}  % input_dim_i;

        ${d.indicesSet("input_indices","i","input_dim_value")}
      }
      ${c.setByOffset("global_idx",d.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...$t(e[0].dims,s)]}),getShaderSource:f}},Ru=e=>{Bu(e.inputs),e.compute(eu(e.inputs),{inputs:[0]})}}),ju,tu,Vu,Uu,ru,Wu,Md=D(()=>{Yt(),Zt(),Er(),Gs(),nr(),Du(),Nu(),is(),ju=(e,t)=>{let r=e[0],n=e[1],s=e[2],i=e[3],o=e[4];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let d=!1,c=r.dims[0],f=r.dims[1],w=r.dims.length===3?d?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],l=f,b=0,S=0,T=Math.floor(w/t.numHeads),C=i&&i.dims.length!==0,H=o&&o.dims.length!==0,q=!0;if(C&&H){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(o.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');b=i.dims[1],S=i.dims[1]}else if(C||H)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let O;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');O=2,l=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==T)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');O=5,l=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==T)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');O=0,l=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');O=3}let ne=0,se=!1,fe=w;if(s){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(l!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');fe=s.dims[2]}else{if(l!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');fe=s.dims[1]*s.dims[3],se=!0}}let et=b+l;return{batchSize:c,sequenceLength:f,pastSequenceLength:b,kvSequenceLength:l,totalSequenceLength:et,maxSequenceLength:S,inputHiddenSize:0,hiddenSize:w,vHiddenSize:fe,headSize:T,vHeadSize:Math.floor(fe/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:ne,scale:t.scale,broadcastResPosBias:!1,passPastInKv:se,qkvFormat:O,isPastkvBSNH:q}},tu=(e,t,r,n)=>{let s=[n.batchSize,n.totalSequenceLength,n.kvNumHeads,n.headSize],i=4,o=Je.size(s)/i,d=n.totalSequenceLength,c=Rt("present_kv",r,s.length,i),f=it("new_kv",e.dataType,e.dims.length,i),w=t?it("past_kv",t.dataType,t.dims.length,i):void 0,l=Math.ceil(n.headSize/i),b={x:d,y:e.dims[0],z:1},S=t?["rank","rank"]:["rank"],T=[{type:12,data:o},{type:12,data:n.pastSequenceLength},{type:12,data:n.kvSequenceLength},{type:12,data:n.totalSequenceLength}],C=[f];w?(T.push(...$t(e.dims),...$t(t.dims),...$t(s)),C.push(w)):T.push(...$t(e.dims),...$t(s));let H=[{name:"output_size",type:"u32"},{name:"past_seqlen",type:"u32"},{name:"new_seqlen",type:"u32"},{name:"present_seqlen",type:"u32"}],q=`      let past_batch_stride = uniforms.past_seqlen * num_heads * H;
        var past_head_stride = uniforms.past_seqlen * H;
        if (is_bsnh) {
          past_head_stride = H;
        }
        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;
        present_kv[out_offset] = past_kv[in_offset];`,O=`      let new_batch_stride = uniforms.new_seqlen * num_heads * H;
        let new_row_stride = num_heads * H;
        let new_head_stride = H;
        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;
        present_kv[out_offset] = new_kv[in_offset];`,ne=t?`if (s < past_seqlen) {
        ${q}
        } else if (s < past_seqlen + uniforms.new_seqlen) {
        ${O}
        }`:`if (s < past_seqlen + uniforms.new_seqlen) {
          ${O}
        }`,se=fe=>`

  ${fe.registerUniforms(H).declareVariables(...C,c)}
  ${fe.mainStart([l,n.kvNumHeads,1])}
    ${fe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    var indices = ${c.offsetToIndices("global_idx")};
    let h = local_id.x;
    let n = local_id.y;
    let s = workgroup_id.x;
    let b = workgroup_id.y;
    let num_heads = ${n.kvNumHeads}u;
    let H = ${l}u;

    let present_seqlen = uniforms.present_seqlen;
    let present_batch_stride = present_seqlen * num_heads * H;
    var row_stride = H;
    let is_bsnh = ${n.isPastkvBSNH};

    if (is_bsnh) {
      row_stride = num_heads * H;
    }
    var present_head_stride = present_seqlen * H;
    if (is_bsnh) {
      present_head_stride = H;
    }

    let past_seqlen = uniforms.past_seqlen;

    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;
    ${ne}
  }`;return{name:"ConcatPastNew",shaderCache:{hint:`${n.kvNumHeads}${l}${!!t}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:s,dataType:r}],dispatchGroup:b,programUniforms:T}),getShaderSource:se}},Vu=e=>Qt({...e}),Uu=Qt({perm:[0,2,1,3]}),ru=(e,t,r,n,s)=>{let i=t,o=n.kvNumHeads,d=n.nReps;return t.dims.length===3&&n.kvSequenceLength!==0&&(i=t.reshape([n.batchSize,n.kvSequenceLength,o,n.headSize])),r?i=e.compute(tu(i,r,i.dataType,n),{inputs:[i,r],outputs:[n.isPastkvBSNH?s:-1]})[0]:i=e.compute(tu(i,void 0,i.dataType,n),{inputs:[i],outputs:[n.isPastkvBSNH?s:-1]})[0],d!==1&&(i=e.compute(eu([i],[1,1,1,d]),{inputs:[i],outputs:[-1]})[0],i=i.reshape([n.batchSize,n.totalSequenceLength,o*d,n.headSize])),e.compute(Tn(i,Uu.perm),{inputs:[i],outputs:[-1]})[0]},Wu=(e,t)=>{let r=ju(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let n=ni(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],void 0,0),s=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,i=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,o=ru(e,e.inputs[1],s,r,1),d=ru(e,e.inputs[2],i,r,2);os(e,n,o,d,void 0,void 0,void 0,void 0,void 0,r,t)}}),Gu,qu,Hu,Ku,vd=D(()=>{Yt(),Zt(),nr(),Gu=(e,t)=>{let r=e[0].dims,n=r,s=2,i=Je.sizeToDimension(r,s),o=Je.sizeFromDimension(r,s),d=mr(o),c=o/d,f=[r[0],r[1],c],w=["rank","type","type"],l=[{type:12,data:o},{type:12,data:c}];l.push(...$t(f,f));let b=S=>{let T=it("x",e[0].dataType,f.length,d),C=it("scale",e[1].dataType,e[1].dims),H=it("bias",e[2].dataType,e[2].dims),q=Rt("output",e[0].dataType,f.length,d),O=[T,C,H,q],ne=T.type.value,se=d===1?"f32":`vec${d}<f32>`,fe=64,et=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${se}, ${fe}>;
  const workgroupSize = ${fe}u;
  ${S.registerUniforms(et).declareVariables(...O)}
  ${S.mainStart(fe)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${se}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${se}(${T.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${cn("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${se}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${se}(${T.get("batch","channel","h")}) - ${se}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${cn("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${C.getByOffset("channel")});
    let channelShift = f32(${H.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${T.get("batch","channel","h")} * ${ne}(${se}(channelScale)) + ${ne}(${se}(channelShift));
      ${q.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:i},programUniforms:l}),getShaderSource:b}},qu=(e,t,r,n,s,i,o,d)=>{let c=mr(o),f=64,w=c===1?"vec2f":`mat2x${c}f`,l=c===1?"f32":`vec${c}f`,b=(et,Ve)=>`${w}(${et}, ${Ve})`,S=s*o/c,T=Math.ceil(i/f),C=["type"],H=[{type:12,data:T},{type:12,data:i},{type:12,data:Math.floor(o/c)},{type:12,data:Math.floor(i*o/c)}],q=et=>{let Ve=it("input",t.dataType,t.dims,c);return`
  ${et.declareVariables(Ve)}
  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${et.mainStart(f)}
    let currentImageNumber = global_idx / ${f} / uniforms.C;
    let currentChannelNumber = (global_idx / ${f}) % uniforms.C;
    let wgOffset = local_id.x * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${$r("f32",c)};
    var squaredSum = ${$r("f32",c)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${l}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${b("sum","squaredSum")};
  }`},O=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${c}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:[s,o,f,2],dataType:1}],dispatchGroup:{x:s*o/c},programUniforms:H}),getShaderSource:q},{inputs:[t],outputs:[-1]})[0],ne=[{type:12,data:S},{type:12,data:i},{type:12,data:Math.floor(o/c)},{type:12,data:Math.floor(f*o/c)}],se=["type","type","type"],fe=et=>{let Ve=it("scale",r.dataType,r.dims,c),pt=it("bias",n.dataType,n.dims,c);return`
  @group(0) @binding(0) var<storage, read> input : array<${w}>;
  @group(0) @binding(1) var<storage, read> scale : array<${Ve.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${pt.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${et.mainStart()}
    ${et.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${$r("f32",c)};
    var squaredSum = ${$r("f32",c)};
    for (var i: u32 = 0; i < min(${f}, uniforms.H); i++) {
        let value = input[offset + i + currentChannelNumber * ${f}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${l}(scale[currentChannelNumber]);
    let channelShift = ${l}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${b("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${c};${d}`,inputDependencies:se},getRunData:()=>({outputs:[{dims:[s,o,2],dataType:1}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:ne}),getShaderSource:fe},{inputs:[O,r,n],outputs:[-1]})[0]},Hu=(e,t,r)=>{let n=t[0].dims,s=n,i=n[0],o=n[n.length-1],d=Je.sizeFromDimension(n,1)/o,c=mr(o),f=Je.size(s)/c,w=[{type:12,data:d},{type:12,data:Math.floor(o/c)}],l=["type","type"],b=qu(e,t[0],t[1],t[2],i,d,o,r.epsilon),S=T=>{let C=wr(t[0].dataType),H=c===1?"vec2f":`mat2x${c}f`,q=c===1?C:`vec${c}<${C}>`,O=it("input",t[0].dataType,t[0].dims,c),ne=Rt("output",t[0].dataType,s,c);return`
  @group(0) @binding(0) var<storage, read> input : array<${O.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${H}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ne.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${T.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${q}(scale[0]), ${q}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${c}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:w}),getShaderSource:S},{inputs:[t[0],b]})},Ku=(e,t)=>{t.format==="NHWC"?Hu(e,e.inputs,t):e.compute(Gu(e.inputs,t))}}),sr,nu,Qr,tn=D(()=>{Yt(),Zt(),nr(),sr=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},nu=(e,t,r)=>{let n=t.simplified,s=e[0].dims,i=e[1],o=!n&&e[2],d=s,c=Je.normalizeAxis(t.axis,s.length),f=Je.sizeToDimension(s,c),w=Je.sizeFromDimension(s,c),l=Je.size(i.dims),b=o?Je.size(o.dims):0;if(l!==w||o&&b!==w)throw new Error(`Size of X.shape()[axis:] == ${w}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${l} and bias size of ${b}`);let S=[];for(let fe=0;fe<s.length;++fe)fe<c?S.push(s[fe]):S.push(1);let T=mr(w),C=["type","type"],H=[{type:12,data:f},{type:1,data:w},{type:12,data:Math.floor(w/T)},{type:1,data:t.epsilon}];o&&C.push("type");let q=r>1,O=r>2,ne=fe=>{let et=wr(e[0].dataType),Ve=[it("x",e[0].dataType,e[0].dims,T),it("scale",i.dataType,i.dims,T)];o&&Ve.push(it("bias",o.dataType,o.dims,T)),Ve.push(Rt("output",e[0].dataType,d,T)),q&&Ve.push(Rt("mean_data_output",1,S)),O&&Ve.push(Rt("inv_std_output",1,S));let pt=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${fe.registerUniforms(pt).declareVariables(...Ve)}
  ${fe.mainStart()}
    ${fe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${$r("f32",T)};
    var mean_square_vector = ${$r("f32",T)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Br(et,T,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${cn("mean_vector",T)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${cn("mean_square_vector",T)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Br(et,T,"x[j + offset]")};
      let f32scale = ${Br(et,T,"scale[j]")};
      output[j + offset] = ${Ve[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${o?`+ ${Br(et,T,"bias[j]")}`:""}
      );
    }

    ${q?"mean_data_output[global_idx] = mean":""};
    ${O?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},se=[{dims:d,dataType:e[0].dataType}];return q&&se.push({dims:S,dataType:1}),O&&se.push({dims:S,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${T};${r};${n}`,inputDependencies:C},getRunData:()=>({outputs:se,dispatchGroup:{x:Math.ceil(f/64)},programUniforms:H}),getShaderSource:ne}},Qr=(e,t)=>{sr(e.inputs),e.compute(nu(e.inputs,t,e.outputCount))}}),rn,Hn,Xu,su,Qu=D(()=>{Yt(),Zt(),Er(),nr(),rn=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let s=Math.floor((t.k+t.blockSize-1)/t.blockSize),i=t.blockSize/8*t.bits,o=e[1];if(!Je.areEqual(o.dims,[t.n,s,i]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let d=e[2].dims;if(Je.size(d)!==t.n*s)throw new Error("scales input size error.");if(e.length===4){let c=e[3].dims,f=t.bits>4?t.n*s:t.n*Math.floor((s+1)/2);if(Je.size(c)!==f)throw new Error("zeroPoints input size error.")}},Hn=(e,t,r,n)=>{let s=e[0].dims,i=s.length,o=Math.floor((t.k+t.blockSize-1)/t.blockSize),d=s[i-2],c=t.k,f=t.n,w=s.slice(0,i-2),l=Je.size(w),b=t.blockSize/8*t.bits/4,S=e[0].dataType,T=mr(d),C=mr(t.k),H=mr(b),q=Sn(S),O=d*o*q,ne=Math.floor(n/O),se=o<=r[0]&&ne>0,fe=!se||ne>=4?mr(f):ne>=2&&mr(f)>=2?2:1,et=w.concat([d,f]),Ve=Je.size(et)/fe/T,pt=se?[]:[{type:12,data:Ve},{type:12,data:t.blockSize}],Nt=[l,d,c/C],At=Je.convertShape(e[1].dims).slice();At.splice(-1,1,b/H),pt.push(...$t(Nt)),pt.push(...$t(At)),pt.push(...$t(e[2].dims)),e.length===4&&pt.push(...$t(Je.convertShape(e[3].dims)));let hr=[l,d,f/fe];pt.push(...$t(hr));let ir=vr=>{let Mr=Nt.length,dr=it("a",e[0].dataType,Mr,C),Wt=it("b",12,At.length,H),Pr=it("scales",e[2].dataType,e[2].dims.length),lr=[dr,Wt,Pr],Vt=e.length===4?it("zero_points",12,e[3].dims.length):void 0;Vt&&lr.push(Vt);let or=hr.length,Ue=Rt("output",e[0].dataType,or,fe),Lt=[{name:"output_size",type:"u32"},{name:"block_size",type:"u32"}],ar=wr(e[0].dataType),Hr=(()=>{switch(C){case 1:return`array<${ar}, 8>`;case 2:return`mat4x2<${ar}>`;case 4:return`mat2x4<${ar}>`;default:throw new Error(`${C}-component is not supported.`)}})(),Lr=`
        for (var word: u32 = 0; word < ${b}; word += ${H}) {
          ${Wt.indicesSet("b_indices","2","word")};
          let b_data = ${Wt.getByIndices("b_indices")};
          for (var i: u32 = 0; i < ${H}; i++) {
            let b_value: u32 = ${H===1?"b_data":"b_data[word + i]"};
            let b_mask: u32 = 0x0F0F0F0Fu;
            let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);
            let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);
            let b_quantized_values = ${Hr}(${Array.from({length:4},(Un,Kr)=>`${ar}(b_value_lower[${Kr}]), ${ar}(b_value_upper[${Kr}])`).join(", ")});
            let b_dequantized_values = ${C===1?`${Hr}(${Array.from({length:8},(Un,Kr)=>`(b_quantized_values[${Kr}] - zero_point) * scale`).join(", ")});`:`(b_quantized_values - ${Hr}(${Array(8).fill("zero_point").join(",")})) * scale;`};
            // Number of B elements per 32-bit word is 32/bits = 32/4 = 8
            for (var m: u32 = 0; m < ${se?d:T}u; m++) {
              ${dr.indicesSet("a_indices",Mr-2,se?"m":`row * ${T} + m`)};
              ${dr.indicesSet("a_indices",Mr-1,"word_offset")};
              var input_offset = ${dr.indicesToOffset("a_indices")};
              var a_data: ${Hr};
              for (var j: u32 = 0; j < ${8/C}; j++) {
                a_data[j] = ${dr.getByOffset("input_offset")};
                input_offset++;
              }
              ${se?"workgroup_shared[workgroup_shared_offset + m]":"output_values[m]"}${fe>1?"[c]":""} += ${Array.from({length:8/C},(Un,Kr)=>`${C===1?`a_data[${Kr}] * b_dequantized_values[${Kr}]`:`dot(a_data[${Kr}], b_dequantized_values[${Kr}])`}`).join(" + ")};
            }
            word_offset += ${8/C};
          }
        }`,Fn=Vt?`
          zero_point_offset += 4;
          if (zero_point_offset == 32) {
            zero_point_offset = 0;
            zero_point_index++;
            zero_point_word = ${Vt.getByOffset("zero_point_index")};
          }`:"";return se?`
        var<workgroup> workgroup_shared: array<${Ue.type.value}, ${d*o}>;
        ${vr.declareVariables(...lr,Ue)}
        ${vr.mainStart([o,1,1])}
          var a_indices: ${dr.type.indices};
          var block = local_id.x;
          var col = workgroup_id.y;
          var batch = workgroup_id.z;
          ${dr.indicesSet("a_indices","0","batch")};
          // Two zero points are packed into one byte when uniforms.bits is 4.
          for (var c: u32 = 0; c < ${fe}; c++) {
            let col_times_components_plus_c = col * ${fe} + c;
              ${Vt?`
            var zero_point_bytes_per_col: u32 = (${o} + 1) / 2;
            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);
            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;
            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;
            var zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            var zero_point_word: u32 = ${Vt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;`:""}
            var b_indices: ${Wt.type.indices};
            ${Wt.indicesSet("b_indices","0","col_times_components_plus_c")};
            // The scale and zero points are computed per block.
            var scales_index = col_times_components_plus_c * ${o} + block;
            let scale = ${Pr.getByOffset("scales_index")};
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${ar}(${Vt?"(zero_point_word) & 0xFu":8});
            ${Wt.indicesSet("b_indices","1","block")};
            var word_offset: u32 = block * ${t.blockSize/C};
            var workgroup_shared_offset: u32 = block * ${d};
            ${Lr}
          }
          workgroupBarrier();
          var output_indices: ${Ue.type.indices};
          var elements_per_thread: u32 = ${Math.ceil(d/o)};
          ${Ue.indicesSet("output_indices","0","batch")};
          ${Ue.indicesSet("output_indices",or-1,"col")};
          ${Ue.indicesSet("output_indices",or-2,"local_id.x * elements_per_thread")};
          var output_offset = ${Ue.indicesToOffset("output_indices")};
          for (var m: u32 = 0u; m < elements_per_thread; m++) {
            var row = m + local_id.x * elements_per_thread;
            if (row < ${d}) {
              var output_value: ${Ue.type.value} = ${Ue.type.value}(0);
              var workgroup_shared_offset: u32 = row;
              for (var b: u32 = 0u; b < ${o}u; b++) {
                output_value += workgroup_shared[workgroup_shared_offset];
                workgroup_shared_offset += ${d};
              }
              ${Ue.setByOffset("output_offset","output_value")};
              output_offset += ${f/fe};
            }
          }
        }`:`
        ${vr.registerUniforms(Lt).declareVariables(...lr,Ue)}
        ${vr.mainStart()}
          ${vr.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var output_values: array<${Ue.type.value}, ${T}>;
          var output_indices = ${Ue.offsetToIndices("global_idx")};
          var col = ${Ue.indicesGet("output_indices",or-1)};
          var row = ${Ue.indicesGet("output_indices",or-2)};
          var a_indices: ${dr.type.indices} = output_indices;
          // Two zero points are packed into one byte because uniforms.bits <= 4.
          // zero_point_offset is either 0 or 4. It is bit offset within one byte.
          // TODO support zero_point_offset for bits > 4
          ${Vt?`
          var zero_point_abs_offset = col * ${fe} * ((${o} + 1) / 2);
          var zero_point_index: u32 = zero_point_abs_offset / 4;
          var zero_point_word: u32 = ${Vt.getByOffset("zero_point_index")};
          var zero_point_offset: u32 = (zero_point_abs_offset % 4) * 8;`:""}
          var scale_index = col * ${o*fe};
          var b_indices: ${Wt.type.indices};
          for (var c: u32 = 0; c < ${fe}; c++) {
            ${Wt.indicesSet("b_indices","0",`col * ${fe} + c`)};
            var block_offset: u32 = 0;
            for (var block: u32 = 0; block < ${o}; block++) {
              // The scale and zero points are computed per block.
              let scale = ${Pr.getByOffset("scale_index")};
              // The default zero point is 8 for unsigned 4-bit quantization.
              let zero_point = ${ar}(${Vt?"extractBits(zero_point_word, zero_point_offset, 4)":8});
              ${Wt.indicesSet("b_indices","1","block")};
              var word_offset: u32 = block_offset;
              ${Lr}
              scale_index++;
              ${Fn}
              block_offset += uniforms.block_size / ${C};
            }
            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.
            ${Vt?`if (zero_point_offset % 8 > 0) {
                ${Fn}
              }`:""}
            }
            for (var k: u32 = 0u; k < ${T}u; k++) {
              ${Ue.indicesSet("output_indices",or-2,`${T} * row + k`)};
              ${Ue.setByIndices("output_indices","output_values[k]")}
            }
        }`};return{name:se?"BlockwiseMatMulNBits":"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${d};${S};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:et,dataType:S}],name:se?"BlockwiseMatMulNBits":"MatMulNBits",dispatchGroup:se?{x:1,y:Math.ceil(f/fe),z:l}:{x:Math.ceil(Ve/64)},programUniforms:pt}),getShaderSource:ir}},Xu=(e,t)=>{rn(e.inputs,t);let r=e.getMaxComputeWorkgroupSizes(),n=e.getMaxComputeWorkgroupStoragesize();e.compute(Hn(e.inputs,t,r,n))},su=e=>Qt(e)}),g,h,B,re,Be,je,wt,Pt,qt,pr=D(()=>{Yt(),Zt(),nr(),g=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},h=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
            k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${It("uniforms.x_shape",s,t)})) {
              break;
            }
            offset += k * i32(${It("uniforms.x_strides",s,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},B=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${It("uniforms.x_shape",s,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${It("uniforms.x_shape",s,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${It("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},re=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${It("uniforms.x_shape",s,t)})) {
                  k = i32(${It("uniforms.x_shape",s,t)}) - 1;
                }
                offset += k * i32(${It("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Be=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,r)};
                if (k < 0)  {
                  k += i32(${It("uniforms.x_shape",s,t)}]);
                }
                if (k >= i32(${It("uniforms.x_shape",s,t)})) {
                  k -= i32(${It("uniforms.x_shape",s,t)});
                }
                offset += k * i32(${It("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},je=(e,t,r)=>{switch(r.mode){case 0:return h(e,t,r.pads.length);case 1:return B(e,t,r.pads.length);case 2:return re(e,t,r.pads.length);case 3:return Be(e,t,r.pads.length);default:throw new Error("Invalid mode")}},wt=(e,t)=>{let r=Je.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,s=Je.size(r),i=[{type:12,data:s},{type:6,data:t.pads}];t.mode===0&&i.push({type:e[0].dataType,data:t.value}),i.push(...$t(e[0].dims,r));let o=["rank"],d=c=>{let f=Rt("output",e[0].dataType,r.length),w=it("x",e[0].dataType,n.length),l=w.type.value,b=je(f,n.length,t),S=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&S.push({name:"constant_value",type:l}),`
            ${c.registerUniforms(S).declareVariables(w,f)}
            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${f.offsetToIndices("global_idx")};

            var value = ${l}(0);
            ${b}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Je.size(r)/64)},programUniforms:i}),getShaderSource:d}},Pt=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,s=e[0].dims.length,i=new Int32Array(2*s).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let c=0;c<d.length;c++)i[Number(d[c])]=Number(r[c]),i[Number(d[c])+s]=Number(r[c+d.length])}else r.forEach((d,c)=>i[Number(c)]=Number(d));let o=[];return i.forEach(d=>o.push(d)),{mode:t.mode,value:n,pads:o}}else return t},qt=(e,t)=>{g(e.inputs);let r=Pt(e.inputs,t);e.compute(wt(e.inputs,r),{inputs:[0]})}}),Cr,kr,er,Ht,Vr,ur,br,Ur,Yr,Vn,Mn,an,Wr,pn,$s,ks,xd,Cn,us,Td=D(()=>{$(),Yt(),Zt(),nr(),Cr=e=>{if(k.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},kr=(e,t,r)=>{let n=t.format==="NHWC",s=e.dims.slice();n&&s.splice(1,0,s.pop());let i=Object.hasOwnProperty.call(t,"dilations"),o=t.kernelShape.slice(),d=t.strides.slice(),c=i?t.dilations.slice():[],f=t.pads.slice();kn.adjustPoolAttributes(r,s,o,d,c,f);let w=kn.computePoolOutputShape(r,s,d,c,o,f,t.autoPad),l=Object.assign({},t);i?Object.assign(l,{kernelShape:o,strides:d,pads:f,dilations:c,cacheKey:t.cacheKey}):Object.assign(l,{kernelShape:o,strides:d,pads:f,cacheKey:t.cacheKey});let b=w.slice();return b.push(b.splice(1,1)[0]),[l,n?b:w]},er=(e,t)=>{let r=t.format==="NHWC",n=Je.size(e),s=Je.size(t.kernelShape),i=[{type:12,data:n},{type:12,data:s}],o=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],c=t.strides[t.strides.length-1],f=t.pads[t.pads.length/2-1],w=t.pads[t.pads.length-1],l=!!(f+w);i.push({type:12,data:d},{type:12,data:c},{type:12,data:f},{type:12,data:w}),o.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let b=!1;if(t.kernelShape.length===2){let S=t.kernelShape[t.kernelShape.length-2],T=t.strides[t.strides.length-2],C=t.pads[t.pads.length/2-2],H=t.pads[t.pads.length-2];b=!!(C+H),i.push({type:12,data:S},{type:12,data:T},{type:12,data:C},{type:12,data:H}),o.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[i,o,!0,l,b]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=Je.computeStrides(t.kernelShape);i.push({type:12,data:d},{type:12,data:t.pads},{type:12,data:t.strides}),o.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let c=t.pads.reduce((f,w)=>f+w);return[i,o,!!c,!1,!1]}},Ht=(e,t,r,n,s,i,o,d,c,f,w,l)=>{let b=s.format==="NHWC",S=t.type.value,T=Rt("output",t.type.tensor,n);if(s.kernelShape.length<=2){let C="",H="",q="",O=r-(b?2:1);if(w?C=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${O}] = indices[${O}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${O}] < 0 || xIndices[${O}]
                      >= uniforms.x_shape[${O}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`:C=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${O}] = indices[${O}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`,s.kernelShape.length===2){let ne=r-(b?3:2);l?H=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ne}] = indices[${ne}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${ne}] < 0 || xIndices[${ne}] >= uniforms.x_shape[${ne}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:H=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ne}] = indices[${ne}] * uniforms.sh - uniforms.phStart + j;
                `,q=`
              }
            `}return`
            ${e.registerUniforms(c).declareVariables(t,T)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${T.offsetToIndices("global_idx")};
              var xIndices = ${T.offsetToIndices("global_idx")};

              var value = ${S}(${d});
              var pad = 0;
              ${H}
              ${C}
              ${q}
              ${o}

              output[global_idx] = value;
            }`}else{if(b)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let C=s.kernelShape.length,H=s.pads.length,q="";return f?q=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${i}
              }`:q=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${i}
            `,`
            ${e.registerUniforms(c).declareVariables(t,T)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${T.offsetToIndices("global_idx")};
              var xIndices = ${T.offsetToIndices("global_idx")};

              var offsets: array<u32, ${C}>;

              var value = ${S}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${C-1}u; j++) {
                  offsets[j] = offset / ${It("uniforms.kernelStrides","j",C)};
                  offset -= offsets[j] * ${It("uniforms.kernelStrides","j",C)};
                }
                offsets[${C-1}] = offset;

                isPad = false;
                for (var j = ${r-C}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${It("uniforms.strides",`j - ${r-C}u`,C)}
                    + offsets[j - ${r-C}u] - ${It("uniforms.pads","j - 2u",H)};
                  ${q}
              }
              ${o}

              output[global_idx] = value;
            }`}},Vr=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,ur=e=>`${Vr(e)};${e.countIncludePad}`,br=e=>`${Vr(e)};${e.storageOrder};${e.dilations}`,Ur=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Yr=(e,t,r,n)=>{let[s,i]=kr(t,n,r),o=it("x",t.dataType,t.dims.length),d=o.type.value,c="value += x_val;",f="";s.countIncludePad?f+=`value /= ${d}(uniforms.kernelSize);`:f+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[w,l,b,S,T]=er(i,s);w.push(...$t(t.dims,i));let C=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${b};${S};${T}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Je.size(i)/64)},programUniforms:w}),getShaderSource:H=>Ht(H,o,t.dims.length,i.length,s,c,f,0,l,b,S,T)}},Vn=e=>{let t=e.count_include_pad!==0,r=Ur(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:ur(n)}},Mn=(e,t)=>{Cr(e.inputs),e.compute(Yr("AveragePool",e.inputs[0],!1,t))},an={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Wr=e=>{let t=e.format;return{format:t,...an,cacheKey:t}},pn=(e,t)=>{Cr(e.inputs),e.compute(Yr("GlobalAveragePool",e.inputs[0],!0,t))},$s=(e,t,r,n)=>{let[s,i]=kr(t,n,r),o=`
      value = max(x_val, value);
    `,d="",c=it("x",t.dataType,t.dims.length),f=["rank"],[w,l,b,S,T]=er(i,s);return w.push(...$t(t.dims,i)),{name:e,shaderCache:{hint:`${n.cacheKey};${b};${S};${T}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Je.size(i)/64)},programUniforms:w}),getShaderSource:C=>Ht(C,c,t.dims.length,i.length,s,o,d,t.dataType===10?-65504:-1e5,l,b,S,T)}},ks=(e,t)=>{Cr(e.inputs),e.compute($s("MaxPool",e.inputs[0],!1,t))},xd=e=>{let t=e.storage_order,r=e.dilations,n=Ur(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let s={storageOrder:t,dilations:r,...n,cacheKey:""};return{...s,cacheKey:br(s)}},Cn=e=>{let t=e.format;return{format:t,...an,cacheKey:t}},us=(e,t)=>{Cr(e.inputs),e.compute($s("GlobalMaxPool",e.inputs[0],!0,t))}}),Yu,Zu,iu,of=D(()=>{$(),Yt(),nr(),Yu=(e,t,r)=>{let n=e===t,s=e<t&&r<0,i=e>t&&r>0;if(n||s||i)throw new Error("Range these inputs' contents are invalid.")},Zu=(e,t,r,n)=>{let s=Math.abs(Math.ceil((t-e)/r)),i=[s],o=s,d=[{type:12,data:o},{type:n,data:e},{type:n,data:r},...$t(i)],c=f=>{let w=Rt("output",n,i.length),l=w.type.value,b=[{name:"outputSize",type:"u32"},{name:"start",type:l},{name:"delta",type:l}];return`
        ${f.registerUniforms(b).declareVariables(w)}
        ${f.mainStart()}
        ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${l}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:c,getRunData:()=>({outputs:[{dims:i,dataType:n}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:d})}},iu=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),k.webgpu.validateInputContent&&Yu(t,r,n),e.compute(Zu(t,r,n,e.inputs[0].dataType),{inputs:[]})}}),cc,pc,hc,fc,mc,_c,gc,wc,yc,bc,Mc,Cd,vc,xc,Tc,Cc,Ec,Sc,$c,af=D(()=>{Yt(),Zt(),Er(),nr(),cc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},pc=(e,t,r)=>{t.every(s=>s>=0&&s<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((s,i)=>n[s]=e[i]),n},hc=(e,t,r,n,s,i)=>{let[o,d,c]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],f=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach(w=>i.push(w));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(w=>n.push(w)),n.length!==0&&n.length!==f&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");cc(n,t),t.axes.length>0&&pc(n,t.axes,f).forEach((w,l)=>n[l]=w)}if(c>0&&e.length>c&&(e[c].getBigInt64Array().forEach(w=>s.push(Number(w))),s.length!==f||r>=18&&s.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof s<"u"&&n.length>0&&s.length>f)throw new Error("Resize requires only of scales or sizes to be specified")},fc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",mc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",_c=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),s=e.length===0?n:e.slice();return t.length>0?(t.forEach((i,o)=>{n[i]=s[o],n[o+r]=s[t.length+o]}),n):s},gc=(e,t,r,n)=>{let s=[];if(r.length>0)if(n.length>0){if(e.forEach(i=>s.push(i)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((i,o)=>s[i]=r[o])}else r.forEach(i=>s.push(i));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");s=e.map((i,o)=>Math.round(i*t[o]))}return s},wc=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(i=>t[i]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(i=>t[i]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let s=e.slice();return r.axes.length>0?(r.axes.forEach(i=>t[i]=n),r.axes.forEach(i=>s[i]=Math.round(e[i]*t[i]))):(t.fill(n,0,t.length),s.forEach((i,o)=>s[o]=Math.round(i*t[o]))),s},yc=(e,t,r,n,s)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${It("uniforms.scales","i",n)};
        var roi_low = ${It("uniforms.roi","i",s)};
        var roi_hi = ${It("uniforms.roi",`i + ${t.length}`,s)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${It("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${It("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,bc=(e,t,r,n,s,i,o)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${It("uniforms.scales","i",s)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${It("uniforms.roi","i",i)};
          var roi_hi = ${It("uniforms.roi",`i + ${r.length}`,i)};
          var input_shape_i = ${It("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${It("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${o} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,Mc=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${It("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Cd=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",vc=(e,t,r,n,s)=>{let[i,o,d,c]=r.length===2?[-1,0,1,-1]:[0,2,3,1],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${f} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",o,`max(0, min(row, ${r[o]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(col, ${r[d]} - 1))`)};
      ${Cd(e,c,i,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${f} = originalIndices[${o}];
      var col:${f} = originalIndices[${d}];
      ${n?`if (row < 0 || row > (${r[o]} - 1) || col < 0 || col > (${r[d]} - 1)) {
        return ${s};
      }`:""};
      row = max(0, min(row, ${r[o]} - 1));
      col = max(0, min(col, ${r[d]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${c}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${i}])`:"0"};
      var x11: ${f} = getInputValue(batch, channel, row1, col1);
      var x12: ${f} = getInputValue(batch, channel, row1, col2);
      var x21: ${f} = getInputValue(batch, channel, row2, col1);
      var x22: ${f} = getInputValue(batch, channel, row2, col2);
      var dx1: ${f} = abs(row - ${f}(row1));
      var dx2: ${f} = abs(${f}(row2) - row);
      var dy1: ${f} = abs(col - ${f}(col1));
      var dy2: ${f} = abs(${f}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},xc=(e,t,r,n,s,i,o,d,c,f)=>{let w=r.length===2,[l,b]=w?[0,1]:[2,3],S=e.type.value,T=C=>{let H=C===l?"row":"col";return`
      fn ${H}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${S} {
        var output_index = ${t.indicesGet("output_indices",C)};
        var originalIdx: ${S} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[C]},
        ${n[C]}, ${r[C]}, ${i[C]}, ${i[C]} + ${r.length});
        var fractOriginalIdx: ${S} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[C]} - 1))) {
          return ${c};
        }
        var data: array<${S}, 4> = array<${S}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${H}: ${S} = originalIdx + ${S}(i);
          if (${H} < 0 || ${H} >= ${r[C]}) {
            ${f?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${c};`:`${H} = max(0, min(${H}, ${r[C]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",C,`u32(${H})`)};
          data[i + 1] = ${C===l?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${T(l)};
    ${T(b)};
  fn getCubicInterpolationCoefs(s: ${S}) -> array<${S}, 4> {
    var absS = abs(s);
    var coeffs: array<${S}, 4> = array<${S}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${S} = 1.0 - absS;
    var twoMinusAbsS: ${S} = 2.0 - absS;
    var onePlusAbsS: ${S} = 1.0 + absS;
    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};
    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;
    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${S}, 4>, coefs: array<${S}, 4>) -> ${S} {
    var coefsSum: ${S} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${S} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Tc=(e,t,r,n,s)=>{let[i,o,d,c,f]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],w=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${w} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",o,`max(0, min(depth, ${r[o]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(height, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",c,`max(0, min(width, ${r[c]} - 1))`)};
      ${Cd(e,f,i,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${w} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${w} = originalIndices[${o}];
      var height:${w} = originalIndices[${d}];
      var width:${w} = originalIndices[${c}];
      ${n?`if (depth < 0 || depth > (${r[o]} - 1) || height < 0 || height > (${r[d]} - 1) || width < 0 || (width > ${r[c]} - 1)) {
      return ${s};
        }`:""};

    depth = max(0, min(depth, ${r[o]} - 1));
      height = max(0, min(height, ${r[d]} - 1));
      width = max(0, min(width, ${r[c]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${f}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${i}])`:"0"};

      var x111: ${w} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${w} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${w} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${w} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${w} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${w} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${w} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${w} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${w} = abs(depth - ${w}(depth1));
      var dx2: ${w} = abs(${w}(depth2) - depth);
      var dy1: ${w} = abs(height - ${w}(height1));
      var dy2: ${w} = abs(${w}(height2) - height);
      var dz1: ${w} = abs(width - ${w}(width1));
      var dz2: ${w} = abs(${w}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Cc=(e,t,r,n,s,i)=>{let o=e.dims,d=_c(i,t.axes,o.length),c=gc(o,n,s,t.axes),f=n.slice();n.length===0&&(f=o.map((O,ne)=>O===0?1:c[ne]/O),t.keepAspectRatioPolicy!=="stretch"&&(c=wc(o,f,t)));let w=Rt("output",e.dataType,c.length),l=it("input",e.dataType,o.length),b=Je.size(c),S=o.length===c.length&&o.every((O,ne)=>O===c[ne]),T=t.coordinateTransformMode==="tf_crop_and_resize",C=t.extrapolationValue,H=l.type.value,q=O=>`
      ${S?"":`
      ${fc(t.coordinateTransformMode,H)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${Mc(l,o)};
              ${mc(t.nearestMode,r,H)};
              ${bc(l,w,o,c,f.length,d.length,T)};
              `;case"linear":return`
              ${yc(w,o,c,f.length,d.length)};
              ${(()=>{if(o.length===2||o.length===4)return`${vc(l,w,o,T,C)}`;if(o.length===3||o.length===5)return`${Tc(l,w,o,T,C)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(o.length===2||o.length===4)return`${xc(l,w,o,c,f,d,t.cubicCoeffA,T,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${O.registerUniform("output_size","u32").registerUniform("scales","f32",f.length).registerUniform("roi","f32",d.length).declareVariables(l,w)}
      ${O.mainStart()}
        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${S?"output[global_idx] = input[global_idx];":`
        let output_indices = ${w.offsetToIndices("global_idx")};
        var input_indices: ${l.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${l.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${o.length===2||o.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${f.length>0?f:""}|${s.length>0?s:""}|${d.length>0?d:""}|${S}|${o}`,inputDependencies:["rank"]},getShaderSource:q,getRunData:()=>({outputs:[{dims:c,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:12,data:b},{type:1,data:f},{type:1,data:d},...$t(o,c)]})}},Ec=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Sc=(e,t)=>{let r=[],n=[],s=[],i=Ec(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");hc(e.inputs,t,i,r,n,s),e.compute(Cc(e.inputs[0],t,i,r,n,s),{inputs:[0]})},$c=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,s=e.cubicCoeffA,i=e.excludeOutside!==0,o=e.extrapolationValue,d=e.keepAspectRatioPolicy,c=e.mode,f=e.nearestMode===""?"simple":e.nearestMode;return Qt({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:s,excludeOutside:i,extrapolationValue:o,keepAspectRatioPolicy:d,mode:c,nearestMode:f})}}),kc,Pc,Ac,lf=D(()=>{Yt(),Zt(),Er(),nr(),kc=(e,t)=>{let[r,n,s,i]=e,{numHeads:o,rotaryEmbeddingDim:d}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!Je.areEqual(n.dims,[])&&!Je.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(!Je.areEqual(s.dims,i.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(d>0&&o===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let c=r.dims[0],f=r.dims[r.dims.length-2],w=s.dims[0],l=Je.sizeFromDimension(r.dims,1)/f,b=d===0?s.dims[1]*2:l/o;if(d>b)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(c!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(f!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(b/2!==s.dims[1]&&d/2!==s.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${s.dims[1]}`);if(f>w)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Pc=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:s,scale:i}=t,o=e[0].dims[0],d=Je.sizeFromDimension(e[0].dims,1),c=e[0].dims[e[0].dims.length-2],f=d/c,w=e[2].dims[1],l=s===0?w*2:f/n,b=new Array(o,c,f/l,l-w),S=Je.computeStrides(b),T=[{type:1,data:i},{type:12,data:b},{type:12,data:S},...e[0].dims.length===3?new Array({type:12,data:[d,f,l,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[d,l,c*l,1]}):[],...$t(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],C=H=>{let q=it("input",e[0].dataType,e[0].dims.length),O=it("position_ids",e[1].dataType,e[1].dims.length),ne=it("cos_cache",e[2].dataType,e[2].dims.length),se=it("sin_cache",e[3].dataType,e[3].dims.length),fe=Rt("output",e[0].dataType,e[0].dims.length);return H.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:b.length},{name:"global_strides",type:"u32",length:S.length},{name:"input_output_strides",type:"u32",length:S.length}]),`
        ${H.declareVariables(q,O,ne,se,fe)}

        ${H.mainStart(dn)}
          let half_rotary_emb_dim = uniforms.${ne.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${H.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${O.broadcastedIndicesToOffset("bsnh.xy",Rt("",O.type.tensor,2))};
            let position_id =
                u32(${O.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${q.getByOffset("i")} * ${ne.get("position_id","bsnh[3]")} -
                ${q.getByOffset("j")} * ${se.get("position_id","bsnh[3]")};
            ${fe.setByOffset("i","re")}
            let im = ${q.getByOffset("i")} * ${se.get("position_id","bsnh[3]")} +
                ${q.getByOffset("j")} * ${ne.get("position_id","bsnh[3]")};
            ${fe.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${fe.setByOffset("k",q.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Qt({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:C,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Je.size(b)/dn)},programUniforms:T})}},Ac=(e,t)=>{kc(e.inputs,t),e.compute(Pc(e.inputs,t))}}),Ic,Fc,Oc,uf=D(()=>{Yt(),Zt(),nr(),Ic=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let s=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let o=e[3];if(o.dims.length!==1)throw new Error("Beta must be 1D");if(o.dims[o.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let o=e[4];if(o.dims.length!==1)throw new Error("Bias must be 1D");if(o.dims[o.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},Fc=(e,t,r,n)=>{let s=t.simplified,i=e[0].dims,o=Je.size(i),d=i,c=o,f=i.slice(-1)[0],w=n?i.slice(0,-1).concat(1):[],l=!s&&e.length>3,b=e.length>4,S=n&&r>1,T=n&&r>2,C=r>3,H=64,q=mr(f),O=[{type:12,data:c},{type:12,data:q},{type:12,data:f},{type:1,data:t.epsilon}],ne=fe=>{let et=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],Ve=[it("x",e[0].dataType,e[0].dims,q),it("skip",e[1].dataType,e[1].dims,q),it("gamma",e[2].dataType,e[2].dims,q)];l&&Ve.push(it("beta",e[3].dataType,e[3].dims,q)),b&&Ve.push(it("bias",e[4].dataType,e[4].dims,q)),Ve.push(Rt("output",e[0].dataType,d,q)),S&&Ve.push(Rt("mean_output",1,w)),T&&Ve.push(Rt("inv_std_output",1,w)),C&&Ve.push(Rt("input_skip_bias_sum",e[0].dataType,d,q));let pt=wr(e[0].dataType),Nt=wr(1,q);return`

      ${fe.registerUniforms(et).declareVariables(...Ve)}
      var<workgroup> sum_shared : array<${Nt}, ${H}>;
      var<workgroup> sum_squared_shared : array<${Nt}, ${H}>;

      ${fe.mainStart([H,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${H};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${H};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${H-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${b?"bias[offset1d + i]":pt+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${C?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Br(pt,q,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${H};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${cn("sum",q)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${cn("square_sum",q)} / f32(uniforms.hidden_size) ${s?"":"- mean * mean"} + uniforms.epsilon);
        ${S?"mean_output[global_idx] = mean;":""}
        ${T?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${s?"":`- ${pt}(mean)`}) *
            ${pt}(inv_std_dev) * gamma[offset1d + i]
            ${l?"+ beta[offset1d + i]":""};
        }
      }`},se=[{dims:d,dataType:e[0].dataType}];return r>1&&se.push({dims:w,dataType:1}),r>2&&se.push({dims:w,dataType:1}),r>3&&se.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${q};${S};${T};${C}`,inputDependencies:e.map((fe,et)=>"type")},getShaderSource:ne,getRunData:()=>({outputs:se,dispatchGroup:{x:Math.ceil(c/f)},programUniforms:O})}},Oc=(e,t)=>{Ic(e.inputs);let r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(Fc(e.inputs,t,e.outputCount,!1),{outputs:r})}}),zc,ou,Dc,Ed,Bc,Lc,Rc,Nc,df=D(()=>{Yt(),Zt(),Er(),nr(),zc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},ou=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Dc=(e,t)=>{if(e.length>1){let r=ou(e,1),n=ou(e,2),s=ou(e,3);return s.length===0&&(s=[...Array(e[0].dims.length).keys()]),Qt({starts:r,ends:n,axes:s})}else return t},Ed=(e,t,r,n,s)=>{let i=e;return e<0&&(i+=r[n[t]]),s[t]<0?Math.max(0,Math.min(i,r[n[t]]-1)):Math.max(0,Math.min(i,r[n[t]]))},Bc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${It("uniforms.input_shape","i",r.length)};
            let steps_i = ${It("uniforms.steps","i",r.length)};
            let signs_i = ${It("uniforms.signs","i",r.length)};
            let starts_i = ${It("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Lc=(e,t)=>{let r=e[0].dims,n=Je.size(r),s=t.axes.length>0?Je.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],i=ou(e,4);i.forEach(q=>q!==0||(()=>{throw new Error("step cannot be 0")})),i.length===0&&(i=Array(s.length).fill(1));let o=t.starts.map((q,O)=>Ed(q,O,r,s,i)),d=t.ends.map((q,O)=>Ed(q,O,r,s,i));if(s.length!==o.length||s.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==r.length)for(let q=0;q<r.length;++q)s.includes(q)||(o.splice(q,0,0),d.splice(q,0,r[q]),i.splice(q,0,1));let c=i.map(q=>Math.sign(q));i.forEach((q,O,ne)=>{if(q<0){let se=(d[O]-o[O])/q,fe=o[O],et=fe+se*i[O];o[O]=et,d[O]=fe,ne[O]=-q}});let f=r.slice(0);s.forEach((q,O)=>{f[q]=Math.ceil((d[q]-o[q])/i[q])});let w={dims:f,dataType:e[0].dataType},l=Rt("output",e[0].dataType,f.length),b=it("input",e[0].dataType,e[0].dims.length),S=Je.size(f),T=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:o.length},{name:"signs",type:"i32",length:c.length},{name:"steps",type:"u32",length:i.length}],C=[{type:12,data:S},{type:12,data:o},{type:6,data:c},{type:12,data:i},...$t(e[0].dims,f)],H=q=>`
      ${q.registerUniforms(T).declareVariables(b,l)}
        ${Bc(b,l,r)}
        ${q.mainStart()}
          ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${l.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${l.setByOffset("global_idx",b.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${c.length}_${o.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:H,getRunData:()=>({outputs:[w],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:C})}},Rc=(e,t)=>{zc(e.inputs,t);let r=Dc(e.inputs,t);e.compute(Lc(e.inputs,r),{inputs:[0]})},Nc=e=>{let t=e.starts,r=e.ends,n=e.axes;return Qt({starts:t,ends:r,axes:n})}}),jc,Vc,Uc,Wc,cf=D(()=>{Yt(),Zt(),Er(),nr(),jc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Vc=(e,t)=>{let r=e.dims,n=Je.size(r),s=64,i=t.axis;if(i<0&&(i=r.length+i),i<r.length-1)throw new Error("softmax only supports last axis for now.");let o=r[i],d=n/o,c=mr(o),f=o/c,w=(H,q)=>q===4?`max(max(${H}.x, ${H}.y), max(${H}.z, ${H}.w))`:q===2?`max(${H}.x, ${H}.y)`:q===3?`max(max(${H}.x, ${H}.y), ${H}.z)`:H,l=it("x",e.dataType,e.dims,c),b=Rt("result",e.dataType,e.dims,c),S=l.type.value,T=wr(e.dataType)==="f32"?`var threadMax = ${S}(-3.402823e+38f);`:`var threadMax = ${S}(-65504.0h);`,C=H=>`
      var<workgroup> rowMaxShared : ${S};
      var<workgroup> rowSumShared : ${S};
      var<workgroup> threadShared : array<${S}, ${s}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${S} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${S}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${H.registerUniform("packedCols","i32").declareVariables(l,b)}
      ${H.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${s};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${T}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${S}(${w("threadShared[0]",c)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${S}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${S}(${cn("threadShared[0]",c)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${c}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:6,data:f}]}),getShaderSource:C}},Uc=(e,t)=>{jc(e.inputs),e.compute(Vc(e.inputs[0],t))},Wc=e=>Qt({axis:e.axis})}),Gc,qc,Hc,Kc,Xc,Qc,Yc,pf=D(()=>{Yt(),Zt(),Er(),nr(),Gc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},qc=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(s=>r.push(Number(s))),n=r.length),Qt({numOutputs:n,axis:t.axis,splitSizes:r})},Hc=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${It("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Kc=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let s=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(s):n===0?r.push(`if (output_number == ${n}u) { ${s} }`):n===t-1?r.push(`else { ${s} }`):r.push(`else if (output_number == ${n}) { ${s} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Xc=(e,t)=>{let r=e[0].dims,n=Je.size(r),s=e[0].dataType,i=Je.normalizeAxis(t.axis,r.length),o=new Array(t.numOutputs),d=it("input",s,r.length),c=new Array(t.numOutputs),f=[],w=[],l=0,b=[{type:12,data:n}];for(let T=0;T<t.numOutputs;T++){l+=t.splitSizes[T],c[T]=l;let C=r.slice();C[t.axis]=t.splitSizes[T],w.push(C),o[T]=Rt(`output${T}`,s,C.length),f.push({dims:w[T],dataType:e[0].dataType})}b.push({type:12,data:c},...$t(r,...w));let S=T=>`
  ${T.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",c.length).declareVariables(d,...o)}
  ${Hc(c.length)}
  ${Kc(o)}

  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",i)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${It("uniforms.size_in_split_axis","output_number - 1u",c.length)};
      ${d.indicesSet("indices",i,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:S,getRunData:()=>({outputs:f,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},Qc=(e,t)=>{Gc(e.inputs);let r=e.inputs.length===1?t:qc(e.inputs,t);e.compute(Xc(e.inputs,r),{inputs:[0]})},Yc=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Qt({axis:t,numOutputs:n,splitSizes:r})}}),Zc,Jc,ep,hf=D(()=>{Yt(),Zt(),nr(),Zc=(e,t,r,n,s)=>{let i=Rt("output_data",s,r.length,4),o=it("a_data",t[1].dataType,t[1].dims.length,4),d=it("b_data",t[2].dataType,t[2].dims.length,4),c=it("c_data",t[0].dataType,t[0].dims.length,4),f,w=(l,b,S)=>`select(${b}, ${l}, ${S})`;if(!n)f=i.setByOffset("global_idx",w(o.getByOffset("global_idx"),d.getByOffset("global_idx"),c.getByOffset("global_idx")));else{let l=(b,S,T="")=>{let C=`a_data[index_a${S}][component_a${S}]`,H=`b_data[index_b${S}][component_b${S}]`,q=`bool(c_data[index_c${S}] & (0xffu << (component_c${S} * 8)))`;return`
            let output_indices${S} = ${i.offsetToIndices(`global_idx * 4u + ${S}u`)};
            let offset_a${S} = ${o.broadcastedIndicesToOffset(`output_indices${S}`,i)};
            let offset_b${S} = ${d.broadcastedIndicesToOffset(`output_indices${S}`,i)};
            let offset_c${S} = ${c.broadcastedIndicesToOffset(`output_indices${S}`,i)};
            let index_a${S} = offset_a${S} / 4u;
            let index_b${S} = offset_b${S} / 4u;
            let index_c${S} = offset_c${S} / 4u;
            let component_a${S} = offset_a${S} % 4u;
            let component_b${S} = offset_b${S} % 4u;
            let component_c${S} = offset_c${S} % 4u;
            ${b}[${S}] = ${T}(${w(C,H,q)});
          `};s===9?f=`
            var data = vec4<u32>(0);
            ${l("data",0,"u32")}
            ${l("data",1,"u32")}
            ${l("data",2,"u32")}
            ${l("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:f=`
            ${l("output_data[global_idx]",0)}
            ${l("output_data[global_idx]",1)}
            ${l("output_data[global_idx]",2)}
            ${l("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(c,o,d,i)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${f}
      }`},Jc=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,s=e[1].dataType,i=!(Je.areEqual(t,r)&&Je.areEqual(r,n)),o=t,d=Je.size(t);if(i){let f=zr.calcShape(zr.calcShape(t,r,!1),n,!1);if(!f)throw new Error("Can't perform where op on the given tensors");o=f,d=Je.size(o)}let c=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:f=>Zc(f,e,o,i,s),getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:c},...$t(n,t,r,o)]})}},ep=e=>{e.compute(Jc(e.inputs))}}),tp,ff=D(()=>{pu(),Gs(),fa(),hu(),Ha(),fu(),mu(),xl(),wd(),Mu(),vu(),Eu(),yd(),$u(),ku(),Pu(),bd(),Md(),vd(),tn(),to(),Qu(),Du(),pr(),Td(),of(),Ci(),af(),lf(),uf(),df(),cf(),pf(),Nu(),is(),ji(),hf(),tp=new Map([["Abs",[wa]],["Acos",[ya]],["Acosh",[$i]],["Add",[Qa]],["ArgMax",[sa,Ws]],["ArgMin",[na,Ws]],["Asin",[ba]],["Asinh",[Ma]],["Atan",[ki]],["Atanh",[va]],["Attention",[ua]],["AveragePool",[Mn,Vn]],["BatchNormalization",[ha]],["BiasAdd",[Si]],["BiasSplitGelu",[qa]],["Cast",[qs,xa]],["Ceil",[Ea]],["Clip",[Ca]],["Concat",[Ln,al]],["Conv",[Ts,no]],["ConvTranspose",[bu,$l]],["Cos",[Pi]],["Cosh",[Sa]],["CumSum",[po,Al]],["DepthToSpace",[fo,Ol]],["Div",[Ya]],["Einsum",[Dl,Bl]],["Elu",[$a,as]],["Equal",[Ui]],["Erf",[ka]],["Exp",[Ai]],["Expand",[go]],["FastGelu",[Nl]],["Floor",[Pa]],["FusedConv",[Ts,no]],["Gather",[Wl,Ul]],["GatherElements",[Kl,Hl]],["Gelu",[Aa]],["Gemm",[Au,Yl]],["GlobalAveragePool",[pn,Wr]],["GlobalMaxPool",[us,Cn]],["Greater",[tl]],["GreaterOrEqual",[nl]],["GroupQueryAttention",[Wu,Vu]],["HardSigmoid",[Oi,Da]],["InstanceNormalization",[Ku]],["LayerNormalization",[Qr]],["LeakyRelu",[Ia,as]],["Less",[rl]],["LessOrEqual",[Wi]],["Log",[Ni]],["MatMul",[bl]],["MatMulNBits",[Xu,su]],["MaxPool",[ks,xd]],["Mul",[Za]],["MultiHeadAttention",[zu,Fu]],["Neg",[Fa]],["Not",[Ii]],["Pad",[qt]],["Pow",[Ja]],["QuickGelu",[Wa,as]],["Range",[iu]],["Reciprocal",[Oa]],["ReduceMin",[xi]],["ReduceMean",[Qo]],["ReduceMax",[Jo]],["ReduceSum",[ta]],["ReduceProd",[ea]],["ReduceL1",[Yo]],["ReduceL2",[vi]],["ReduceLogSum",[ra]],["ReduceLogSumExp",[Zo]],["ReduceSumSquare",[Ti]],["Relu",[Fi]],["Resize",[Sc,$c]],["RotaryEmbedding",[Ac]],["Sigmoid",[za]],["Sin",[Ba]],["Sinh",[La]],["Slice",[Rc,Nc]],["SkipLayerNormalization",[Oc]],["Split",[Qc,Yc]],["Sqrt",[zi]],["Softmax",[Uc,Wc]],["Sub",[el]],["Tan",[Ra]],["Tanh",[Bi]],["ThresholdedRelu",[ja,as]],["Tile",[Ru]],["Transpose",[Eo,hi]],["Where",[ep]]])}),rp,mf=D(()=>{$(),fn(),nr(),rp=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,r,n,s){Re(e.programInfo.name);let i=this.backend.device,o=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let d=[];for(let f of t)d.push({binding:d.length,resource:{buffer:f.buffer}});for(let f of r)d.push({binding:d.length,resource:{buffer:f.buffer}});s&&d.push({binding:d.length,resource:s});let c=i.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:d,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let f={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:c,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(f)}o.setPipeline(e.computePipeline),o.setBindGroup(0,c),o.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Ne(e.programInfo.name)}dispose(){}build(e,t){Re(e.name);let r=this.backend.device,n=[];r.features.has("shader-f16")&&n.push("enable f16;");let s=xo(t,this.backend.device.limits),i=e.getShaderSource(s),o=`${n.join(`
`)}
${s.additionalImplementations}
${i}`,d=r.createShaderModule({code:o,label:e.name});Dr("verbose",()=>`[WebGPU] ${e.name} shader code: ${o}`);let c=r.createComputePipeline({compute:{module:d,entryPoint:"main"},layout:"auto",label:e.name});return Ne(e.name),{programInfo:e,computePipeline:c,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,r=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=s&&r<=s&&n<=s)return[t,r,n];let i=t*r*n,o=Math.ceil(Math.sqrt(i));if(o>s){if(o=Math.ceil(Math.cbrt(i)),o>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[o,o,o]}else return[o,o,1]}}}),np,sp,ip,op,_f=D(()=>{$(),Yt(),fn(),_(),rr(),ff(),mf(),np=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let s=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${s}`);break}case"rank":{let i=e[n].dims.length;r.push(`${s};${i}`);break}case"dims":{let i=e[n].dims.join(",");r.push(`${s};${i}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},sp=(e,t,r)=>{let n=e.name;return e.shaderCache?.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${np(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,n},ip=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},op=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r};t.features.has("chromium-experimental-timestamp-query-inside-passes")?r.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&r.push("timestamp-query"),t.features.has("shader-f16")&&r.push("shader-f16"),this.device=await t.requestDevice(n),this.adapterInfo=new ip(t.info||await t.requestAdapterInfo()),this.gpuDataManager=cr(this),this.programManager=new rp(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ns(e.logLevel,!!e.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Re(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{let t=new BigUint64Array(e.getMappedRange()),r=this.pendingQueries.get(e);for(let n=0;n<t.length/2;n++){let s=r[n],i=s.kernelId,o=this.kernels.get(i),d=o.kernelType,c=o.kernelName,f=s.programName,w=s.inputTensorViews,l=s.outputTensorViews,b=t[n*2],S=t[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=b);let T=Number(b-this.queryTimeBase),C=Number(S-this.queryTimeBase);if(!Number.isSafeInteger(T)||!Number.isSafeInteger(C))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:w.map(H=>({dims:H.dims,dataType:xn(H.dataType)})),outputsMetadata:l.map(H=>({dims:H.dims,dataType:xn(H.dataType)})),kernelId:i,kernelType:d,kernelName:c,programName:f,startTime:T,endTime:C});else{let H="";w.forEach((O,ne)=>{H+=`input[${ne}]: [${O.dims}] | ${xn(O.dataType)}, `});let q="";l.forEach((O,ne)=>{q+=`output[${ne}]: [${O.dims}] | ${xn(O.dataType)}, `}),console.log(`[profiling] kernel "${i}|${d}|${c}|${f}" ${H}${q}execution time: ${C-T} ns`)}$e("GPU",`${f}::${b}::${S}`)}e.unmap(),this.pendingQueries.delete(e)}),Ne()}run(e,t,r,n,s,i){Re(e.name);let o=[];for(let O=0;O<t.length;++O){let ne=t[O].data;if(ne===0)continue;let se=this.gpuDataManager.get(ne);if(!se)throw new Error(`no GPU data for input: ${ne}`);o.push(se)}let{outputs:d,dispatchGroup:c,programUniforms:f}=e.getRunData(t),w=r.length===0?d.map((O,ne)=>ne):r;if(w.length!==d.length)throw new Error(`Output size ${w.length} must be equal to ${d.length}.`);let l=[],b=[];for(let O=0;O<d.length;++O){if(!Number.isInteger(w[O])||w[O]<-3||w[O]>=i)throw new Error(`Invalid output index: ${w[O]}`);if(w[O]===-3)continue;let ne=w[O]===-1,se=w[O]===-2,fe=ne||se?s(d[O].dataType,d[O].dims):n(w[O],d[O].dataType,d[O].dims);if(l.push(fe),fe.data===0)continue;let et=this.gpuDataManager.get(fe.data);if(!et)throw new Error(`no GPU data for output: ${fe.data}`);if(ne&&this.temporaryData.push(et),se){let Ve=this.kernelPersistentData.get(this.currentKernelId);Ve||(Ve=[],this.kernelPersistentData.set(this.currentKernelId,Ve)),Ve.push(et)}b.push(et)}if(o.length!==t.length||b.length!==l.length){if(b.length===0)return Ne(e.name),l;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let S;if(f){let O=0,ne=[];f.forEach(Ve=>{let pt=typeof Ve.data=="number"?[Ve.data]:Ve.data;if(pt.length===0)return;let Nt=Ve.type===10?2:4,At,hr;Ve.type===10?(hr=pt.length>4?16:pt.length>2?8:pt.length*Nt,At=pt.length>4?16:Nt*pt.length):(hr=pt.length<=2?pt.length*Nt:16,At=16),O=Math.ceil(O/hr)*hr,ne.push(O);let ir=Ve.type===10?8:4;O+=pt.length>4?Math.ceil(pt.length/ir)*At:pt.length*Nt});let se=16;O=Math.ceil(O/se)*se;let fe=new ArrayBuffer(O);f.forEach((Ve,pt)=>{let Nt=ne[pt],At=typeof Ve.data=="number"?[Ve.data]:Ve.data;if(Ve.type===6)new Int32Array(fe,Nt,At.length).set(At);else if(Ve.type===12)new Uint32Array(fe,Nt,At.length).set(At);else if(Ve.type===10)new Uint16Array(fe,Nt,At.length).set(At);else if(Ve.type===1)new Float32Array(fe,Nt,At.length).set(At);else throw new Error(`Unsupported uniform type: ${xn(Ve.type)}`)});let et=this.gpuDataManager.create(O,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(et.buffer,0,fe,0,O),this.gpuDataManager.release(et.id),S={offset:0,size:O,buffer:et.buffer}}let T=this.programManager.normalizeDispatchGroupSize(c),C=T[1]===1&&T[2]===1,H=sp(e,t,C),q=this.programManager.getArtifact(H);if(q||(q=this.programManager.build(e,T),this.programManager.setArtifact(H,q),Dr("info",()=>`[artifact] key: ${H}, programName: ${e.name}`)),f&&q.uniformVariablesInfo){if(f.length!==q.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${q.uniformVariablesInfo.length}, got ${f.length} in program "${q.programInfo.name}".`);for(let O=0;O<f.length;O++){let ne=f[O],se=ne.type,fe=typeof ne.data=="number"?1:ne.data.length,[et,Ve]=q.uniformVariablesInfo[O];if(se!==et||fe!==Ve)throw new Error(`Uniform variable ${O} mismatch: expect type ${et} with size ${Ve}, got type ${se} with size ${fe} in program "${q.programInfo.name}".`)}}if(Dr("info",()=>`[ProgramManager] run "${e.name}" (key=${H}) with ${T[0]}x${T[1]}x${T[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let O={kernelId:this.currentKernelId,programName:q.programInfo.name,inputTensorViews:t,outputTensorViews:l};this.pendingKernels.push(O),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(O)}return this.programManager.run(q,o,b,T,S),Ne(e.name),l}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,r,n){let s=tp.get(e);if(!s)throw new Error(`kernel not implemented: ${e}`);let i={kernelType:e,kernelName:n,kernelEntry:s[0],attributes:[s[1],r]};this.kernels.set(t,i)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let r of t)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,r){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let s=n.kernelType,i=n.kernelName,o=n.kernelEntry,d=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${i}" is not allowed to be called recursively`);this.currentKernelId=e,d[0]&&(d[1]=d[0](d[1]),d[0]=void 0),Dr("info",()=>`[WebGPU] Start to run kernel "[${s}] ${i}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),o(t,d[1]),0}catch(f){return r.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${i}" failed. ${f}`)),1}finally{c&&r.push(this.device.popErrorScope().then(f=>f?`GPU validation error for kernel "[${s}] ${i}": ${f.message}`:null));for(let f of this.temporaryData)this.gpuDataManager.release(f.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,r,n){let s=this.sessionExternalDataMapping.get(e);s||(s=new Map,this.sessionExternalDataMapping.set(e,s));let i=s.get(t),o=this.gpuDataManager.registerExternalBuffer(r,n,i?.[1]);return s.set(t,[o,r]),o}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[1])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,r){return async()=>{let n=await Ct(this,e,t);return ye(n.buffer,r)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Dr("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Dr("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Dr("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),r=e.length;this.pendingKernels=[];for(let n=0;n<r;n++){let s=this.getComputePassEncoder(),i=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(i.computePipeline),s.setBindGroup(0,i.bindGroup),s.dispatchWorkgroups(...i.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),ap={};E(ap,{init:()=>up});var Ju,lp,up,gf=D(()=>{Yt(),_f(),fn(),Zt(),Ju=class Xh{constructor(t,r,n,s){this.module=t,this.dataType=r,this.data=n,this.dims=s}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=Je.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=Je.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=Je.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(Je.size(t)!==Je.size(this.dims))throw new Error("Invalid new shape");return new Xh(this.module,this.dataType,this.data,t)}},lp=class{constructor(e,t,r){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let n=e.HEAPU32,s=r>>>2;this.opKernelContext=n[s++];let i=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let o=[];for(let d=0;d<i;d++){let c=n[s++],f=n[s++],w=n[s++],l=[];for(let b=0;b<w;b++)l.push(n[s++]);o.push(new Ju(e,c,f,l))}this.inputs=o}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(e,t){let r=t?.inputs?.map(o=>typeof o=="number"?this.inputs[o]:o)??this.inputs,n=t?.outputs??[],s=(o,d,c)=>new Ju(this.module,d,this.output(o,c),c),i=(o,d)=>{let c=Sn(o);if(!c)throw new Error(`Unsupported data type: ${o}`);let f=c*Je.size(d),w=f>0?this.backend.gpuDataManager.create(f).id:0;return new Ju(this.module,o,w,d)};return this.backend.run(e,r,n,s,i,this.outputCount)}output(e,t){let r=this.module.stackSave();try{let n=this.module.stackAlloc((1+t.length)*4),s=n>>2;this.module.HEAPU32[s++]=t.length;for(let i=0;i<t.length;i++)this.module.HEAPU32[s++]=t[i];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},up=async(e,t,r,n)=>{let s=t.jsepInit;if(!s)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let i=new op;await i.initialize(r,n),s("webgpu",[i,o=>i.alloc(o),o=>i.free(o),(o,d,c,f=!1)=>{if(f)Dr("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${o}, dst=${d}, size=${c}`),i.memcpy(o,d);else{Dr("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${o}, gpuDataId=${d}, size=${c}`);let w=t.HEAPU8.subarray(o>>>0,(o>>>0)+c);i.upload(d,w)}},async(o,d,c)=>{Dr("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${d}, size=${c}`),await i.download(o,()=>t.HEAPU8.subarray(d>>>0,(d>>>0)+c))},(o,d,c)=>i.createKernel(o,d,c,t.UTF8ToString(t._JsepGetNodeName(d))),o=>i.releaseKernel(o),(o,d,c,f)=>{Dr("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${c}, kernel=${o}, contextDataOffset=${d}`);let w=new lp(t,i,d);return i.computeKernel(o,w,f)},()=>i.captureBegin(),()=>i.captureEnd(),()=>i.replay()])}else s("webnn")}}),dp,Sd,$d,Ps,cp,ed,kd,Pd,Ad,Id,Fd,Od,pp=D(()=>{Ls(),Rs(),Yt(),un(),Dn(),gs(),dp=(e,t)=>{jr()._OrtInit(e,t)!==0&&Or("Can't initialize onnxruntime.")},Sd=async e=>{dp(e.wasm.numThreads,Gn(e.logLevel))},$d=async(e,t)=>{{let r=(gf(),P(ap)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let s=e.webgpu.powerPreference;if(s!==void 0&&s!=="low-power"&&s!=="high-performance")throw new Error(`Invalid powerPreference setting: "${s}"`);let i=e.webgpu.forceFallbackAdapter;if(i!==void 0&&typeof i!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${i}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:s,forceFallbackAdapter:i}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await r("webgpu",jr(),e,n)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",jr(),e)}}},Ps=new Map,cp=e=>{let t=jr(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&Or("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},ed=e=>{let t=jr(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},kd=async(e,t)=>{let r,n,s=jr();Array.isArray(e)?[r,n]=e:e.buffer===s.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=ed(e);let i=0,o=0,d=0,c=[],f=[],w=[];try{if([o,c]=Bn(t),t?.externalData&&s.mountExternalData){let O=[];for(let ne of t.externalData){let se=typeof ne=="string"?ne:ne.path;O.push(qn(typeof ne=="string"?ne:ne.data).then(fe=>{s.mountExternalData(se,fe)}))}await Promise.all(O)}for(let O of t?.executionProviders??[])if((typeof O=="string"?O:O.name)==="webnn"){if(s.currentContext)throw new Error("WebNN execution provider is already set.");if(typeof O!="string"){let ne=O,se=ne?.context,fe=ne?.gpuDevice,et=ne?.deviceType,Ve=ne?.numThreads,pt=ne?.powerPreference;se?s.currentContext=se:fe?s.currentContext=await navigator.ml.createContext(fe):s.currentContext=await navigator.ml.createContext({deviceType:et,numThreads:Ve,powerPreference:pt})}else s.currentContext=await navigator.ml.createContext();break}i=await s._OrtCreateSession(r,n,o),i===0&&Or("Can't create a session."),s.currentContext&&(s.currentContext=void 0);let[l,b]=cp(i),S=!!t?.enableGraphCapture,T=[],C=[],H=[];for(let O=0;O<l;O++){let ne=s._OrtGetInputName(i,O);ne===0&&Or("Can't get an input name."),f.push(ne),T.push(s.UTF8ToString(ne))}for(let O=0;O<b;O++){let ne=s._OrtGetOutputName(i,O);ne===0&&Or("Can't get an output name."),w.push(ne);let se=s.UTF8ToString(ne);C.push(se);{if(S&&t?.preferredOutputLocation===void 0){H.push("gpu-buffer");continue}let fe=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[se]??"cpu";if(fe!=="cpu"&&fe!=="cpu-pinned"&&fe!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${fe}.`);if(S&&fe!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${fe}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);H.push(fe)}}let q=null;return H.some(O=>O==="gpu-buffer")&&(d=s._OrtCreateBinding(i),d===0&&Or("Can't create IO binding."),q={handle:d,outputPreferredLocations:H,outputPreferredLocationsEncoded:H.map(O=>ts(O))}),Ps.set(i,[i,f,w,q,S,!1]),[i,T,C]}catch(l){throw f.forEach(b=>s._OrtFree(b)),w.forEach(b=>s._OrtFree(b)),d!==0&&s._OrtReleaseBinding(d),i!==0&&s._OrtReleaseSession(i),l}finally{s._free(r),o!==0&&s._OrtReleaseSessionOptions(o),c.forEach(l=>s._free(l)),s.unmountExternalData?.()}},Pd=e=>{let t=jr(),r=Ps.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,s,i,o,d]=r;o&&(d&&t._OrtClearBoundOutputs(o.handle),t._OrtReleaseBinding(o.handle)),t.jsepOnReleaseSession?.(e),s.forEach(c=>t._OrtFree(c)),i.forEach(c=>t._OrtFree(c)),t._OrtReleaseSession(n),Ps.delete(e)},Ad=(e,t,r,n,s,i=!1)=>{if(!e){t.push(0);return}let o=jr(),d=e[0],c=e[1],f=e[3],w,l;if(d==="string"&&f==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(i&&f!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if(f==="gpu-buffer"){let T=e[2].gpuBuffer,C=Sn(Jn(d));l=c.reduce((q,O)=>q*O,1)*C;let H=o.jsepRegisterBuffer;if(!H)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');w=H(n,s,T,l)}else{let T=e[2];if(Array.isArray(T)){l=4*T.length,w=o._malloc(l),r.push(w);let C=w/4;for(let H=0;H<T.length;H++){if(typeof T[H]!="string")throw new TypeError(`tensor data at index ${H} is not a string`);o.HEAPU32[C++]=qr(T[H],r)}}else l=T.byteLength,w=o._malloc(l),r.push(w),o.HEAPU8.set(new Uint8Array(T.buffer,T.byteOffset,l),w)}let b=o.stackSave(),S=o.stackAlloc(4*c.length);try{let T=S/4;c.forEach(H=>o.HEAP32[T++]=H);let C=o._OrtCreateTensor(Jn(d),w,l,S,c.length,ts(f));C===0&&Or(`Can't create tensor for input/output. session=${n}, index=${s}.`),t.push(C)}finally{o.stackRestore(b)}},Id=async(e,t,r,n,s,i)=>{let o=jr(),d=Ps.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let c=d[0],f=d[1],w=d[2],l=d[3],b=d[4],S=d[5],T=t.length,C=n.length,H=0,q=[],O=[],ne=[],se=[],fe=o.stackSave(),et=o.stackAlloc(T*4),Ve=o.stackAlloc(T*4),pt=o.stackAlloc(C*4),Nt=o.stackAlloc(C*4);try{[H,q]=En(i);for(let Wt=0;Wt<T;Wt++)Ad(r[Wt],O,se,e,t[Wt],b);for(let Wt=0;Wt<C;Wt++)Ad(s[Wt],ne,se,e,T+n[Wt],b);let At=et/4,hr=Ve/4,ir=pt/4,vr=Nt/4;for(let Wt=0;Wt<T;Wt++)o.HEAPU32[At++]=O[Wt],o.HEAPU32[hr++]=f[t[Wt]];for(let Wt=0;Wt<C;Wt++)o.HEAPU32[ir++]=ne[Wt],o.HEAPU32[vr++]=w[n[Wt]];if(l&&!S){let{handle:Wt,outputPreferredLocations:Pr,outputPreferredLocationsEncoded:lr}=l;if(f.length!==T)throw new Error(`input count from feeds (${T}) is expected to be always equal to model's input count (${f.length}).`);for(let Vt=0;Vt<T;Vt++){let or=t[Vt];await o._OrtBindInput(Wt,f[or],O[Vt])!==0&&Or(`Can't bind input[${Vt}] for session=${e}.`)}for(let Vt=0;Vt<C;Vt++){let or=n[Vt];s[Vt]?.[3]?o._OrtBindOutput(Wt,w[or],ne[Vt],0)!==0&&Or(`Can't bind pre-allocated output[${Vt}] for session=${e}.`):o._OrtBindOutput(Wt,w[or],0,lr[or])!==0&&Or(`Can't bind output[${Vt}] to ${Pr[Vt]} for session=${e}.`)}Ps.set(e,[c,f,w,l,b,!0])}o.jsepOnRunStart?.(c);let Mr;l?Mr=await o._OrtRunWithBinding(c,l.handle,C,pt,H):Mr=await o._OrtRun(c,Ve,et,T,Nt,C,pt,H),Mr!==0&&Or("failed to call OrtRun().");let dr=[];for(let Wt=0;Wt<C;Wt++){let Pr=o.HEAPU32[pt/4+Wt];if(Pr===ne[Wt]){dr.push(s[Wt]);continue}let lr=o.stackSave(),Vt=o.stackAlloc(4*4),or=!1,Ue,Lt=0;try{o._OrtGetTensorData(Pr,Vt,Vt+4,Vt+8,Vt+12)!==0&&Or(`Can't access output tensor data on index ${Wt}.`);let ar=Vt/4,Hr=o.HEAPU32[ar++];Lt=o.HEAPU32[ar++];let Lr=o.HEAPU32[ar++],Fn=o.HEAPU32[ar++],Un=[];for(let hn=0;hn<Fn;hn++)Un.push(o.HEAPU32[Lr/4+hn]);o._OrtFree(Lr);let Kr=Un.reduce((hn,ln)=>hn*ln,1);Ue=xn(Hr);let vn=l?.outputPreferredLocations[n[Wt]];if(Ue==="string"){if(vn==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let hn=[],ln=Lt/4;for(let Is=0;Is<Kr;Is++){let Fs=o.HEAPU32[ln++],oi=Is===Kr-1?void 0:o.HEAPU32[ln]-Fs;hn.push(o.UTF8ToString(Fs,oi))}dr.push([Ue,Un,hn,"cpu"])}else if(vn==="gpu-buffer"&&Kr>0){let hn=o.jsepGetBuffer;if(!hn)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let ln=hn(Lt),Is=Sn(Hr);if(Is===void 0||!es(Ue))throw new Error(`Unsupported data type: ${Ue}`);or=!0,dr.push([Ue,Un,{gpuBuffer:ln,download:o.jsepCreateDownloader(ln,Kr*Is,Ue),dispose:()=>{o._OrtReleaseTensor(Pr)}},"gpu-buffer"])}else{let hn=$n(Ue),ln=new hn(Kr);new Uint8Array(ln.buffer,ln.byteOffset,ln.byteLength).set(o.HEAPU8.subarray(Lt,Lt+ln.byteLength)),dr.push([Ue,Un,ln,"cpu"])}}finally{o.stackRestore(lr),Ue==="string"&&Lt&&o._free(Lt),or||o._OrtReleaseTensor(Pr)}}return l&&!b&&(o._OrtClearBoundOutputs(l.handle),Ps.set(e,[c,f,w,l,b,!1])),dr}finally{o.stackRestore(fe),O.forEach(At=>o._OrtReleaseTensor(At)),ne.forEach(At=>o._OrtReleaseTensor(At)),se.forEach(At=>o._free(At)),H!==0&&o._OrtReleaseRunOptions(H),q.forEach(At=>o._free(At))}},Fd=e=>{let t=jr(),r=Ps.get(e);if(!r)throw new Error("invalid session id");let n=r[0],s=t._OrtEndProfiling(n);s===0&&Or("Can't get an profile file name."),t._OrtFree(s)},Od=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),As,In,wo,au,lu,td,zd,rd,si,ii,hp,fp,mp,_p,gp,wp,yp,bp,Mp=D(()=>{$(),pp(),un(),Nr(),As=()=>!!k.wasm.proxy&&typeof document<"u",wo=!1,au=!1,lu=!1,rd=new Map,si=(e,t)=>{let r=rd.get(e);r?r.push(t):rd.set(e,[t])},ii=()=>{if(wo||!au||lu||!In)throw new Error("worker not ready")},hp=e=>{switch(e.data.type){case"init-wasm":wo=!1,e.data.err?(lu=!0,zd[1](e.data.err)):(au=!0,zd[0]()),td&&(URL.revokeObjectURL(td),td=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=rd.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},fp=async()=>{if(!au){if(wo)throw new Error("multiple calls to 'initWasm()' detected.");if(lu)throw new Error("previous call to 'initWasm()' failed.");if(wo=!0,As())return new Promise((e,t)=>{In?.terminate(),Jt().then(([r,n])=>{try{In=n,In.onerror=i=>t(i),In.onmessage=hp,zd=[e,t];let s={type:"init-wasm",in:k};In.postMessage(s),td=r}catch(s){t(s)}},t)});try{await Zn(k.wasm),await Sd(k),au=!0}catch(e){throw lu=!0,e}finally{wo=!1}}},mp=async e=>{if(As())return ii(),new Promise((t,r)=>{si("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:k}};In.postMessage(n)});await $d(k,e)},_p=async e=>As()?(ii(),new Promise((t,r)=>{si("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};In.postMessage(n,[e.buffer])})):ed(e),gp=async(e,t)=>{if(As()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ii(),new Promise((r,n)=>{si("create",[r,n]);let s={type:"create",in:{model:e,options:{...t}}},i=[];e instanceof Uint8Array&&i.push(e.buffer),In.postMessage(s,i)})}else return kd(e,t)},wp=async e=>{if(As())return ii(),new Promise((t,r)=>{si("release",[t,r]);let n={type:"release",in:e};In.postMessage(n)});Pd(e)},yp=async(e,t,r,n,s,i)=>{if(As()){if(r.some(o=>o[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some(o=>o))throw new Error("pre-allocated output tensor is not supported for proxy.");return ii(),new Promise((o,d)=>{si("run",[o,d]);let c=r,f={type:"run",in:{sessionId:e,inputIndices:t,inputs:c,outputIndices:n,options:i}};In.postMessage(f,Od(c))})}else return Id(e,t,r,n,s,i)},bp=async e=>{if(As())return ii(),new Promise((t,r)=>{si("end-profiling",[t,r]);let n={type:"end-profiling",in:e};In.postMessage(n)});Fd(e)}}),Dd,vp,xp,wf=D(()=>{$(),Mp(),Yt(),ie(),gs(),Dd=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},vp=e=>{switch(e[3]){case"cpu":return new Ie(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!es(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:s}=e[2];return Ie.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:s})}default:throw new Error(`invalid data location: ${e[3]}`)}},xp=class{async fetchModelAndCopyToWasmMemory(e){return _p(await qn(e))}async loadModel(e,t){Re();let r;typeof e=="string"?r=await this.fetchModelAndCopyToWasmMemory(e):r=e,[this.sessionId,this.inputNames,this.outputNames]=await gp(r,t),Ne()}async dispose(){return wp(this.sessionId)}async run(e,t,r){Re();let n=[],s=[];Object.entries(e).forEach(l=>{let b=l[0],S=l[1],T=this.inputNames.indexOf(b);if(T===-1)throw new Error(`invalid input '${b}'`);n.push(S),s.push(T)});let i=[],o=[];Object.entries(t).forEach(l=>{let b=l[0],S=l[1],T=this.outputNames.indexOf(b);if(T===-1)throw new Error(`invalid output '${b}'`);i.push(S),o.push(T)});let d=n.map((l,b)=>Dd(l,()=>`input "${this.inputNames[s[b]]}"`)),c=i.map((l,b)=>l?Dd(l,()=>`output "${this.outputNames[o[b]]}"`):null),f=await yp(this.sessionId,s,d,o,c,r),w={};for(let l=0;l<f.length;l++)w[this.outputNames[o[l]]]=i[l]??vp(f[l]);return Ne(),w}startProfiling(){}endProfiling(){bp(this.sessionId)}}}),Tp,Cp,yf=D(()=>{$(),Mp(),wf(),Nr(),Tp=()=>{if((typeof k.wasm.initTimeout!="number"||k.wasm.initTimeout<0)&&(k.wasm.initTimeout=0),k.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof k.wasm.proxy!="boolean"&&(k.wasm.proxy=!1),typeof k.wasm.trace!="boolean"&&(k.wasm.trace=!1),typeof k.wasm.numThreads!="number"||!Number.isInteger(k.wasm.numThreads)||k.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)k.wasm.numThreads=1;else{let e=typeof navigator>"u"?Me("node:os").cpus().length:navigator.hardwareConcurrency;k.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Cp=class{async init(e){Tp(),await fp(),await mp(e)}async createInferenceSessionHandler(e,t){let r=new xp;return await r.loadModel(e,t),Promise.resolve(r)}}}),Ep={};E(Ep,{wasmBackend:()=>Sp});var Sp,bf=D(()=>{yf(),Sp=new Cp});$(),$(),$();var Mf="1.19.0-dev.20240804-ee2fe87e2d",vf=Te;{let e=(bf(),P(Ep)).wasmBackend;oe("webgpu",e,5),oe("webnn",e,5),oe("cpu",e,10),oe("wasm",e,10)}Object.defineProperty(k.versions,"web",{value:Mf,enumerable:!0});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */},"./src/backends/onnx.js":(yt,pe,u)=>{var v;u.r(pe),u.d(pe,{Tensor:()=>Me.Tensor,createInferenceSession:()=>oe,deviceToExecutionProviders:()=>Y,isONNXProxy:()=>te,isONNXTensor:()=>le});var W=u("./src/env.js"),me=u("?2ce3"),be=u("./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs"),Me=u("./node_modules/onnxruntime-common/dist/esm/index.js");const D=[];let E,N;if(W.apis.IS_NODE_ENV){switch(N=me??(v||(v=u.t(me,2))),process.platform){case"win32":D.push("dml");break;case"linux":process.arch==="x64"&&D.push("cuda");break}D.push("cpu"),E=["cpu"]}else N=be,W.apis.IS_WEBGPU_AVAILABLE&&D.push("webgpu"),D.push("wasm"),E=["wasm"];const P=N.InferenceSession;function Y(J){let de=E;if(J){if(!D.includes(J))throw new Error(`Unsupported device: "${J}". Should be one of: ${D.join(", ")}.`);de=[J]}return de}let Z=null;async function oe(J,de){Z&&await Z;const ae=P.create(J,de);return Z??=ae,await ae}function le(J){return J instanceof N.Tensor}const L=N?.env;L?.wasm&&(L.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${W.env.version}/dist/`,L.wasm.proxy=!W.apis.IS_WEBWORKER_ENV,(typeof crossOriginIsolated>"u"||!crossOriginIsolated)&&(L.wasm.numThreads=1),typeof navigator<"u"&&/iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent)&&(L.wasm.simd=!1)),L?.webgpu&&(L.webgpu.powerPreference="high-performance");function te(){return L?.wasm?.proxy}W.env.backends.onnx=L},"./src/configs.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{AutoConfig:()=>E,PretrainedConfig:()=>D,getKeyValueShapes:()=>Me});var v=u("./src/utils/core.js"),W=u("./src/utils/hub.js");async function me(N,P){return await(0,W.getModelJSON)(N,"config.json",!0,P)}function be(N){const P={};let Y={};switch(N.model_type){case"llava":case"paligemma":case"florence2":Y=be(N.text_config);break;case"moondream1":Y=be(N.phi_config);break;case"musicgen":Y=be(N.decoder);break;case"gpt2":case"gptj":case"codegen":case"gpt_bigcode":P.num_heads="n_head",P.num_layers="n_layer",P.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"phi":case"phi3":case"falcon":P.num_heads="num_attention_heads",P.num_layers="num_hidden_layers",P.hidden_size="hidden_size";break;case"llama":case"cohere":case"mistral":case"starcoder2":case"qwen2":P.num_heads="num_key_value_heads",P.num_layers="num_hidden_layers",P.hidden_size="hidden_size",P.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":P.num_heads="num_key_value_heads",P.num_layers="num_hidden_layers",P.dim_kv="head_dim";break;case"openelm":P.num_heads="num_kv_heads",P.num_layers="num_transformer_layers",P.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":P.num_heads="num_heads",P.num_layers="num_layers",P.hidden_size="hidden_size";break;case"bloom":P.num_heads="n_head",P.num_layers="n_layer",P.hidden_size="hidden_size";break;case"mpt":P.num_heads="n_heads",P.num_layers="n_layers",P.hidden_size="d_model";break;case"t5":case"mt5":case"longt5":P.num_decoder_layers="num_decoder_layers",P.num_decoder_heads="num_heads",P.decoder_dim_kv="d_kv",P.num_encoder_layers="num_layers",P.num_encoder_heads="num_heads",P.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":P.num_decoder_layers="decoder_layers",P.num_decoder_heads="decoder_attention_heads",P.decoder_hidden_size="d_model",P.num_encoder_layers="encoder_layers",P.num_encoder_heads="encoder_attention_heads",P.encoder_hidden_size="d_model";break;case"speecht5":P.num_decoder_layers="decoder_layers",P.num_decoder_heads="decoder_attention_heads",P.decoder_hidden_size="hidden_size",P.num_encoder_layers="encoder_layers",P.num_encoder_heads="encoder_attention_heads",P.encoder_hidden_size="hidden_size";break;case"trocr":P.num_encoder_layers=P.num_decoder_layers="decoder_layers",P.num_encoder_heads=P.num_decoder_heads="decoder_attention_heads",P.encoder_hidden_size=P.decoder_hidden_size="d_model";break;case"musicgen_decoder":P.num_encoder_layers=P.num_decoder_layers="num_hidden_layers",P.num_encoder_heads=P.num_decoder_heads="num_attention_heads",P.encoder_hidden_size=P.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const oe=be(N.decoder),le="num_decoder_layers"in oe,L=(0,v.pick)(N,["model_type","is_encoder_decoder"]);return le?(L.num_decoder_layers=oe.num_decoder_layers,L.num_decoder_heads=oe.num_decoder_heads,L.decoder_hidden_size=oe.decoder_hidden_size,L.num_encoder_layers=oe.num_encoder_layers,L.num_encoder_heads=oe.num_encoder_heads,L.encoder_hidden_size=oe.encoder_hidden_size):(L.num_layers=oe.num_layers,L.num_heads=oe.num_heads,L.hidden_size=oe.hidden_size),L}const Z={...Y,...(0,v.pick)(N,["model_type","multi_query","is_encoder_decoder"])};for(const oe in P)Z[oe]=N[P[oe]];return Z}function Me(N,{prefix:P="past_key_values"}={}){const Y={},Z=N.normalized_config,oe=1;if(Z.is_encoder_decoder&&"num_encoder_heads"in Z&&"num_decoder_heads"in Z){const le=Z.encoder_dim_kv??Z.encoder_hidden_size/Z.num_encoder_heads,L=Z.decoder_dim_kv??Z.decoder_hidden_size/Z.num_decoder_heads,te=[oe,Z.num_encoder_heads,0,le],J=[oe,Z.num_decoder_heads,0,L];for(let de=0;de<Z.num_decoder_layers;++de)Y[`${P}.${de}.encoder.key`]=te,Y[`${P}.${de}.encoder.value`]=te,Y[`${P}.${de}.decoder.key`]=J,Y[`${P}.${de}.decoder.value`]=J}else{const le=Z.num_heads,L=Z.num_layers,te=Z.dim_kv??Z.hidden_size/(Z.num_attention_heads??le);if(Z.model_type==="falcon"){const J=[oe*le,0,te];for(let de=0;de<L;++de)Y[`${P}.${de}.key`]=J,Y[`${P}.${de}.value`]=J}else if(Z.multi_query){const J=[oe*le,0,2*te];for(let de=0;de<L;++de)Y[`${P}.${de}.key_value`]=J}else if(Z.model_type==="bloom"){const J=[oe*le,te,0],de=[oe*le,0,te];for(let ae=0;ae<L;++ae)Y[`${P}.${ae}.key`]=J,Y[`${P}.${ae}.value`]=de}else if(Z.model_type==="openelm")for(let J=0;J<L;++J){const de=[oe,le[J],0,te];Y[`${P}.${J}.key`]=de,Y[`${P}.${J}.value`]=de}else{const J=[oe,le,0,te];for(let de=0;de<L;++de)Y[`${P}.${de}.key`]=J,Y[`${P}.${de}.value`]=J}}return Y}class D{max_position_embeddings;constructor(P){this.model_type=null,this.is_encoder_decoder=!1,Object.assign(this,P),this.normalized_config=be(this)}static async from_pretrained(P,{progress_callback:Y=null,config:Z=null,cache_dir:oe=null,local_files_only:le=!1,revision:L="main"}={}){Z&&!(Z instanceof D)&&(Z=new D(Z));const te=Z??await me(P,{progress_callback:Y,config:Z,cache_dir:oe,local_files_only:le,revision:L});return new this(te)}}class E{static async from_pretrained(...P){return D.from_pretrained(...P)}}},"./src/env.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{apis:()=>le,env:()=>j});var v=u("?569f"),W=u("?3f59"),me=u("?154a");const be="3.0.0-alpha.6",Me=typeof self<"u",D=Me&&self.constructor.name==="DedicatedWorkerGlobalScope",E=Me&&"caches"in self,N=typeof navigator<"u"&&"gpu"in navigator,P=typeof process<"u",Y=P&&process?.release?.name==="node",Z=!I(v),oe=!I(W),le=Object.freeze({IS_BROWSER_ENV:Me,IS_WEBWORKER_ENV:D,IS_WEB_CACHE_AVAILABLE:E,IS_WEBGPU_AVAILABLE:N,IS_PROCESS_AVAILABLE:P,IS_NODE_ENV:Y,IS_FS_AVAILABLE:Z,IS_PATH_AVAILABLE:oe}),L=Z&&oe,te=L?W.dirname(W.dirname(me.fileURLToPath(self.location.href))):"./",J=L?W.join(te,"/.cache/"):null,de="/models/",ae=L?W.join(te,de):de,j={version:be,backends:{onnx:{},tfjs:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!Me,localModelPath:ae,useFS:Z,useBrowserCache:E,useFSCache:Z,cacheDir:J,useCustomCache:!1,customCache:null};function I(R){return Object.keys(R).length===0}},"./src/generation/configuration_utils.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{GenerationConfig:()=>W});var v=u("./src/utils/core.js");class W{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(be){Object.assign(this,(0,v.pick)(be,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{ClassifierFreeGuidanceLogitsProcessor:()=>te,ForcedBOSTokenLogitsProcessor:()=>D,ForcedEOSTokenLogitsProcessor:()=>E,LogitsProcessor:()=>me,LogitsProcessorList:()=>Me,LogitsWarper:()=>be,MinLengthLogitsProcessor:()=>oe,MinNewTokensLengthLogitsProcessor:()=>le,NoBadWordsLogitsProcessor:()=>L,NoRepeatNGramLogitsProcessor:()=>Y,RepetitionPenaltyLogitsProcessor:()=>Z,SuppressTokensAtBeginLogitsProcessor:()=>N,TemperatureLogitsWarper:()=>J,TopKLogitsWarper:()=>ae,TopPLogitsWarper:()=>de,WhisperTimeStampLogitsProcessor:()=>P});var v=u("./src/utils/generic.js");u("./src/utils/tensor.js");var W=u("./src/utils/maths.js");class me extends v.Callable{_call(I,R){throw Error("`_call` should be implemented in a subclass")}}class be extends v.Callable{_call(I,R){throw Error("`_call` should be implemented in a subclass")}}class Me extends v.Callable{constructor(){super(),this.processors=[]}push(I){this.processors.push(I)}extend(I){this.processors.push(...I)}_call(I,R){let k=R;for(const _e of this.processors)k=_e(I,k);return k}[Symbol.iterator](){return this.processors.values()}}class D extends me{constructor(I){super(),this.bos_token_id=I}_call(I,R){for(let k=0;k<I.length;++k)if(I[k].length===1){const _e=R[k];_e.data.fill(-1/0),_e.data[this.bos_token_id]=0}return R}}class E extends me{constructor(I,R){super(),this.max_length=I,this.eos_token_id=Array.isArray(R)?R:[R]}_call(I,R){for(let k=0;k<I.length;++k)if(I[k].length===this.max_length-1){const _e=R[k];_e.data.fill(-1/0);for(const we of this.eos_token_id)_e.data[we]=0}return R}}class N extends me{constructor(I,R){super(),this.begin_suppress_tokens=I,this.begin_index=R}_call(I,R){for(let k=0;k<I.length;++k)if(I[k].length===this.begin_index){const _e=R[k];for(const we of this.begin_suppress_tokens)_e.data[we]=-1/0}return R}}class P extends me{constructor(I,R){super(),this.eos_token_id=Array.isArray(I.eos_token_id)?I.eos_token_id[0]:I.eos_token_id,this.no_timestamps_token_id=I.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=R.length,R.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=I.max_initial_timestamp_index}_call(I,R){for(let k=0;k<I.length;++k){const we=R[k].data;if(we[this.no_timestamps_token_id]=-1/0,I[k].length===this.begin_index-1){we.fill(-1/0),we[this.timestamp_begin]=0;continue}const Ce=I[k].slice(this.begin_index),Se=Ce.length>=1&&Ce[Ce.length-1]>=this.timestamp_begin,Pe=Ce.length<2||Ce[Ce.length-2]>=this.timestamp_begin;if(Se&&(Pe?we.subarray(this.timestamp_begin).fill(-1/0):we.subarray(0,this.eos_token_id).fill(-1/0)),I[k].length===this.begin_index&&this.max_initial_timestamp_index!==null){const ge=this.timestamp_begin+this.max_initial_timestamp_index;we.subarray(ge+1).fill(-1/0)}const Ye=(0,W.log_softmax)(we),Xe=Math.log(Ye.subarray(this.timestamp_begin).map(Math.exp).reduce((ge,V)=>ge+V)),ct=(0,W.max)(Ye.subarray(0,this.timestamp_begin))[0];Xe>ct&&we.subarray(0,this.timestamp_begin).fill(-1/0)}return R}}class Y extends me{constructor(I){super(),this.no_repeat_ngram_size=I}getNgrams(I){const R=I.length,k=[];for(let we=0;we<R+1-this.no_repeat_ngram_size;++we){const Ce=[];for(let Se=0;Se<this.no_repeat_ngram_size;++Se)Ce.push(I[we+Se]);k.push(Ce.map(Number))}const _e=new Map;for(const we of k){const Ce=we.slice(0,we.length-1),Se=JSON.stringify(Ce),Pe=_e.get(Se)??[];Pe.push(we[we.length-1]),_e.set(Se,Pe)}return _e}getGeneratedNgrams(I,R){const k=R.slice(R.length+1-this.no_repeat_ngram_size,R.length);return I.get(JSON.stringify(k.map(Number)))??[]}calcBannedNgramTokens(I){const R=[];if(I.length+1<this.no_repeat_ngram_size)return R;{const k=this.getNgrams(I);return this.getGeneratedNgrams(k,I)}}_call(I,R){for(let k=0;k<I.length;++k){const _e=R[k],we=this.calcBannedNgramTokens(I[k]);for(const Ce of we)_e.data[Ce]=-1/0}return R}}class Z extends me{constructor(I){super(),this.penalty=I}_call(I,R){for(let k=0;k<I.length;++k){const _e=R[k];for(const we of I[k])_e.data[we]<0?_e.data[we]*=this.penalty:_e.data[we]/=this.penalty}return R}}class oe extends me{constructor(I,R){super(),this.min_length=I,this.eos_token_id=Array.isArray(R)?R:[R]}_call(I,R){for(let k=0;k<I.length;++k)if(I[k].length<this.min_length){const _e=R[k];for(const we of this.eos_token_id)_e.data[we]=-1/0}return R}}class le extends me{constructor(I,R,k){super(),this.prompt_length_to_skip=I,this.min_new_tokens=R,this.eos_token_id=Array.isArray(k)?k:[k]}_call(I,R){for(let k=0;k<I.length;++k)if(I[k].length-this.prompt_length_to_skip<this.min_new_tokens){const we=R[k];for(const Ce of this.eos_token_id)we[Ce]=-1/0}return R}}class L extends me{constructor(I,R){super(),this.bad_words_ids=I,this.eos_token_id=Array.isArray(R)?R:[R]}_call(I,R){for(let k=0;k<I.length;++k){const _e=R[k];for(const we of this.bad_words_ids){let Ce=!0;for(let Se=1;Se<=we.length-1&&we.length<I[Se].length;++Se)if(we.at(-Se-1)!==Number(I[Se].at(-Se))){Ce=!1;break}Ce&&(_e[we.at(-1)]=-1/0)}}return R}}class te extends me{constructor(I){if(super(),I<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${I}.`);this.guidance_scale=I}_call(I,R){if(R.dims[0]!==2*I.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${R.dims[0]} for the logits and ${I.length} for the input ids.`);const k=I.length,_e=R.slice([0,k],null),we=R.slice([k,R.dims[0]],null);for(let Ce=0;Ce<we.data.length;++Ce)we.data[Ce]+=(_e.data[Ce]-we.data[Ce])*this.guidance_scale;return we}}class J extends be{constructor(I){super(),this.temperature=I}_call(I,R){const k=R.data;for(let _e=0;_e<k.length;++_e)k[_e]/=this.temperature;return R}}class de extends be{constructor(I,{filter_value:R=-1/0,min_tokens_to_keep:k=1}={}){if(super(),I<0||I>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${I}`);if(!Number.isInteger(k)||k<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${k}`);this.top_p=I,this.filter_value=R,this.min_tokens_to_keep=k}}class ae extends be{constructor(I,{filter_value:R=-1/0,min_tokens_to_keep:k=1}={}){if(super(),!Number.isInteger(I)||I<0)throw new Error(`\`top_k\` must be a positive integer, but is ${I}`);this.top_k=Math.max(I,k),this.filter_value=R}}},"./src/generation/logits_sampler.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{LogitsSampler:()=>be});var v=u("./src/utils/generic.js"),W=u("./src/utils/tensor.js"),me=u("./src/utils/maths.js");u("./src/generation/configuration_utils.js");class be extends v.Callable{constructor(P){super(),this.generation_config=P}async _call(P){return this.sample(P)}async sample(P){throw Error("sample should be implemented in subclasses.")}getLogits(P,Y){let Z=P.dims.at(-1),oe=P.data;if(Y===-1)oe=oe.slice(-Z);else{let le=Y*Z;oe=oe.slice(le,le+Z)}return oe}randomSelect(P){let Y=0;for(let oe=0;oe<P.length;++oe)Y+=P[oe];let Z=Math.random()*Y;for(let oe=0;oe<P.length;++oe)if(Z-=P[oe],Z<=0)return oe;return 0}static getSampler(P){if(P.do_sample)return new D(P);if(P.num_beams>1)return new E(P);if(P.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${P.num_return_sequences}.`);return new Me(P)}}class Me extends be{async sample(P){const Y=(0,me.max)(P.data)[1];return[[BigInt(Y),0]]}}class D extends be{async sample(P){let Y=P.dims.at(-1);this.generation_config.top_k>0&&(Y=Math.min(this.generation_config.top_k,Y));const[Z,oe]=await(0,W.topk)(P,Y),le=(0,me.softmax)(Z.data);return Array.from({length:this.generation_config.num_beams},()=>{const L=this.randomSelect(le);return[oe.data[L],Math.log(le[L])]})}}class E extends be{async sample(P){let Y=P.dims.at(-1);this.generation_config.top_k>0&&(Y=Math.min(this.generation_config.top_k,Y));const[Z,oe]=await(0,W.topk)(P,Y),le=(0,me.softmax)(Z.data);return Array.from({length:this.generation_config.num_beams},(L,te)=>[oe.data[te],Math.log(le[te])])}}},"./src/generation/stopping_criteria.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{EosTokenCriteria:()=>Me,InterruptableStoppingCriteria:()=>D,MaxLengthCriteria:()=>be,StoppingCriteria:()=>W,StoppingCriteriaList:()=>me});var v=u("./src/utils/generic.js");class W extends v.Callable{_call(N,P){throw Error("StoppingCriteria needs to be subclassed")}}class me extends v.Callable{constructor(){super(),this.criteria=[]}push(N){this.criteria.push(N)}extend(N){N instanceof me?N=N.criteria:N instanceof W&&(N=[N]),this.criteria.push(...N)}_call(N,P){const Y=new Array(N.length).fill(!1);for(const Z of this.criteria){const oe=Z(N,P);for(let le=0;le<Y.length;++le)Y[le]||=oe[le]}return Y}[Symbol.iterator](){return this.criteria.values()}}class be extends W{constructor(N,P=null){super(),this.max_length=N,this.max_position_embeddings=P}_call(N){return N.map(P=>P.length>=this.max_length)}}class Me extends W{constructor(N){super(),Array.isArray(N)||(N=[N]),this.eos_token_id=N}_call(N,P){return N.map(Y=>{const Z=Y.at(-1);return this.eos_token_id.some(oe=>Z==oe)})}}class D extends W{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(N,P){return new Array(N.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{BaseStreamer:()=>be,TextStreamer:()=>D,WhisperTextStreamer:()=>E});var v=u("./src/utils/core.js"),W=u("./src/tokenizers.js"),me=u("./src/env.js");class be{put(P){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const Me=me.apis.IS_PROCESS_AVAILABLE?N=>process.stdout.write(N):N=>console.log(N);class D extends be{constructor(P,{skip_prompt:Y=!1,callback_function:Z=null,token_callback_function:oe=null,decode_kwargs:le={},...L}={}){super(),this.tokenizer=P,this.skip_prompt=Y,this.callback_function=Z??Me,this.token_callback_function=oe,this.decode_kwargs={...le,...L},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(P){if(P.length>1)throw Error("TextStreamer only supports batch size of 1");const Y=P[0];if(this.token_callback_function?.(Y),this.skip_prompt&&this.next_tokens_are_prompt){this.next_tokens_are_prompt=!1;return}this.token_cache=(0,v.mergeArrays)(this.token_cache,Y);const Z=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let oe;Z.endsWith(`
`)?(oe=Z.slice(this.print_len),this.token_cache=[],this.print_len=0):Z.length>0&&(0,W.is_chinese_char)(Z.charCodeAt(Z.length-1))?(oe=Z.slice(this.print_len),this.print_len+=oe.length):(oe=Z.slice(this.print_len,Z.lastIndexOf(" ")+1),this.print_len+=oe.length),this.on_finalized_text(oe,!1)}end(){let P;this.token_cache.length>0?(P=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):P="",this.next_tokens_are_prompt=!0,this.on_finalized_text(P,!0)}on_finalized_text(P,Y){P.length>0&&this.callback_function?.(P),Y&&this.callback_function===Me&&me.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class E extends D{constructor(P,{skip_prompt:Y=!1,callback_function:Z=null,token_callback_function:oe=null,on_chunk_start:le=null,on_chunk_end:L=null,on_finalize:te=null,time_precision:J=.02,skip_special_tokens:de=!0,decode_kwargs:ae={}}={}){super(P,{skip_prompt:Y,callback_function:Z,token_callback_function:oe,decode_kwargs:{skip_special_tokens:de,...ae}}),this.timestamp_begin=P.timestamp_begin,this.on_chunk_start=le,this.on_chunk_end=L,this.on_finalize=te,this.time_precision=J,this.waiting_for_timestamp=!1}put(P){if(P.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const Y=P[0];if(Y.length===1){const Z=Number(Y[0])-this.timestamp_begin;if(Z>=0){const oe=Z*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(oe):this.on_chunk_start?.(oe),this.waiting_for_timestamp=!this.waiting_for_timestamp,P=[[]]}}return super.put(P)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{ASTForAudioClassification:()=>Ns,ASTModel:()=>It,ASTPreTrainedModel:()=>cn,AlbertForMaskedLM:()=>Yt,AlbertForQuestionAnswering:()=>ts,AlbertForSequenceClassification:()=>es,AlbertModel:()=>Gn,AlbertPreTrainedModel:()=>$n,AutoModel:()=>bd,AutoModelForAudioClassification:()=>Uu,AutoModelForAudioFrameClassification:()=>Wu,AutoModelForCTC:()=>Vu,AutoModelForCausalLM:()=>zu,AutoModelForDepthEstimation:()=>Hu,AutoModelForDocumentQuestionAnswering:()=>Md,AutoModelForImageClassification:()=>Lu,AutoModelForImageFeatureExtraction:()=>Ku,AutoModelForImageMatting:()=>Gu,AutoModelForImageSegmentation:()=>eu,AutoModelForImageToImage:()=>qu,AutoModelForMaskGeneration:()=>tu,AutoModelForMaskedLM:()=>Du,AutoModelForObjectDetection:()=>Nu,AutoModelForQuestionAnswering:()=>Jl,AutoModelForSemanticSegmentation:()=>Ru,AutoModelForSeq2SeqLM:()=>Fu,AutoModelForSequenceClassification:()=>on,AutoModelForSpeechSeq2Seq:()=>Zl,AutoModelForTextToSpectrogram:()=>Ou,AutoModelForTextToWaveform:()=>ni,AutoModelForTokenClassification:()=>Iu,AutoModelForVision2Seq:()=>Bu,AutoModelForXVector:()=>ru,AutoModelForZeroShotObjectDetection:()=>ju,BartForConditionalGeneration:()=>_,BartForSequenceClassification:()=>z,BartModel:()=>ye,BartPretrainedModel:()=>fn,BaseModelOutput:()=>dt,BeitForImageClassification:()=>xa,BeitModel:()=>va,BeitPreTrainedModel:()=>ki,BertForMaskedLM:()=>Oe,BertForQuestionAnswering:()=>Ie,BertForSequenceClassification:()=>st,BertForTokenClassification:()=>Tt,BertModel:()=>at,BertPreTrainedModel:()=>tt,BlenderbotForConditionalGeneration:()=>mt,BlenderbotModel:()=>Ct,BlenderbotPreTrainedModel:()=>gt,BlenderbotSmallForConditionalGeneration:()=>fr,BlenderbotSmallModel:()=>rr,BlenderbotSmallPreTrainedModel:()=>cr,BloomForCausalLM:()=>sa,BloomModel:()=>na,BloomPreTrainedModel:()=>Us,CLIPModel:()=>Co,CLIPPreTrainedModel:()=>vs,CLIPSegForImageSegmentation:()=>Io,CLIPSegModel:()=>Ao,CLIPSegPreTrainedModel:()=>fi,CLIPTextModelWithProjection:()=>Tn,CLIPVisionModelWithProjection:()=>Eo,CamembertForMaskedLM:()=>ve,CamembertForQuestionAnswering:()=>ze,CamembertForSequenceClassification:()=>Fe,CamembertForTokenClassification:()=>ke,CamembertModel:()=>ie,CamembertPreTrainedModel:()=>$,CausalLMOutput:()=>Hn,CausalLMOutputWithPast:()=>Xu,ChineseCLIPModel:()=>Po,ChineseCLIPPreTrainedModel:()=>ko,ClapAudioModelWithProjection:()=>Cl,ClapModel:()=>xl,ClapPreTrainedModel:()=>Ts,ClapTextModelWithProjection:()=>Tl,CodeGenForCausalLM:()=>js,CodeGenModel:()=>Vo,CodeGenPreTrainedModel:()=>gn,CohereForCausalLM:()=>Go,CohereModel:()=>Wo,CoherePreTrainedModel:()=>yi,ConvBertForMaskedLM:()=>M,ConvBertForQuestionAnswering:()=>ee,ConvBertForSequenceClassification:()=>U,ConvBertForTokenClassification:()=>A,ConvBertModel:()=>xt,ConvBertPreTrainedModel:()=>vt,ConvNextForImageClassification:()=>qa,ConvNextModel:()=>Ga,ConvNextPreTrainedModel:()=>Vi,ConvNextV2ForImageClassification:()=>Xa,ConvNextV2Model:()=>Ka,ConvNextV2PreTrainedModel:()=>Ha,DPTForDepthEstimation:()=>Ri,DPTModel:()=>Li,DPTPreTrainedModel:()=>Bi,DebertaForMaskedLM:()=>bt,DebertaForQuestionAnswering:()=>zt,DebertaForSequenceClassification:()=>ft,DebertaForTokenClassification:()=>Et,DebertaModel:()=>nt,DebertaPreTrainedModel:()=>lt,DebertaV2ForMaskedLM:()=>Dt,DebertaV2ForQuestionAnswering:()=>Jt,DebertaV2ForSequenceClassification:()=>Gt,DebertaV2ForTokenClassification:()=>Xt,DebertaV2Model:()=>Bt,DebertaV2PreTrainedModel:()=>Ge,DeiTForImageClassification:()=>Oa,DeiTModel:()=>Fa,DeiTPreTrainedModel:()=>Ii,DepthAnythingForDepthEstimation:()=>ja,DepthAnythingPreTrainedModel:()=>Na,DetrForObjectDetection:()=>Ca,DetrForSegmentation:()=>Ea,DetrModel:()=>Ta,DetrObjectDetectionOutput:()=>Pi,DetrPreTrainedModel:()=>qs,DetrSegmentationOutput:()=>Sa,Dinov2ForImageClassification:()=>Ya,Dinov2Model:()=>Qa,Dinov2PreTrainedModel:()=>yn,DistilBertForMaskedLM:()=>St,DistilBertForQuestionAnswering:()=>Qe,DistilBertForSequenceClassification:()=>Nr,DistilBertForTokenClassification:()=>Tr,DistilBertModel:()=>xr,DistilBertPreTrainedModel:()=>jt,DonutSwinModel:()=>ji,DonutSwinPreTrainedModel:()=>Wa,EfficientNetForImageClassification:()=>Pl,EfficientNetModel:()=>kl,EfficientNetPreTrainedModel:()=>lo,ElectraForMaskedLM:()=>Ke,ElectraForQuestionAnswering:()=>Te,ElectraForSequenceClassification:()=>_t,ElectraForTokenClassification:()=>rt,ElectraModel:()=>Ze,ElectraPreTrainedModel:()=>he,EsmForMaskedLM:()=>ps,EsmForSequenceClassification:()=>Zn,EsmForTokenClassification:()=>jr,EsmModel:()=>Zr,EsmPreTrainedModel:()=>Ot,FalconForCausalLM:()=>vl,FalconModel:()=>Ml,FalconPreTrainedModel:()=>so,FastViTForImageClassification:()=>ca,FastViTModel:()=>da,FastViTPreTrainedModel:()=>Gs,Florence2ForConditionalGeneration:()=>pi,Florence2PreTrainedModel:()=>To,GLPNForDepthEstimation:()=>Ua,GLPNModel:()=>Va,GLPNPreTrainedModel:()=>Ni,GPT2LMHeadModel:()=>Oo,GPT2Model:()=>Fo,GPT2PreTrainedModel:()=>mi,GPTBigCodeForCausalLM:()=>cu,GPTBigCodeModel:()=>jo,GPTBigCodePreTrainedModel:()=>wi,GPTJForCausalLM:()=>No,GPTJModel:()=>Ro,GPTJPreTrainedModel:()=>gi,GPTNeoForCausalLM:()=>Do,GPTNeoModel:()=>zo,GPTNeoPreTrainedModel:()=>_n,GPTNeoXForCausalLM:()=>Lo,GPTNeoXModel:()=>Bo,GPTNeoXPreTrainedModel:()=>_i,Gemma2ForCausalLM:()=>Xo,Gemma2Model:()=>Ko,Gemma2PreTrainedModel:()=>Mi,GemmaForCausalLM:()=>Ho,GemmaModel:()=>qo,GemmaPreTrainedModel:()=>bi,HubertForCTC:()=>pl,HubertForSequenceClassification:()=>Yi,HubertModel:()=>gu,HubertPreTrainedModel:()=>_u,ImageMattingOutput:()=>su,LlamaForCausalLM:()=>Uo,LlamaModel:()=>bn,LlamaPreTrainedModel:()=>Vs,LlavaForConditionalGeneration:()=>ss,LlavaPreTrainedModel:()=>xo,LongT5ForConditionalGeneration:()=>bs,LongT5Model:()=>ys,LongT5PreTrainedModel:()=>rs,M2M100ForConditionalGeneration:()=>ol,M2M100Model:()=>il,M2M100PreTrainedModel:()=>Gi,MBartForCausalLM:()=>Mt,MBartForConditionalGeneration:()=>xe,MBartForSequenceClassification:()=>De,MBartModel:()=>Q,MBartPreTrainedModel:()=>X,MPNetForMaskedLM:()=>hs,MPNetForQuestionAnswering:()=>_s,MPNetForSequenceClassification:()=>fs,MPNetForTokenClassification:()=>ms,MPNetModel:()=>Ls,MPNetPreTrainedModel:()=>En,MT5ForConditionalGeneration:()=>Dr,MT5Model:()=>Ms,MT5PreTrainedModel:()=>ns,MarianMTModel:()=>sl,MarianModel:()=>fu,MarianPreTrainedModel:()=>Wi,MaskedLMOutput:()=>tn,MistralForCausalLM:()=>Js,MistralModel:()=>Zs,MistralPreTrainedModel:()=>to,MobileBertForMaskedLM:()=>Wn,MobileBertForQuestionAnswering:()=>Dn,MobileBertForSequenceClassification:()=>Or,MobileBertModel:()=>qr,MobileBertPreTrainedModel:()=>un,MobileNetV1ForImageClassification:()=>Mu,MobileNetV1Model:()=>Al,MobileNetV1PreTrainedModel:()=>po,MobileNetV2ForImageClassification:()=>Fl,MobileNetV2Model:()=>Il,MobileNetV2PreTrainedModel:()=>ho,MobileNetV3ForImageClassification:()=>vu,MobileNetV3Model:()=>Ol,MobileNetV3PreTrainedModel:()=>fo,MobileNetV4ForImageClassification:()=>mo,MobileNetV4Model:()=>Ss,MobileNetV4PreTrainedModel:()=>Es,MobileViTForImageClassification:()=>_a,MobileViTModel:()=>ma,MobileViTPreTrainedModel:()=>fa,MobileViTV2ForImageClassification:()=>ga,MobileViTV2Model:()=>hu,MobileViTV2PreTrainedModel:()=>Si,ModelOutput:()=>We,Moondream1ForConditionalGeneration:()=>nr,MptForCausalLM:()=>ia,MptModel:()=>pu,MptPreTrainedModel:()=>Ws,MusicgenForCausalLM:()=>wd,MusicgenForConditionalGeneration:()=>co,MusicgenModel:()=>bu,MusicgenPreTrainedModel:()=>uo,NomicBertModel:()=>$e,NomicBertPreTrainedModel:()=>G,OPTForCausalLM:()=>aa,OPTModel:()=>oa,OPTPreTrainedModel:()=>Ei,OpenELMForCausalLM:()=>Yo,OpenELMModel:()=>Qo,OpenELMPreTrainedModel:()=>wn,OwlViTForObjectDetection:()=>ya,OwlViTModel:()=>wa,OwlViTPreTrainedModel:()=>_r,Owlv2ForObjectDetection:()=>Ma,Owlv2Model:()=>ba,Owlv2PreTrainedModel:()=>$i,Phi3ForCausalLM:()=>Ci,Phi3Model:()=>ra,Phi3PreTrainedModel:()=>Ti,PhiForCausalLM:()=>ta,PhiModel:()=>ea,PhiPreTrainedModel:()=>xi,PreTrainedModel:()=>K,PretrainedMixin:()=>Fr,PyAnnoteForAudioFrameClassification:()=>jn,PyAnnoteModel:()=>qi,PyAnnotePreTrainedModel:()=>Pn,QuestionAnsweringModelOutput:()=>rn,Qwen2ForCausalLM:()=>Jo,Qwen2Model:()=>Zo,Qwen2PreTrainedModel:()=>vi,RTDetrForObjectDetection:()=>Hs,RTDetrModel:()=>$a,RTDetrObjectDetectionOutput:()=>ka,RTDetrPreTrainedModel:()=>as,ResNetForImageClassification:()=>Da,ResNetModel:()=>za,ResNetPreTrainedModel:()=>Fi,RoFormerForMaskedLM:()=>Ne,RoFormerForQuestionAnswering:()=>ht,RoFormerForSequenceClassification:()=>qe,RoFormerForTokenClassification:()=>ut,RoFormerModel:()=>Re,RoFormerPreTrainedModel:()=>He,RobertaForMaskedLM:()=>mn,RobertaForQuestionAnswering:()=>kn,RobertaForSequenceClassification:()=>zr,RobertaForTokenClassification:()=>Je,RobertaModel:()=>Er,RobertaPreTrainedModel:()=>Qt,SamImageSegmentationOutput:()=>nl,SamModel:()=>rl,SamPreTrainedModel:()=>tl,SegformerForImageClassification:()=>El,SegformerForSemanticSegmentation:()=>Sl,SegformerModel:()=>gd,SegformerPreTrainedModel:()=>Cs,Seq2SeqLMOutput:()=>vd,SequenceClassifierOutput:()=>sr,SiglipModel:()=>is,SiglipPreTrainedModel:()=>hi,SiglipTextModel:()=>So,SiglipVisionModel:()=>$o,SpeechT5ForSpeechToText:()=>wl,SpeechT5ForTextToSpeech:()=>wu,SpeechT5HifiGan:()=>eo,SpeechT5Model:()=>gl,SpeechT5PreTrainedModel:()=>Ji,SqueezeBertForMaskedLM:()=>Jn,SqueezeBertForQuestionAnswering:()=>Sn,SqueezeBertForSequenceClassification:()=>xn,SqueezeBertModel:()=>Rs,SqueezeBertPreTrainedModel:()=>Bn,StableLmForCausalLM:()=>$l,StableLmModel:()=>ao,StableLmPreTrainedModel:()=>oo,Starcoder2ForCausalLM:()=>no,Starcoder2Model:()=>ei,Starcoder2PreTrainedModel:()=>ro,Swin2SRForImageSuperResolution:()=>Di,Swin2SRModel:()=>Ra,Swin2SRPreTrainedModel:()=>zi,SwinForImageClassification:()=>La,SwinModel:()=>Ba,SwinPreTrainedModel:()=>Oi,T5ForConditionalGeneration:()=>ws,T5Model:()=>gs,T5PreTrainedModel:()=>qn,TableTransformerForObjectDetection:()=>Aa,TableTransformerModel:()=>Pa,TableTransformerObjectDetectionOutput:()=>Ia,TableTransformerPreTrainedModel:()=>Ai,TokenClassifierOutput:()=>Qr,TrOCRForCausalLM:()=>bl,TrOCRPreTrainedModel:()=>yl,UniSpeechForCTC:()=>ll,UniSpeechForSequenceClassification:()=>ul,UniSpeechModel:()=>Ki,UniSpeechPreTrainedModel:()=>ls,UniSpeechSatForAudioFrameClassification:()=>Xs,UniSpeechSatForCTC:()=>Xi,UniSpeechSatForSequenceClassification:()=>dl,UniSpeechSatModel:()=>Ks,UniSpeechSatPreTrainedModel:()=>xs,ViTForImageClassification:()=>ua,ViTModel:()=>la,ViTPreTrainedModel:()=>os,VisionEncoderDecoderModel:()=>ci,VitMatteForImageMatting:()=>ha,VitMattePreTrainedModel:()=>pa,VitsModel:()=>io,VitsModelOutput:()=>Qu,VitsPreTrainedModel:()=>yu,Wav2Vec2BertForCTC:()=>Ys,Wav2Vec2BertForSequenceClassification:()=>cl,Wav2Vec2BertModel:()=>Qi,Wav2Vec2BertPreTrainedModel:()=>Qs,Wav2Vec2ForAudioFrameClassification:()=>Nn,Wav2Vec2ForCTC:()=>mu,Wav2Vec2ForSequenceClassification:()=>Rn,Wav2Vec2Model:()=>al,Wav2Vec2PreTrainedModel:()=>Ln,WavLMForAudioFrameClassification:()=>_l,WavLMForCTC:()=>Zi,WavLMForSequenceClassification:()=>fl,WavLMForXVector:()=>ml,WavLMModel:()=>hl,WavLMPreTrainedModel:()=>An,WeSpeakerResNetModel:()=>Hi,WeSpeakerResNetPreTrainedModel:()=>en,WhisperForConditionalGeneration:()=>di,WhisperModel:()=>Rt,WhisperPreTrainedModel:()=>it,XLMForQuestionAnswering:()=>Jr,XLMForSequenceClassification:()=>Zt,XLMForTokenClassification:()=>dn,XLMModel:()=>Xr,XLMPreTrainedModel:()=>gr,XLMRobertaForMaskedLM:()=>$t,XLMRobertaForQuestionAnswering:()=>Br,XLMRobertaForSequenceClassification:()=>mr,XLMRobertaForTokenClassification:()=>$r,XLMRobertaModel:()=>yr,XLMRobertaPreTrainedModel:()=>wr,XLMWithLMHeadModel:()=>sn,XVectorOutput:()=>nu,YolosForObjectDetection:()=>Ja,YolosModel:()=>Za,YolosObjectDetectionOutput:()=>el,YolosPreTrainedModel:()=>Ui});var v=u("./src/configs.js"),W=u("./src/backends/onnx.js"),me=u("./src/utils/dtypes.js"),be=u("./src/utils/generic.js"),Me=u("./src/utils/core.js"),D=u("./src/utils/hub.js"),E=u("./src/generation/logits_process.js"),N=u("./src/generation/configuration_utils.js"),P=u("./src/utils/tensor.js"),Y=u("./src/utils/maths.js"),Z=u("./src/generation/stopping_criteria.js"),oe=u("./src/generation/logits_sampler.js"),le=u("./src/env.js"),L=u("./src/models/whisper/generation_whisper.js"),te=u("./src/models/whisper/common_whisper.js");const J={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7},de=new Map,ae=new Map,j=new Map;async function I(g,h,B){let re=B.device;re&&typeof re!="string"&&(re.hasOwnProperty(h)?re=re[h]:(console.warn(`device not specified for "${h}". Using the default device.`),re=null));const Be=(0,W.deviceToExecutionProviders)(re);let je=B.dtype;if(typeof je!="string"&&(je&&je.hasOwnProperty(h)?je=je[h]:(je=me.DEFAULT_DEVICE_DTYPE_MAPPING[Be[0]],console.warn(`dtype not specified for "${h}". Using the default dtype for this device (${je}).`))),me.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(je)){if(je===me.DATA_TYPES.fp16&&re==="webgpu"&&!await(0,me.isWebGpuFp16Supported)())throw new Error(`The device (${re}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${je}. Should be one of: ${Object.keys(me.DATA_TYPES).join(", ")}`);const wt=me.DEFAULT_DTYPE_SUFFIX_MAPPING[je],Pt=`${B.subfolder??""}/${h}${wt}.onnx`,qt={...B.session_options};qt.executionProviders??=Be;const pr=(0,D.getModelFile)(g,Pt,!0,B);let Cr=[];if(B.use_external_data_format&&(B.use_external_data_format===!0||typeof B.use_external_data_format=="object"&&B.use_external_data_format.hasOwnProperty(h)&&B.use_external_data_format[h]===!0)){if(le.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const er=`${h}${wt}.onnx_data`,Ht=`${B.subfolder??""}/${er}`;Cr.push(new Promise(async(Vr,ur)=>{const br=await(0,D.getModelFile)(g,Ht,!0,B);Vr({path:er,data:br})}))}else qt.externalData!==void 0&&(Cr=qt.externalData.map(async er=>{if(typeof er.data=="string"){const Ht=await(0,D.getModelFile)(g,er.data,!0,B);return{...er,data:Ht}}return er}));if(Cr.length>0&&(qt.externalData=await Promise.all(Cr)),re==="webgpu"){const er=(0,v.getKeyValueShapes)(B.config,{prefix:"present"});if(Object.keys(er).length>0&&!(0,W.isONNXProxy)()){const Ht={};for(const Vr in er)Ht[Vr]="gpu-buffer";qt.preferredOutputLocation=Ht}}return{buffer:await pr,session_options:qt}}async function R(g,h,B){return Object.fromEntries(await Promise.all(Object.keys(h).map(async re=>{const{buffer:Be,session_options:je}=await I(g,h[re],B),wt=await(0,W.createInferenceSession)(Be,je);return[re,wt]})))}function k(g,h){const B=Object.create(null),re=[];for(const wt of g.inputNames){const Pt=h[wt];if(!(Pt instanceof P.Tensor)){re.push(wt);continue}B[wt]=(0,W.isONNXProxy)()?Pt.clone():Pt}if(re.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${re.join(", ")}.`);const Be=Object.keys(h).length,je=g.inputNames.length;if(Be>je){let wt=Object.keys(h).filter(Pt=>!g.inputNames.includes(Pt));console.warn(`WARNING: Too many inputs were provided (${Be} > ${je}). The following inputs will be ignored: "${wt.join(", ")}".`)}return B}async function _e(g,h){const B=k(g,h);try{const re=Object.fromEntries(Object.entries(B).map(([je,wt])=>[je,wt.ort_tensor]));let Be=await g.run(re);return Be=we(Be),Be}catch(re){throw console.error(`An error occurred during model execution: "${re}".`),console.error("Inputs given to model:",B),re}}function we(g){for(let h in g)(0,W.isONNXTensor)(g[h])?g[h]=new P.Tensor(g[h]):typeof g[h]=="object"&&we(g[h]);return g}function Ce(g){if(g instanceof P.Tensor)return g;if(g.length===0)throw Error("items must be non-empty");if(Array.isArray(g[0])){if(g.some(h=>h.length!==g[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new P.Tensor("int64",BigInt64Array.from(g.flat().map(h=>BigInt(h))),[g.length,g[0].length])}else return new P.Tensor("int64",BigInt64Array.from(g.map(h=>BigInt(h))),[1,g.length])}function Se(g){return new P.Tensor("bool",[g],[1])}async function Pe(g,h){let{encoder_outputs:B,input_ids:re,decoder_input_ids:Be,...je}=h;if(!B){const Pt=(0,Me.pick)(h,g.sessions.model.inputNames);B=(await Ye(g,Pt)).last_hidden_state}return je.input_ids=Be,je.encoder_hidden_states=B,g.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(je.encoder_attention_mask=h.attention_mask),await Xe(g,je,!0)}async function Ye(g,h){const B=g.sessions.model,re=(0,Me.pick)(h,B.inputNames);if(B.inputNames.includes("inputs_embeds")&&!re.inputs_embeds){if(!h.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");re.inputs_embeds=await g.encode_text({input_ids:h.input_ids})}return B.inputNames.includes("token_type_ids")&&!re.token_type_ids&&(re.token_type_ids=new P.Tensor("int64",new BigInt64Array(re.input_ids.data.length),re.input_ids.dims)),await _e(B,re)}async function Xe(g,h,B=!1){const re=g.sessions[B?"decoder_model_merged":"model"],{past_key_values:Be,...je}=h;re.inputNames.includes("use_cache_branch")&&(je.use_cache_branch=Se(!!Be)),re.inputNames.includes("position_ids")&&je.attention_mask&&!je.position_ids&&(je.position_ids=ge(je,Be)),g.addPastKeyValues(je,Be);const wt=(0,Me.pick)(je,re.inputNames);return await _e(re,wt)}async function ct(g,{input_ids:h=null,attention_mask:B=null,pixel_values:re=null,position_ids:Be=null,inputs_embeds:je=null,past_key_values:wt=null,generation_config:Pt=null,logits_processor:qt=null,...pr}){if(!je){if(je=await g.encode_text({input_ids:h}),re&&h.dims[1]!==1){const kr=await g.encode_image({pixel_values:re});({inputs_embeds:je,attention_mask:B}=g._merge_input_ids_with_image_features({image_features:kr,inputs_embeds:je,input_ids:h,attention_mask:B}))}else if(wt&&re&&h.dims[1]===1){const kr=h.dims[1],er=Object.values(wt)[0].dims.at(-2);B=(0,P.cat)([(0,P.ones)([h.dims[0],er]),B.slice(null,[B.dims[1]-kr,B.dims[1]])],1)}}return await Xe(g,{inputs_embeds:je,past_key_values:wt,attention_mask:B,position_ids:Be,generation_config:Pt,logits_processor:qt},!0)}function ge(g,h=null){const{input_ids:B,inputs_embeds:re,attention_mask:Be}=g,[je,wt]=Be.dims,Pt=new BigInt64Array(Be.data.length);for(let pr=0;pr<je;++pr){const Cr=pr*wt;let kr=BigInt(0);for(let er=0;er<wt;++er){const Ht=Cr+er;Be.data[Ht]===0n?Pt[Ht]=BigInt(1):(Pt[Ht]=kr,kr+=Be.data[Ht])}}let qt=new P.Tensor("int64",Pt,Be.dims);if(h){const pr=-(B??re).dims.at(1);qt=qt.slice(null,[pr,null])}return qt}function V(g,h,B,re){if(B.past_key_values){const Be=Object.values(B.past_key_values)[0].dims.at(-2),{input_ids:je,attention_mask:wt}=B;if(!(wt&&wt.dims[1]>je.dims[1])){if(Be<je.dims[1])B.input_ids=je.slice(null,[Be,null]);else if(g.config.image_token_index!=null&&je.data.some(Pt=>Pt==g.config.image_token_index)){const Pt=g.config.num_image_tokens;if(!Pt)throw new Error("`num_image_tokens` is missing in the model configuration.");const qt=je.dims[1]-(Be-Pt);B.input_ids=je.slice(null,[-qt,null]),B.attention_mask=(0,P.ones)([1,Be+qt])}}}return B}function ce(g,h,B,re){return B.past_key_values&&(h=h.map(Be=>[Be.at(-1)])),{...B,decoder_input_ids:Ce(h)}}function Ee(g,...h){return g.config.is_encoder_decoder?ce(g,...h):V(g,...h)}class K extends be.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(h,B){super(),this.config=h,this.sessions=B;const re=j.get(this.constructor),Be=de.get(re);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,Be){case J.DecoderOnly:this.can_generate=!0,this._forward=Xe,this._prepare_inputs_for_generation=V;break;case J.Seq2Seq:case J.Vision2Seq:case J.Musicgen:this.can_generate=!0,this._forward=Pe,this._prepare_inputs_for_generation=ce;break;case J.EncoderDecoder:this._forward=Pe;break;case J.ImageTextToText:this.can_generate=!0,this._forward=ct,this._prepare_inputs_for_generation=Ee;break;default:this._forward=Ye;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const h=[];for(const B of Object.values(this.sessions))B?.handler?.dispose&&h.push(B.handler.dispose());return await Promise.all(h)}static async from_pretrained(h,{progress_callback:B=null,config:re=null,cache_dir:Be=null,local_files_only:je=!1,revision:wt="main",model_file_name:Pt=null,subfolder:qt="onnx",device:pr=null,dtype:Cr=null,use_external_data_format:kr=null,session_options:er={}}={}){let Ht={progress_callback:B,config:re,cache_dir:Be,local_files_only:je,revision:wt,model_file_name:Pt,subfolder:qt,device:pr,dtype:Cr,use_external_data_format:kr,session_options:er};const Vr=j.get(this),ur=de.get(Vr);re=Ht.config=await v.AutoConfig.from_pretrained(h,Ht);let br;if(ur===J.DecoderOnly)br=await Promise.all([R(h,{model:Ht.model_file_name??"model"},Ht),(0,D.getModelJSON)(h,"generation_config.json",!1,Ht)]);else if(ur===J.Seq2Seq||ur===J.Vision2Seq)br=await Promise.all([R(h,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Ht),(0,D.getModelJSON)(h,"generation_config.json",!1,Ht)]);else if(ur===J.MaskGeneration)br=await Promise.all([R(h,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},Ht)]);else if(ur===J.EncoderDecoder)br=await Promise.all([R(h,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Ht)]);else if(ur===J.ImageTextToText){const Ur={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};re.is_encoder_decoder&&(Ur.model="encoder_model"),br=await Promise.all([R(h,Ur,Ht),(0,D.getModelJSON)(h,"generation_config.json",!1,Ht)])}else ur===J.Musicgen?br=await Promise.all([R(h,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},Ht),(0,D.getModelJSON)(h,"generation_config.json",!1,Ht)]):(ur!==J.EncoderOnly&&console.warn(`Model type for '${Vr??re?.model_type}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`),br=await Promise.all([R(h,{model:Ht.model_file_name??"model"},Ht)]));return new this(re,...br)}async _call(h){return await this.forward(h)}async forward(h){return await this._forward(this,h)}_get_logits_warper(h){const B=new E.LogitsProcessorList;return h.temperature!==null&&h.temperature!==1&&B.push(new E.TemperatureLogitsWarper(h.temperature)),h.top_k!==null&&h.top_k!==0&&B.push(new E.TopKLogitsWarper(h.top_k)),h.top_p!==null&&h.top_p<1&&B.push(new E.TopPLogitsWarper(h.top_p)),B}_get_logits_processor(h,B,re=null){const Be=new E.LogitsProcessorList;if(h.repetition_penalty!==null&&h.repetition_penalty!==1&&Be.push(new E.RepetitionPenaltyLogitsProcessor(h.repetition_penalty)),h.no_repeat_ngram_size!==null&&h.no_repeat_ngram_size>0&&Be.push(new E.NoRepeatNGramLogitsProcessor(h.no_repeat_ngram_size)),h.bad_words_ids!==null&&Be.push(new E.NoBadWordsLogitsProcessor(h.bad_words_ids,h.eos_token_id)),h.min_length!==null&&h.eos_token_id!==null&&h.min_length>0&&Be.push(new E.MinLengthLogitsProcessor(h.min_length,h.eos_token_id)),h.min_new_tokens!==null&&h.eos_token_id!==null&&h.min_new_tokens>0&&Be.push(new E.MinNewTokensLengthLogitsProcessor(B,h.min_new_tokens,h.eos_token_id)),h.forced_bos_token_id!==null&&Be.push(new E.ForcedBOSTokenLogitsProcessor(h.forced_bos_token_id)),h.forced_eos_token_id!==null&&Be.push(new E.ForcedEOSTokenLogitsProcessor(h.max_length,h.forced_eos_token_id)),h.begin_suppress_tokens!==null){const je=B>1||h.forced_bos_token_id===null?B:B+1;Be.push(new E.SuppressTokensAtBeginLogitsProcessor(h.begin_suppress_tokens,je))}return h.guidance_scale!==null&&h.guidance_scale>1&&Be.push(new E.ClassifierFreeGuidanceLogitsProcessor(h.guidance_scale)),re!==null&&Be.extend(re),Be}_prepare_generation_config(h,B,re=N.GenerationConfig){const Be={...this.config};for(const wt of["decoder","generator","text_config"])wt in Be&&Object.assign(Be,Be[wt]);const je=new re(Be);return"generation_config"in this&&Object.assign(je,this.generation_config),h&&Object.assign(je,h),B&&Object.assign(je,(0,Me.pick)(B,Object.getOwnPropertyNames(je))),je}_get_stopping_criteria(h,B=null){const re=new Z.StoppingCriteriaList;return h.max_length!==null&&re.push(new Z.MaxLengthCriteria(h.max_length,this.config.max_position_embeddings??null)),h.eos_token_id!==null&&re.push(new Z.EosTokenCriteria(h.eos_token_id)),B&&re.extend(B),re}_validate_model_class(){if(!this.can_generate){const h=[ri,go,_o,ti],B=j.get(this.constructor),re=new Set,Be=this.config.model_type;for(const wt of h){const Pt=wt.get(Be);Pt&&re.add(Pt[0])}let je=`The current model class (${B}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw re.size>0&&(je+=` Please use the following class instead: ${[...re].join(", ")}`),Error(je)}}prepare_inputs_for_generation(...h){return this._prepare_inputs_for_generation(this,...h)}_update_model_kwargs_for_generation({generated_input_ids:h,outputs:B,model_inputs:re,is_encoder_decoder:Be}){return re.past_key_values=this.getPastKeyValues(B,re.past_key_values),re.input_ids=new P.Tensor("int64",h.flat(),[h.length,1]),Be||(re.attention_mask=(0,P.cat)([re.attention_mask,(0,P.ones)([re.attention_mask.dims[0],1])],1)),re.position_ids=null,re}_prepare_model_inputs({inputs:h,bos_token_id:B,model_kwargs:re}){const Be=(0,Me.pick)(re,this.forward_params),je=this.main_input_name;if(je in Be){if(h)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else Be[je]=h;return{inputs_tensor:Be[je],model_inputs:Be,model_input_name:je}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:h,model_inputs:B,model_input_name:re,generation_config:Be}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!B.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:wt,pixel_values:Pt,attention_mask:qt,...pr}=B,Cr=await this._prepare_inputs_embeds(B);B={...pr,...(0,Me.pick)(Cr,["inputs_embeds","attention_mask"])}}let{last_hidden_state:je}=await Ye(this,B);if(Be.guidance_scale!==null&&Be.guidance_scale>1)je=(0,P.cat)([je,(0,P.full_like)(je,0)],0),"attention_mask"in B&&(B.attention_mask=(0,P.cat)([B.attention_mask,(0,P.zeros_like)(B.attention_mask)],0));else if(B.decoder_input_ids){const wt=Ce(B.decoder_input_ids).dims[0];if(wt!==je.dims[0]){if(je.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${je.dims[0]}) than the decoder inputs (${wt}).`);je=(0,P.cat)(Array.from({length:wt},()=>je),0)}}return B.encoder_outputs=je,B}_prepare_decoder_input_ids_for_generation({batch_size:h,model_input_name:B,model_kwargs:re,decoder_start_token_id:Be,bos_token_id:je,generation_config:wt}){let{decoder_input_ids:Pt,...qt}=re;if(Pt)Array.isArray(Pt[0])||(Pt=Array.from({length:h},()=>Pt));else if(Be??=je,this.config.model_type==="musicgen")Pt=Array.from({length:h*this.config.decoder.num_codebooks},()=>[Be]);else if(Array.isArray(Be)){if(Be.length!==h)throw new Error(`\`decoder_start_token_id\` expcted to have length ${h} but got ${Be.length}`);Pt=Be}else Pt=Array.from({length:h},()=>[Be]);return Pt=Ce(Pt),re.decoder_attention_mask=(0,P.ones_like)(Pt),{input_ids:Pt,model_inputs:qt}}async generate({inputs:h=null,generation_config:B=null,logits_processor:re=null,stopping_criteria:Be=null,streamer:je=null,...wt}){this._validate_model_class(),B=this._prepare_generation_config(B,wt);let{inputs_tensor:Pt,model_inputs:qt,model_input_name:pr}=this._prepare_model_inputs({inputs:h,model_kwargs:wt});const Cr=this.config.is_encoder_decoder;Cr&&("encoder_outputs"in qt||(qt=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:Pt,model_inputs:qt,model_input_name:pr,generation_config:B})));let kr;Cr?{input_ids:kr,model_inputs:qt}=this._prepare_decoder_input_ids_for_generation({batch_size:qt[pr].dims.at(0),model_input_name:pr,model_kwargs:qt,decoder_start_token_id:B.decoder_start_token_id,bos_token_id:B.bos_token_id,generation_config:B}):kr=qt[pr];let er=kr.dims.at(-1);B.max_new_tokens!==null&&(B.max_length=er+B.max_new_tokens);const Ht=this._get_logits_processor(B,er,re),Vr=this._get_stopping_criteria(B,Be),ur=qt[pr].dims.at(0),br=oe.LogitsSampler.getSampler(B),Ur=new Array(ur).fill(0),Yr=kr.tolist();je&&je.put(Yr);let Vn=null,Mn={};for(;;){qt=this.prepare_inputs_for_generation(Yr,qt,B);const Wr=await this.forward(qt);if(B.output_attentions&&B.return_dict_in_generate){const Cn=this.getAttentions(Wr);for(const us in Cn)us in Mn||(Mn[us]=[]),Mn[us].push(Cn[us])}const pn=Wr.logits.slice(null,-1,null),$s=Ht(Yr,pn),ks=[];for(let Cn=0;Cn<$s.dims.at(0);++Cn){const us=$s[Cn],Td=await br(us);for(const[Yu,Zu]of Td){const iu=BigInt(Yu);Ur[Cn]+=Zu,Yr[Cn].push(iu),ks.push([iu]);break}}if(je&&je.put(ks),Vr(Yr).every(Cn=>Cn)){B.return_dict_in_generate&&(Vn=this.getPastKeyValues(Wr,qt.past_key_values,!1));break}qt=this._update_model_kwargs_for_generation({generated_input_ids:ks,outputs:Wr,model_inputs:qt,is_encoder_decoder:Cr})}je&&je.end();const an=new P.Tensor("int64",Yr.flat(),[Yr.length,Yr[0].length]);return B.return_dict_in_generate?{sequences:an,past_key_values:Vn,...Mn}:an}getPastKeyValues(h,B,re=!0){const Be=Object.create(null);for(const je in h)if(je.startsWith("present")){const wt=je.replace("present","past_key_values");if(B&&je.includes("encoder"))Be[wt]=B[wt];else{if(re&&B){const Pt=B[wt];Pt.location==="gpu-buffer"&&Pt.dispose()}Be[wt]=h[je]}}return Be}getAttentions(h){const B={};for(const re of["cross_attentions","encoder_attentions","decoder_attentions"])for(const Be in h)Be.startsWith(re)&&(re in B||(B[re]=[]),B[re].push(h[Be]));return B}addPastKeyValues(h,B){if(B)Object.assign(h,B);else{const re=this.custom_config.kv_cache_dtype??"float32",Be=re==="float16"?new Uint16Array:[],je=(0,v.getKeyValueShapes)(this.config);for(const wt in je)h[wt]=new P.Tensor(re,Be,je[wt])}}async encode_image({pixel_values:h}){const B=(await _e(this.sessions.vision_encoder,{pixel_values:h})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${B.dims[1]}).`),this.config.num_image_tokens=B.dims[1]),B}async encode_text({input_ids:h}){return(await _e(this.sessions.embed_tokens,{input_ids:h})).inputs_embeds}}class We{}class dt extends We{constructor({last_hidden_state:h,hidden_states:B=null,attentions:re=null}){super(),this.last_hidden_state=h,this.hidden_states=B,this.attentions=re}}class tt extends K{}class at extends tt{}class Oe extends tt{async _call(h){return new tn(await super._call(h))}}class st extends tt{async _call(h){return new sr(await super._call(h))}}class Tt extends tt{async _call(h){return new Qr(await super._call(h))}}class Ie extends tt{async _call(h){return new rn(await super._call(h))}}class G extends K{}class $e extends G{}class He extends K{}class Re extends He{}class Ne extends He{async _call(h){return new tn(await super._call(h))}}class qe extends He{async _call(h){return new sr(await super._call(h))}}class ut extends He{async _call(h){return new Qr(await super._call(h))}}class ht extends He{async _call(h){return new rn(await super._call(h))}}class vt extends K{}class xt extends vt{}class M extends vt{async _call(h){return new tn(await super._call(h))}}class U extends vt{async _call(h){return new sr(await super._call(h))}}class A extends vt{async _call(h){return new Qr(await super._call(h))}}class ee extends vt{async _call(h){return new rn(await super._call(h))}}class he extends K{}class Ze extends he{}class Ke extends he{async _call(h){return new tn(await super._call(h))}}class _t extends he{async _call(h){return new sr(await super._call(h))}}class rt extends he{async _call(h){return new Qr(await super._call(h))}}class Te extends he{async _call(h){return new rn(await super._call(h))}}class $ extends K{}class ie extends ${}class ve extends ${async _call(h){return new tn(await super._call(h))}}class Fe extends ${async _call(h){return new sr(await super._call(h))}}class ke extends ${async _call(h){return new Qr(await super._call(h))}}class ze extends ${async _call(h){return new rn(await super._call(h))}}class lt extends K{}class nt extends lt{}class bt extends lt{async _call(h){return new tn(await super._call(h))}}class ft extends lt{async _call(h){return new sr(await super._call(h))}}class Et extends lt{async _call(h){return new Qr(await super._call(h))}}class zt extends lt{async _call(h){return new rn(await super._call(h))}}class Ge extends K{}class Bt extends Ge{}class Dt extends Ge{async _call(h){return new tn(await super._call(h))}}class Gt extends Ge{async _call(h){return new sr(await super._call(h))}}class Xt extends Ge{async _call(h){return new Qr(await super._call(h))}}class Jt extends Ge{async _call(h){return new rn(await super._call(h))}}class jt extends K{}class xr extends jt{}class Nr extends jt{async _call(h){return new sr(await super._call(h))}}class Tr extends jt{async _call(h){return new Qr(await super._call(h))}}class Qe extends jt{async _call(h){return new rn(await super._call(h))}}class St extends jt{async _call(h){return new tn(await super._call(h))}}class Ot extends K{}class Zr extends Ot{}class ps extends Ot{async _call(h){return new tn(await super._call(h))}}class Zn extends Ot{async _call(h){return new sr(await super._call(h))}}class jr extends Ot{async _call(h){return new Qr(await super._call(h))}}class un extends K{}class qr extends un{}class Wn extends un{async _call(h){return new tn(await super._call(h))}}class Or extends un{async _call(h){return new sr(await super._call(h))}}class Dn extends un{async _call(h){return new rn(await super._call(h))}}class En extends K{}class Ls extends En{}class hs extends En{async _call(h){return new tn(await super._call(h))}}class fs extends En{async _call(h){return new sr(await super._call(h))}}class ms extends En{async _call(h){return new Qr(await super._call(h))}}class _s extends En{async _call(h){return new rn(await super._call(h))}}class Bn extends K{}class Rs extends Bn{}class Jn extends Bn{async _call(h){return new tn(await super._call(h))}}class xn extends Bn{async _call(h){return new sr(await super._call(h))}}class Sn extends Bn{async _call(h){return new rn(await super._call(h))}}class $n extends K{}class Gn extends $n{}class es extends $n{async _call(h){return new sr(await super._call(h))}}class ts extends $n{async _call(h){return new rn(await super._call(h))}}class Yt extends $n{async _call(h){return new tn(await super._call(h))}}class qn extends K{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];constructor(h,B,re){super(h,B),this.generation_config=re}}class gs extends qn{}class ws extends qn{}class rs extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class ys extends rs{}class bs extends rs{}class ns extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Ms extends ns{}class Dr extends ns{}class fn extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class ye extends fn{}class _ extends fn{}class z extends fn{async _call(h){return new sr(await super._call(h))}}class X extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Q extends X{}class xe extends X{}class De extends X{async _call(h){return new sr(await super._call(h))}}class Mt extends X{}class gt extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Ct extends gt{}class mt extends gt{}class cr extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class rr extends cr{}class fr extends cr{}class Qt extends K{}class Er extends Qt{}class mn extends Qt{async _call(h){return new tn(await super._call(h))}}class zr extends Qt{async _call(h){return new sr(await super._call(h))}}class Je extends Qt{async _call(h){return new Qr(await super._call(h))}}class kn extends Qt{async _call(h){return new rn(await super._call(h))}}class gr extends K{}class Xr extends gr{}class sn extends gr{async _call(h){return new tn(await super._call(h))}}class Zt extends gr{async _call(h){return new sr(await super._call(h))}}class dn extends gr{async _call(h){return new Qr(await super._call(h))}}class Jr extends gr{async _call(h){return new rn(await super._call(h))}}class wr extends K{}class yr extends wr{}class $t extends wr{async _call(h){return new tn(await super._call(h))}}class mr extends wr{async _call(h){return new sr(await super._call(h))}}class $r extends wr{async _call(h){return new Qr(await super._call(h))}}class Br extends wr{async _call(h){return new rn(await super._call(h))}}class cn extends K{}class It extends cn{}class Ns extends cn{}class it extends K{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"];constructor(h,B,re){super(h,B),this.generation_config=re}}class Rt extends it{}class di extends it{_prepare_generation_config(h,B){return super._prepare_generation_config(h,B,L.WhisperGenerationConfig)}_retrieve_init_tokens(h){const B=[h.decoder_start_token_id];let re=h.language;const Be=h.task;if(h.is_multilingual){re||(console.warn("No language specified - defaulting to English (en)."),re="en");const wt=`<|${(0,te.whisper_language_to_code)(re)}|>`;B.push(h.lang_to_id[wt]),B.push(h.task_to_id[Be??"transcribe"])}else if(re||Be)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!h.return_timestamps&&h.no_timestamps_token_id&&B.at(-1)!==h.no_timestamps_token_id?B.push(h.no_timestamps_token_id):h.return_timestamps&&B.at(-1)===h.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),B.pop()),B.filter(je=>je!=null)}async generate({inputs:h=null,generation_config:B=null,logits_processor:re=null,stopping_criteria:Be=null,...je}){B=this._prepare_generation_config(B,je);const wt=je.decoder_input_ids??this._retrieve_init_tokens(B);if(B.return_timestamps&&(re??=new E.LogitsProcessorList,re.push(new E.WhisperTimeStampLogitsProcessor(B,wt))),B.begin_suppress_tokens&&(re??=new E.LogitsProcessorList,re.push(new E.SuppressTokensAtBeginLogitsProcessor(B.begin_suppress_tokens,wt.length))),B.return_token_timestamps){if(!B.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");B.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),B.output_attentions=!0,B.return_dict_in_generate=!0}const Pt=await super.generate({inputs:h,generation_config:B,logits_processor:re,decoder_input_ids:wt,...je});return B.return_token_timestamps&&(Pt.token_timestamps=this._extract_token_timestamps(Pt,B.alignment_heads,B.num_frames)),Pt}_extract_token_timestamps(h,B,re=null,Be=.02){if(!h.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");re==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let je=this.config.median_filter_width;je===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),je=7);const wt=h.cross_attentions,Pt=Array.from({length:this.config.decoder_layers},(ur,br)=>(0,P.cat)(wt.map(Ur=>Ur[br]),2)),qt=(0,P.stack)(B.map(([ur,br])=>{if(ur>=Pt.length)throw new Error(`Layer index ${ur} is out of bounds for cross attentions (length ${Pt.length}).`);return re?Pt[ur].slice(null,br,null,[0,re]):Pt[ur].slice(null,br)})).transpose(1,0,2,3),[pr,Cr]=(0,P.std_mean)(qt,-2,0,!0),kr=qt.clone();for(let ur=0;ur<kr.dims[0];++ur){const br=kr[ur];for(let Ur=0;Ur<br.dims[0];++Ur){const Yr=br[Ur],Vn=pr[ur][Ur][0].data,Mn=Cr[ur][Ur][0].data;for(let an=0;an<Yr.dims[0];++an){let Wr=Yr[an].data;for(let pn=0;pn<Wr.length;++pn)Wr[pn]=(Wr[pn]-Mn[pn])/Vn[pn];Wr.set((0,Y.medianFilter)(Wr,je))}}}const er=[(0,P.mean)(kr,1)],Ht=h.sequences.dims,Vr=new P.Tensor("float32",new Float32Array(Ht[0]*Ht[1]),Ht);for(let ur=0;ur<Ht[0];++ur){const br=er[ur].neg().squeeze_(0),[Ur,Yr]=(0,Y.dynamic_time_warping)(br.tolist()),Vn=Array.from({length:Ur.length-1},(Wr,pn)=>Ur[pn+1]-Ur[pn]),Mn=(0,Me.mergeArrays)([1],Vn).map(Wr=>!!Wr),an=[];for(let Wr=0;Wr<Mn.length;++Wr)Mn[Wr]&&an.push(Yr[Wr]*Be);Vr[ur].data.set(an,1)}return Vr}}class ci extends K{main_input_name="pixel_values";forward_params=["pixel_values","input_ids","encoder_hidden_states","past_key_values"];constructor(h,B,re){super(h,B),this.generation_config=re}}class xo extends K{forward_params=["input_ids","pixel_values","attention_mask","position_ids","past_key_values"];constructor(h,B,re){super(h,B),this.generation_config=re}}class ss extends xo{_merge_input_ids_with_image_features({inputs_embeds:h,image_features:B,input_ids:re,attention_mask:Be}){const je=this.config.image_token_index,Pt=re.tolist().map(er=>er.findIndex(Ht=>Ht==je)),qt=Pt.every(er=>er===-1),pr=Pt.every(er=>er!==-1);if(!qt&&!pr)throw new Error("Every input should contain either 0 or 1 image token.");if(qt)return{inputs_embeds:h,attention_mask:Be};const Cr=[],kr=[];for(let er=0;er<Pt.length;++er){const Ht=Pt[er],Vr=h[er],ur=B[er],br=Be[er];Cr.push((0,P.cat)([Vr.slice([0,Ht]),ur,Vr.slice([Ht+1,Vr.dims[0]])],0)),kr.push((0,P.cat)([br.slice([0,Ht]),(0,P.ones)([ur.dims[0]]),br.slice([Ht+1,br.dims[0]])],0))}return{inputs_embeds:(0,P.stack)(Cr,0),attention_mask:(0,P.stack)(kr,0)}}}class nr extends ss{}class To extends K{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds";constructor(h,B,re){super(h,B),this.generation_config=re}}class pi extends To{_merge_input_ids_with_image_features({inputs_embeds:h,image_features:B,input_ids:re,attention_mask:Be}){return{inputs_embeds:(0,P.cat)([B,h],1),attention_mask:(0,P.cat)([(0,P.ones)(B.dims.slice(0,2)),Be],1)}}async _prepare_inputs_embeds({input_ids:h,pixel_values:B,inputs_embeds:re,attention_mask:Be}){if(!h&&!B)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let je,wt;return h&&(je=await this.encode_text({input_ids:h})),B&&(wt=await this.encode_image({pixel_values:B})),je&&wt?{inputs_embeds:re,attention_mask:Be}=this._merge_input_ids_with_image_features({inputs_embeds:je,image_features:wt,input_ids:h,attention_mask:Be}):re=je||wt,{inputs_embeds:re,attention_mask:Be}}async forward({input_ids:h,pixel_values:B,attention_mask:re,decoder_input_ids:Be,decoder_attention_mask:je,encoder_outputs:wt,past_key_values:Pt,inputs_embeds:qt,decoder_inputs_embeds:pr}){if(qt||({inputs_embeds:qt,attention_mask:re}=await this._prepare_inputs_embeds({input_ids:h,pixel_values:B,inputs_embeds:qt,attention_mask:re})),!wt){let{last_hidden_state:er}=await Ye(this,{inputs_embeds:qt,attention_mask:re});wt=er}if(!pr){if(!Be)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");pr=await this.encode_text({input_ids:Be})}return await Xe(this,{inputs_embeds:pr,attention_mask:je,encoder_attention_mask:re,encoder_hidden_states:wt,past_key_values:Pt},!0)}}class vs extends K{}class Co extends vs{}class Tn extends vs{static async from_pretrained(h,B={}){return B.model_file_name??="text_model",super.from_pretrained(h,B)}}class Eo extends vs{static async from_pretrained(h,B={}){return B.model_file_name??="vision_model",super.from_pretrained(h,B)}}class hi extends K{}class is extends hi{}class So extends hi{static async from_pretrained(h,B={}){return B.model_file_name??="text_model",super.from_pretrained(h,B)}}class $o extends vs{static async from_pretrained(h,B={}){return B.model_file_name??="vision_model",super.from_pretrained(h,B)}}class ko extends K{}class Po extends ko{}class fi extends K{}class Ao extends fi{}class Io extends fi{}class mi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Fo extends mi{}class Oo extends mi{}class _n extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class zo extends _n{}class Do extends _n{}class _i extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Bo extends _i{}class Lo extends _i{}class gi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Ro extends gi{}class No extends gi{}class wi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class jo extends wi{}class cu extends wi{}class gn extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Vo extends gn{}class js extends gn{}class Vs extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class bn extends Vs{}class Uo extends Vs{}class yi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Wo extends yi{}class Go extends yi{}class bi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class qo extends bi{}class Ho extends bi{}class Mi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Ko extends Mi{}class Xo extends Mi{}class wn extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Qo extends wn{}class Yo extends wn{}class vi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Zo extends vi{}class Jo extends vi{}class xi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class ea extends xi{}class ta extends xi{}class Ti extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class ra extends Ti{}class Ci extends Ti{}class Us extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class na extends Us{}class sa extends Us{}class Ws extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class pu extends Ws{}class ia extends Ws{}class Ei extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class oa extends Ei{}class aa extends Ei{}class os extends K{}class la extends os{}class ua extends os{async _call(h){return new sr(await super._call(h))}}class Gs extends K{}class da extends Gs{}class ca extends Gs{async _call(h){return new sr(await super._call(h))}}class pa extends K{}class ha extends pa{async _call(h){return new su(await super._call(h))}}class fa extends K{}class ma extends fa{}class _a extends fa{async _call(h){return new sr(await super._call(h))}}class Si extends K{}class hu extends Si{}class ga extends Si{async _call(h){return new sr(await super._call(h))}}class _r extends K{}class wa extends _r{}class ya extends _r{}class $i extends K{}class ba extends $i{}class Ma extends $i{}class ki extends K{}class va extends ki{}class xa extends ki{async _call(h){return new sr(await super._call(h))}}class qs extends K{}class Ta extends qs{}class Ca extends qs{async _call(h){return new Pi(await super._call(h))}}class Ea extends qs{async _call(h){return new Sa(await super._call(h))}}class Pi extends We{constructor({logits:h,pred_boxes:B}){super(),this.logits=h,this.pred_boxes=B}}class Sa extends We{constructor({logits:h,pred_boxes:B,pred_masks:re}){super(),this.logits=h,this.pred_boxes=B,this.pred_masks=re}}class as extends K{}class $a extends as{}class Hs extends as{async _call(h){return new ka(await super._call(h))}}class ka extends We{constructor({logits:h,pred_boxes:B}){super(),this.logits=h,this.pred_boxes=B}}class Ai extends K{}class Pa extends Ai{}class Aa extends Ai{async _call(h){return new Ia(await super._call(h))}}class Ia extends Pi{}class Ii extends K{}class Fa extends Ii{}class Oa extends Ii{async _call(h){return new sr(await super._call(h))}}class Fi extends K{}class za extends Fi{}class Da extends Fi{async _call(h){return new sr(await super._call(h))}}class Oi extends K{}class Ba extends Oi{}class La extends Oi{async _call(h){return new sr(await super._call(h))}}class zi extends K{}class Ra extends zi{}class Di extends zi{}class Bi extends K{}class Li extends Bi{}class Ri extends Bi{}class Na extends K{}class ja extends Na{}class Ni extends K{}class Va extends Ni{}class Ua extends Ni{}class Wa extends K{}class ji extends Wa{}class Vi extends K{}class Ga extends Vi{}class qa extends Vi{async _call(h){return new sr(await super._call(h))}}class Ha extends K{}class Ka extends Ha{}class Xa extends Ha{async _call(h){return new sr(await super._call(h))}}class yn extends K{}class Qa extends yn{}class Ya extends yn{async _call(h){return new sr(await super._call(h))}}class Ui extends K{}class Za extends Ui{}class Ja extends Ui{async _call(h){return new el(await super._call(h))}}class el extends We{constructor({logits:h,pred_boxes:B}){super(),this.logits=h,this.pred_boxes=B}}class tl extends K{}class rl extends tl{async get_image_embeddings({pixel_values:h}){return await Ye(this,{pixel_values:h})}async forward(h){if((!h.image_embeddings||!h.image_positional_embeddings)&&(h={...h,...await this.get_image_embeddings(h)}),!h.input_labels&&h.input_points){const re=h.input_points.dims.slice(0,-1),Be=re.reduce((je,wt)=>je*wt,1);h.input_labels=new P.Tensor("int64",new BigInt64Array(Be).fill(1n),re)}const B={image_embeddings:h.image_embeddings,image_positional_embeddings:h.image_positional_embeddings};return h.input_points&&(B.input_points=h.input_points),h.input_labels&&(B.input_labels=h.input_labels),h.input_boxes&&(B.input_boxes=h.input_boxes),await _e(this.sessions.prompt_encoder_mask_decoder,B)}async _call(h){return new nl(await super._call(h))}}class nl extends We{constructor({iou_scores:h,pred_masks:B}){super(),this.iou_scores=h,this.pred_masks=B}}class Wi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class fu extends Wi{}class sl extends Wi{}class Gi extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class il extends Gi{}class ol extends Gi{}class Ln extends K{}class al extends Ln{}class mu extends Ln{async _call(h){return new Hn(await super._call(h))}}class Rn extends Ln{async _call(h){return new sr(await super._call(h))}}class Nn extends Ln{async _call(h){return new Qr(await super._call(h))}}class Pn extends K{}class qi extends Pn{}class jn extends Pn{async _call(h){return new Qr(await super._call(h))}}class en extends K{}class Hi extends en{}class ls extends K{}class Ki extends ls{}class ll extends ls{async _call(h){return new Hn(await super._call(h))}}class ul extends ls{async _call(h){return new sr(await super._call(h))}}class xs extends K{}class Ks extends xs{}class Xi extends xs{async _call(h){return new Hn(await super._call(h))}}class dl extends xs{async _call(h){return new sr(await super._call(h))}}class Xs extends xs{async _call(h){return new Qr(await super._call(h))}}class Qs extends K{}class Qi extends Qs{}class Ys extends Qs{async _call(h){return new Hn(await super._call(h))}}class cl extends Qs{async _call(h){return new sr(await super._call(h))}}class _u extends K{}class gu extends Ln{}class pl extends Ln{async _call(h){return new Hn(await super._call(h))}}class Yi extends Ln{async _call(h){return new sr(await super._call(h))}}class An extends K{}class hl extends An{}class Zi extends An{async _call(h){return new Hn(await super._call(h))}}class fl extends An{async _call(h){return new sr(await super._call(h))}}class ml extends An{async _call(h){return new nu(await super._call(h))}}class _l extends An{async _call(h){return new Qr(await super._call(h))}}class Ji extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class gl extends Ji{}class wl extends Ji{}class wu extends Ji{async generate_speech(h,B,{threshold:re=.5,minlenratio:Be=0,maxlenratio:je=20,vocoder:wt=null}={}){const Pt={input_ids:h},{encoder_outputs:qt,encoder_attention_mask:pr}=await Ye(this,Pt),Cr=qt.dims[1]/this.config.reduction_factor,kr=Math.floor(Cr*je),er=Math.floor(Cr*Be),Ht=this.config.num_mel_bins;let Vr=[],ur=null,br=null,Ur=0;for(;;){++Ur;const Mn=Se(!!br);let an;br?an=br.output_sequence_out:an=new P.Tensor("float32",new Float32Array(Ht),[1,1,Ht]);let Wr={use_cache_branch:Mn,output_sequence:an,encoder_attention_mask:pr,speaker_embeddings:B,encoder_hidden_states:qt};this.addPastKeyValues(Wr,ur),br=await _e(this.sessions.decoder_model_merged,Wr),ur=this.getPastKeyValues(br,ur);const{prob:pn,spectrum:$s}=br;if(Vr.push($s),Ur>=er&&(Array.from(pn.data).filter(ks=>ks>=re).length>0||Ur>=kr))break}const Yr=(0,P.cat)(Vr),{waveform:Vn}=await _e(wt.sessions.model,{spectrogram:Yr});return{spectrogram:Yr,waveform:Vn}}}class eo extends K{main_input_name="spectrogram"}class yl extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class bl extends yl{}class to extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Zs extends to{}class Js extends to{}class ro extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class ei extends ro{}class no extends ro{}class so extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class Ml extends so{}class vl extends so{}class Ts extends K{}class xl extends Ts{}class Tl extends Ts{static async from_pretrained(h,B={}){return B.model_file_name??="text_model",super.from_pretrained(h,B)}}class Cl extends Ts{static async from_pretrained(h,B={}){return B.model_file_name??="audio_model",super.from_pretrained(h,B)}}class yu extends K{}class io extends yu{async _call(h){return new Qu(await super._call(h))}}class Cs extends K{}class gd extends Cs{}class El extends Cs{}class Sl extends Cs{}class oo extends K{constructor(h,B,re){super(h,B),this.generation_config=re}}class ao extends oo{}class $l extends oo{}class lo extends K{}class kl extends lo{}class Pl extends lo{async _call(h){return new sr(await super._call(h))}}class uo extends K{}class bu extends uo{}class wd extends uo{}class co extends K{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];constructor(h,B,re){super(h,B),this.generation_config=re}_apply_and_filter_by_delay_pattern_mask(h){const[B,re]=h.dims,Be=this.config.decoder.num_codebooks,je=re-Be;let wt=0;for(let pr=0;pr<h.size;++pr){if(h.data[pr]===this.config.decoder.pad_token_id)continue;const Cr=pr%re,kr=Math.floor(pr/re)%Be,er=Cr-kr;er>0&&er<=je&&(h.data[wt++]=h.data[pr])}const Pt=Math.floor(B/Be),qt=wt/(Pt*Be);return new P.Tensor(h.type,h.data.slice(0,wt),[Pt,Be,qt])}prepare_inputs_for_generation(h,B,re){let Be=structuredClone(h);for(let wt=0;wt<Be.length;++wt)for(let Pt=0;Pt<Be[wt].length;++Pt)wt%this.config.decoder.num_codebooks>=Pt&&(Be[wt][Pt]=BigInt(this.config.decoder.pad_token_id));return re.guidance_scale!==null&&re.guidance_scale>1&&(Be=Be.concat(Be)),super.prepare_inputs_for_generation(Be,B,re)}async generate(h){const B=await super.generate(h),re=this._apply_and_filter_by_delay_pattern_mask(B).unsqueeze_(0),{audio_values:Be}=await _e(this.sessions.encodec_decode,{audio_codes:re});return Be}}class po extends K{}class Al extends po{}class Mu extends po{async _call(h){return new sr(await super._call(h))}}class ho extends K{}class Il extends ho{}class Fl extends ho{async _call(h){return new sr(await super._call(h))}}class fo extends K{}class Ol extends fo{}class vu extends fo{async _call(h){return new sr(await super._call(h))}}class Es extends K{}class Ss extends Es{}class mo extends Es{async _call(h){return new sr(await super._call(h))}}class Fr{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(h,{progress_callback:B=null,config:re=null,cache_dir:Be=null,local_files_only:je=!1,revision:wt="main",model_file_name:Pt=null,subfolder:qt="onnx",device:pr=null,dtype:Cr=null,use_external_data_format:kr=null,session_options:er={}}={}){let Ht={progress_callback:B,config:re,cache_dir:Be,local_files_only:je,revision:wt,model_file_name:Pt,subfolder:qt,device:pr,dtype:Cr,use_external_data_format:kr,session_options:er};if(Ht.config=await v.AutoConfig.from_pretrained(h,Ht),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(let Vr of this.MODEL_CLASS_MAPPINGS){const ur=Vr.get(Ht.config.model_type);if(ur)return await ur[1].from_pretrained(h,Ht)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${Ht.config.model_type}", attempting to construct from base class.`),await K.from_pretrained(h,Ht);throw Error(`Unsupported model type: ${Ht.config.model_type}`)}}const xu=new Map([["bert",["BertModel",at]],["nomic_bert",["NomicBertModel",$e]],["roformer",["RoFormerModel",Re]],["electra",["ElectraModel",Ze]],["esm",["EsmModel",Zr]],["convbert",["ConvBertModel",xt]],["camembert",["CamembertModel",ie]],["deberta",["DebertaModel",nt]],["deberta-v2",["DebertaV2Model",Bt]],["mpnet",["MPNetModel",Ls]],["albert",["AlbertModel",Gn]],["distilbert",["DistilBertModel",xr]],["roberta",["RobertaModel",Er]],["xlm",["XLMModel",Xr]],["xlm-roberta",["XLMRobertaModel",yr]],["clap",["ClapModel",xl]],["clip",["CLIPModel",Co]],["clipseg",["CLIPSegModel",Ao]],["chinese_clip",["ChineseCLIPModel",Po]],["siglip",["SiglipModel",is]],["mobilebert",["MobileBertModel",qr]],["squeezebert",["SqueezeBertModel",Rs]],["wav2vec2",["Wav2Vec2Model",al]],["wav2vec2-bert",["Wav2Vec2BertModel",Qi]],["unispeech",["UniSpeechModel",Ki]],["unispeech-sat",["UniSpeechSatModel",Ks]],["hubert",["HubertModel",gu]],["wavlm",["WavLMModel",hl]],["audio-spectrogram-transformer",["ASTModel",It]],["vits",["VitsModel",io]],["pyannote",["PyAnnoteModel",qi]],["wespeaker-resnet",["WeSpeakerResNetModel",Hi]],["detr",["DetrModel",Ta]],["rt_detr",["RTDetrModel",$a]],["table-transformer",["TableTransformerModel",Pa]],["vit",["ViTModel",la]],["fastvit",["FastViTModel",da]],["mobilevit",["MobileViTModel",ma]],["mobilevitv2",["MobileViTV2Model",hu]],["owlvit",["OwlViTModel",wa]],["owlv2",["Owlv2Model",ba]],["beit",["BeitModel",va]],["deit",["DeiTModel",Fa]],["convnext",["ConvNextModel",Ga]],["convnextv2",["ConvNextV2Model",Ka]],["dinov2",["Dinov2Model",Qa]],["resnet",["ResNetModel",za]],["swin",["SwinModel",Ba]],["swin2sr",["Swin2SRModel",Ra]],["donut-swin",["DonutSwinModel",ji]],["yolos",["YolosModel",Za]],["dpt",["DPTModel",Li]],["glpn",["GLPNModel",Va]],["hifigan",["SpeechT5HifiGan",eo]],["efficientnet",["EfficientNetModel",kl]],["mobilenet_v1",["MobileNetV1Model",Al]],["mobilenet_v2",["MobileNetV2Model",Il]],["mobilenet_v3",["MobileNetV3Model",Ol]],["mobilenet_v4",["MobileNetV4Model",Ss]]]),Tu=new Map([["t5",["T5Model",gs]],["longt5",["LongT5Model",ys]],["mt5",["MT5Model",Ms]],["bart",["BartModel",ye]],["mbart",["MBartModel",Q]],["marian",["MarianModel",fu]],["whisper",["WhisperModel",Rt]],["m2m_100",["M2M100Model",il]],["blenderbot",["BlenderbotModel",Ct]],["blenderbot-small",["BlenderbotSmallModel",rr]]]),Cu=new Map([["bloom",["BloomModel",na]],["gpt2",["GPT2Model",Fo]],["gptj",["GPTJModel",Ro]],["gpt_bigcode",["GPTBigCodeModel",jo]],["gpt_neo",["GPTNeoModel",zo]],["gpt_neox",["GPTNeoXModel",Bo]],["codegen",["CodeGenModel",Vo]],["llama",["LlamaModel",bn]],["cohere",["CohereModel",Wo]],["gemma",["GemmaModel",qo]],["gemma2",["Gemma2Model",Ko]],["openelm",["OpenELMModel",Qo]],["qwen2",["Qwen2Model",Zo]],["phi",["PhiModel",ea]],["phi3",["Phi3Model",ra]],["mpt",["MptModel",pu]],["opt",["OPTModel",oa]],["mistral",["MistralModel",Zs]],["starcoder2",["Starcoder2Model",ei]],["falcon",["FalconModel",Ml]],["stablelm",["StableLmModel",ao]]]),ti=new Map([["speecht5",["SpeechT5ForSpeechToText",wl]],["whisper",["WhisperForConditionalGeneration",di]]]),zl=new Map([["speecht5",["SpeechT5ForTextToSpeech",wu]]]),Dl=new Map([["vits",["VitsModel",io]],["musicgen",["MusicgenForConditionalGeneration",co]]]),Bl=new Map([["bert",["BertForSequenceClassification",st]],["roformer",["RoFormerForSequenceClassification",qe]],["electra",["ElectraForSequenceClassification",_t]],["esm",["EsmForSequenceClassification",Zn]],["convbert",["ConvBertForSequenceClassification",U]],["camembert",["CamembertForSequenceClassification",Fe]],["deberta",["DebertaForSequenceClassification",ft]],["deberta-v2",["DebertaV2ForSequenceClassification",Gt]],["mpnet",["MPNetForSequenceClassification",fs]],["albert",["AlbertForSequenceClassification",es]],["distilbert",["DistilBertForSequenceClassification",Nr]],["roberta",["RobertaForSequenceClassification",zr]],["xlm",["XLMForSequenceClassification",Zt]],["xlm-roberta",["XLMRobertaForSequenceClassification",mr]],["bart",["BartForSequenceClassification",z]],["mbart",["MBartForSequenceClassification",De]],["mobilebert",["MobileBertForSequenceClassification",Or]],["squeezebert",["SqueezeBertForSequenceClassification",xn]]]),Eu=new Map([["bert",["BertForTokenClassification",Tt]],["roformer",["RoFormerForTokenClassification",ut]],["electra",["ElectraForTokenClassification",rt]],["esm",["EsmForTokenClassification",jr]],["convbert",["ConvBertForTokenClassification",A]],["camembert",["CamembertForTokenClassification",ke]],["deberta",["DebertaForTokenClassification",Et]],["deberta-v2",["DebertaV2ForTokenClassification",Xt]],["mpnet",["MPNetForTokenClassification",ms]],["distilbert",["DistilBertForTokenClassification",Tr]],["roberta",["RobertaForTokenClassification",Je]],["xlm",["XLMForTokenClassification",dn]],["xlm-roberta",["XLMRobertaForTokenClassification",$r]]]),_o=new Map([["t5",["T5ForConditionalGeneration",ws]],["longt5",["LongT5ForConditionalGeneration",bs]],["mt5",["MT5ForConditionalGeneration",Dr]],["bart",["BartForConditionalGeneration",_]],["mbart",["MBartForConditionalGeneration",xe]],["marian",["MarianMTModel",sl]],["m2m_100",["M2M100ForConditionalGeneration",ol]],["blenderbot",["BlenderbotForConditionalGeneration",mt]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",fr]]]),ri=new Map([["bloom",["BloomForCausalLM",sa]],["gpt2",["GPT2LMHeadModel",Oo]],["gptj",["GPTJForCausalLM",No]],["gpt_bigcode",["GPTBigCodeForCausalLM",cu]],["gpt_neo",["GPTNeoForCausalLM",Do]],["gpt_neox",["GPTNeoXForCausalLM",Lo]],["codegen",["CodeGenForCausalLM",js]],["llama",["LlamaForCausalLM",Uo]],["cohere",["CohereForCausalLM",Go]],["gemma",["GemmaForCausalLM",Ho]],["gemma2",["Gemma2ForCausalLM",Xo]],["openelm",["OpenELMForCausalLM",Yo]],["qwen2",["Qwen2ForCausalLM",Jo]],["phi",["PhiForCausalLM",ta]],["phi3",["Phi3ForCausalLM",Ci]],["mpt",["MptForCausalLM",ia]],["opt",["OPTForCausalLM",aa]],["mbart",["MBartForCausalLM",Mt]],["mistral",["MistralForCausalLM",Js]],["starcoder2",["Starcoder2ForCausalLM",no]],["falcon",["FalconForCausalLM",vl]],["trocr",["TrOCRForCausalLM",bl]],["stablelm",["StableLmForCausalLM",$l]]]),Ll=new Map([["bert",["BertForMaskedLM",Oe]],["roformer",["RoFormerForMaskedLM",Ne]],["electra",["ElectraForMaskedLM",Ke]],["esm",["EsmForMaskedLM",ps]],["convbert",["ConvBertForMaskedLM",M]],["camembert",["CamembertForMaskedLM",ve]],["deberta",["DebertaForMaskedLM",bt]],["deberta-v2",["DebertaV2ForMaskedLM",Dt]],["mpnet",["MPNetForMaskedLM",hs]],["albert",["AlbertForMaskedLM",Yt]],["distilbert",["DistilBertForMaskedLM",St]],["roberta",["RobertaForMaskedLM",mn]],["xlm",["XLMWithLMHeadModel",sn]],["xlm-roberta",["XLMRobertaForMaskedLM",$t]],["mobilebert",["MobileBertForMaskedLM",Wn]],["squeezebert",["SqueezeBertForMaskedLM",Jn]]]),Rl=new Map([["bert",["BertForQuestionAnswering",Ie]],["roformer",["RoFormerForQuestionAnswering",ht]],["electra",["ElectraForQuestionAnswering",Te]],["convbert",["ConvBertForQuestionAnswering",ee]],["camembert",["CamembertForQuestionAnswering",ze]],["deberta",["DebertaForQuestionAnswering",zt]],["deberta-v2",["DebertaV2ForQuestionAnswering",Jt]],["mpnet",["MPNetForQuestionAnswering",_s]],["albert",["AlbertForQuestionAnswering",ts]],["distilbert",["DistilBertForQuestionAnswering",Qe]],["roberta",["RobertaForQuestionAnswering",kn]],["xlm",["XLMForQuestionAnswering",Jr]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Br]],["mobilebert",["MobileBertForQuestionAnswering",Dn]],["squeezebert",["SqueezeBertForQuestionAnswering",Sn]]]),go=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",ci]]]),yd=new Map([["llava",["LlavaForConditionalGeneration",ss]],["moondream1",["Moondream1ForConditionalGeneration",nr]],["florence2",["Florence2ForConditionalGeneration",pi]]]),Su=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",ci]]]),Nl=new Map([["vit",["ViTForImageClassification",ua]],["fastvit",["FastViTForImageClassification",ca]],["mobilevit",["MobileViTForImageClassification",_a]],["mobilevitv2",["MobileViTV2ForImageClassification",ga]],["beit",["BeitForImageClassification",xa]],["deit",["DeiTForImageClassification",Oa]],["convnext",["ConvNextForImageClassification",qa]],["convnextv2",["ConvNextV2ForImageClassification",Xa]],["dinov2",["Dinov2ForImageClassification",Ya]],["resnet",["ResNetForImageClassification",Da]],["swin",["SwinForImageClassification",La]],["segformer",["SegformerForImageClassification",El]],["efficientnet",["EfficientNetForImageClassification",Pl]],["mobilenet_v1",["MobileNetV1ForImageClassification",Mu]],["mobilenet_v2",["MobileNetV2ForImageClassification",Fl]],["mobilenet_v3",["MobileNetV3ForImageClassification",vu]],["mobilenet_v4",["MobileNetV4ForImageClassification",mo]]]),$u=new Map([["detr",["DetrForObjectDetection",Ca]],["rt_detr",["RTDetrForObjectDetection",Hs]],["table-transformer",["TableTransformerForObjectDetection",Aa]],["yolos",["YolosForObjectDetection",Ja]]]),jl=new Map([["owlvit",["OwlViTForObjectDetection",ya]],["owlv2",["Owlv2ForObjectDetection",Ma]]]),Vl=new Map([["detr",["DetrForSegmentation",Ea]],["clipseg",["CLIPSegForImageSegmentation",Io]]]),Ul=new Map([["segformer",["SegformerForSemanticSegmentation",Sl]]]),Wl=new Map([["sam",["SamModel",rl]]]),ku=new Map([["wav2vec2",["Wav2Vec2ForCTC",mu]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Ys]],["unispeech",["UniSpeechForCTC",ll]],["unispeech-sat",["UniSpeechSatForCTC",Xi]],["wavlm",["WavLMForCTC",Zi]],["hubert",["HubertForCTC",pl]]]),Gl=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Rn]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",cl]],["unispeech",["UniSpeechForSequenceClassification",ul]],["unispeech-sat",["UniSpeechSatForSequenceClassification",dl]],["wavlm",["WavLMForSequenceClassification",fl]],["hubert",["HubertForSequenceClassification",Yi]],["audio-spectrogram-transformer",["ASTForAudioClassification",Ns]]]),ql=new Map([["wavlm",["WavLMForXVector",ml]]]),Hl=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",Xs]],["wavlm",["WavLMForAudioFrameClassification",_l]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",Nn]],["pyannote",["PyAnnoteForAudioFrameClassification",jn]]]),Kl=new Map([["vitmatte",["VitMatteForImageMatting",ha]]]),Pu=new Map([["swin2sr",["Swin2SRForImageSuperResolution",Di]]]),Xl=new Map([["dpt",["DPTForDepthEstimation",Ri]],["depth_anything",["DepthAnythingForDepthEstimation",ja]],["glpn",["GLPNForDepthEstimation",Ua]]]),Ql=new Map([["clip",["CLIPVisionModelWithProjection",Eo]],["siglip",["SiglipVisionModel",$o]]]),Yl=[[xu,J.EncoderOnly],[Tu,J.EncoderDecoder],[Cu,J.DecoderOnly],[Bl,J.EncoderOnly],[Eu,J.EncoderOnly],[_o,J.Seq2Seq],[ti,J.Seq2Seq],[ri,J.DecoderOnly],[Ll,J.EncoderOnly],[Rl,J.EncoderOnly],[go,J.Vision2Seq],[yd,J.ImageTextToText],[Nl,J.EncoderOnly],[Vl,J.EncoderOnly],[Ul,J.EncoderOnly],[Kl,J.EncoderOnly],[Pu,J.EncoderOnly],[Xl,J.EncoderOnly],[$u,J.EncoderOnly],[jl,J.EncoderOnly],[Wl,J.MaskGeneration],[ku,J.EncoderOnly],[Gl,J.EncoderOnly],[zl,J.Seq2Seq],[Dl,J.EncoderOnly],[ql,J.EncoderOnly],[Hl,J.EncoderOnly],[Ql,J.EncoderOnly]];for(const[g,h]of Yl)for(const[B,re]of g.values())de.set(B,h),j.set(re,B),ae.set(B,re);const Au=[["MusicgenForConditionalGeneration",co,J.Musicgen],["CLIPTextModelWithProjection",Tn,J.EncoderOnly],["SiglipTextModel",So,J.EncoderOnly],["ClapTextModelWithProjection",Tl,J.EncoderOnly],["ClapAudioModelWithProjection",Cl,J.EncoderOnly]];for(const[g,h,B]of Au)de.set(g,B),j.set(h,g),ae.set(g,h);class bd extends Fr{static MODEL_CLASS_MAPPINGS=Yl.map(h=>h[0]);static BASE_IF_FAIL=!0}class on extends Fr{static MODEL_CLASS_MAPPINGS=[Bl]}class Iu extends Fr{static MODEL_CLASS_MAPPINGS=[Eu]}class Fu extends Fr{static MODEL_CLASS_MAPPINGS=[_o]}class Zl extends Fr{static MODEL_CLASS_MAPPINGS=[ti]}class Ou extends Fr{static MODEL_CLASS_MAPPINGS=[zl]}class ni extends Fr{static MODEL_CLASS_MAPPINGS=[Dl]}class zu extends Fr{static MODEL_CLASS_MAPPINGS=[ri]}class Du extends Fr{static MODEL_CLASS_MAPPINGS=[Ll]}class Jl extends Fr{static MODEL_CLASS_MAPPINGS=[Rl]}class Bu extends Fr{static MODEL_CLASS_MAPPINGS=[go]}class Lu extends Fr{static MODEL_CLASS_MAPPINGS=[Nl]}class eu extends Fr{static MODEL_CLASS_MAPPINGS=[Vl]}class Ru extends Fr{static MODEL_CLASS_MAPPINGS=[Ul]}class Nu extends Fr{static MODEL_CLASS_MAPPINGS=[$u]}class ju extends Fr{static MODEL_CLASS_MAPPINGS=[jl]}class tu extends Fr{static MODEL_CLASS_MAPPINGS=[Wl]}class Vu extends Fr{static MODEL_CLASS_MAPPINGS=[ku]}class Uu extends Fr{static MODEL_CLASS_MAPPINGS=[Gl]}class ru extends Fr{static MODEL_CLASS_MAPPINGS=[ql]}class Wu extends Fr{static MODEL_CLASS_MAPPINGS=[Hl]}class Md extends Fr{static MODEL_CLASS_MAPPINGS=[Su]}class Gu extends Fr{static MODEL_CLASS_MAPPINGS=[Kl]}class qu extends Fr{static MODEL_CLASS_MAPPINGS=[Pu]}class Hu extends Fr{static MODEL_CLASS_MAPPINGS=[Xl]}class Ku extends Fr{static MODEL_CLASS_MAPPINGS=[Ql]}class vd extends We{constructor({logits:h,past_key_values:B,encoder_outputs:re,decoder_attentions:Be=null,cross_attentions:je=null}){super(),this.logits=h,this.past_key_values=B,this.encoder_outputs=re,this.decoder_attentions=Be,this.cross_attentions=je}}class sr extends We{constructor({logits:h}){super(),this.logits=h}}class nu extends We{constructor({logits:h,embeddings:B}){super(),this.logits=h,this.embeddings=B}}class Qr extends We{constructor({logits:h}){super(),this.logits=h}}class tn extends We{constructor({logits:h}){super(),this.logits=h}}class rn extends We{constructor({start_logits:h,end_logits:B}){super(),this.start_logits=h,this.end_logits=B}}class Hn extends We{constructor({logits:h}){super(),this.logits=h}}class Xu extends We{constructor({logits:h,past_key_values:B}){super(),this.logits=h,this.past_key_values=B}}class su extends We{constructor({alphas:h}){super(),this.alphas=h}}class Qu extends We{constructor({waveform:h,spectrogram:B}){super(),this.waveform=h,this.spectrogram=B}}},"./src/models/whisper/common_whisper.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{WHISPER_LANGUAGE_MAPPING:()=>W,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>me,whisper_language_to_code:()=>be});const v=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],W=new Map(v),me=new Map([...v.map(([Me,D])=>[D,Me]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function be(Me){Me=Me.toLowerCase();let D=me.get(Me);if(D===void 0)if(W.has(Me))D=Me;else{const N=Me.length===2?W.keys():W.values();throw new Error(`Language "${Me}" is not supported. Must be one of: ${JSON.stringify(N)}`)}return D}},"./src/models/whisper/generation_whisper.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{WhisperGenerationConfig:()=>W});var v=u("./src/generation/configuration_utils.js");class W extends v.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/ops/registry.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{TensorOpRegistry:()=>be});var v=u("./src/backends/onnx.js"),W=u("./src/utils/tensor.js");const me=async(Me,D,E)=>{const N=await(0,v.createInferenceSession)(new Uint8Array(Me),D);return async P=>{const Y=Object.fromEntries(Object.entries(P).map(([oe,le])=>[oe,le.ort_tensor])),Z=await N.run(Y);return Array.isArray(E)?E.map(oe=>new W.Tensor(Z[oe])):new W.Tensor(Z[E])}};class be{static session_options={};static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=me([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=me([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=me([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=me([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=me([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=me([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}}},"./src/pipelines.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{AudioClassificationPipeline:()=>Se,AutomaticSpeechRecognitionPipeline:()=>Ye,DepthEstimationPipeline:()=>tt,DocumentQuestionAnsweringPipeline:()=>K,FeatureExtractionPipeline:()=>we,FillMaskPipeline:()=>de,ImageClassificationPipeline:()=>ct,ImageFeatureExtractionPipeline:()=>Ce,ImageSegmentationPipeline:()=>ge,ImageToImagePipeline:()=>dt,ImageToTextPipeline:()=>Xe,ObjectDetectionPipeline:()=>ce,Pipeline:()=>le,QuestionAnsweringPipeline:()=>J,SummarizationPipeline:()=>j,Text2TextGenerationPipeline:()=>ae,TextClassificationPipeline:()=>L,TextGenerationPipeline:()=>k,TextToAudioPipeline:()=>We,TokenClassificationPipeline:()=>te,TranslationPipeline:()=>I,ZeroShotAudioClassificationPipeline:()=>Pe,ZeroShotClassificationPipeline:()=>_e,ZeroShotImageClassificationPipeline:()=>V,ZeroShotObjectDetectionPipeline:()=>Ee,pipeline:()=>st});var v=u("./src/tokenizers.js"),W=u("./src/models.js"),me=u("./src/processors.js"),be=u("./src/utils/generic.js"),Me=u("./src/utils/core.js"),D=u("./src/utils/maths.js"),E=u("./src/utils/audio.js"),N=u("./src/utils/tensor.js"),P=u("./src/utils/image.js");async function Y(Ie){return Array.isArray(Ie)||(Ie=[Ie]),await Promise.all(Ie.map(G=>P.RawImage.read(G)))}async function Z(Ie,G){return Array.isArray(Ie)||(Ie=[Ie]),await Promise.all(Ie.map($e=>typeof $e=="string"||$e instanceof URL?(0,E.read_audio)($e,G):$e instanceof Float64Array?new Float32Array($e):$e))}function oe(Ie,G){G&&(Ie=Ie.map(qe=>qe|0));const[$e,He,Re,Ne]=Ie;return{xmin:$e,ymin:He,xmax:Re,ymax:Ne}}class le extends be.Callable{constructor({task:G,model:$e,tokenizer:He=null,processor:Re=null}){super(),this.task=G,this.model=$e,this.tokenizer=He,this.processor=Re}async dispose(){await this.model.dispose()}}class L extends le{constructor(G){super(G)}async _call(G,{top_k:$e=1}={}){const He=this.tokenizer(G,{padding:!0,truncation:!0}),Re=await this.model(He),Ne=this.model.config.problem_type==="multi_label_classification"?ht=>ht.sigmoid():ht=>new N.Tensor("float32",(0,D.softmax)(ht.data),ht.dims),qe=this.model.config.id2label,ut=[];for(const ht of Re.logits){const vt=Ne(ht),xt=await(0,N.topk)(vt,$e),M=xt[0].tolist(),A=xt[1].tolist().map((ee,he)=>({label:qe?qe[ee]:`LABEL_${ee}`,score:M[he]}));$e===1?ut.push(...A):ut.push(A)}return Array.isArray(G)||$e===1?ut:ut[0]}}class te extends le{constructor(G){super(G)}async _call(G,{ignore_labels:$e=["O"]}={}){const He=Array.isArray(G),Re=this.tokenizer(He?G:[G],{padding:!0,truncation:!0}),qe=(await this.model(Re)).logits,ut=this.model.config.id2label,ht=[];for(let vt=0;vt<qe.dims[0];++vt){const xt=Re.input_ids[vt],M=qe[vt],U=[];for(let A=0;A<M.dims[0];++A){const ee=M[A],he=(0,D.max)(ee.data)[1],Ze=ut?ut[he]:`LABEL_${he}`;if($e.includes(Ze))continue;const Ke=this.tokenizer.decode([xt[A].item()],{skip_special_tokens:!0});if(Ke==="")continue;const _t=(0,D.softmax)(ee.data);U.push({entity:Ze,score:_t[he],index:A,word:Ke})}ht.push(U)}return He?ht:ht[0]}}class J extends le{constructor(G){super(G)}async _call(G,$e,{top_k:He=1}={}){const Re=this.tokenizer(G,{text_pair:$e,padding:!0,truncation:!0}),{start_logits:Ne,end_logits:qe}=await this.model(Re),ut=Re.input_ids.tolist(),ht=Re.attention_mask.tolist(),vt=this.tokenizer.all_special_ids,xt=[];for(let M=0;M<Ne.dims[0];++M){const U=ut[M],A=U.findIndex(rt=>rt==this.tokenizer.sep_token_id);ht[M].map((rt,Te)=>rt==1&&(Te===0||Te>A&&vt.findIndex($=>$==U[Te])===-1));const ee=Ne[M].tolist(),he=qe[M].tolist();for(let rt=1;rt<ee.length;++rt)(ht[M]==0||rt<=A||vt.findIndex(Te=>Te==U[rt])!==-1)&&(ee[rt]=-1/0,he[rt]=-1/0);const Ze=(0,D.softmax)(ee).map((rt,Te)=>[rt,Te]),Ke=(0,D.softmax)(he).map((rt,Te)=>[rt,Te]);Ze[0][0]=0,Ke[0][0]=0;const _t=(0,Me.product)(Ze,Ke).filter(rt=>rt[0][1]<=rt[1][1]).map(rt=>[rt[0][1],rt[1][1],rt[0][0]*rt[1][0]]).sort((rt,Te)=>Te[2]-rt[2]);for(let rt=0;rt<Math.min(_t.length,He);++rt){const[Te,$,ie]=_t[rt],ve=U.slice(Te,$+1),Fe=this.tokenizer.decode(ve,{skip_special_tokens:!0});xt.push({answer:Fe,score:ie})}}return He===1?xt[0]:xt}}class de extends le{constructor(G){super(G)}async _call(G,{top_k:$e=5}={}){const He=this.tokenizer(G,{padding:!0,truncation:!0}),{logits:Re}=await this.model(He),Ne=[],qe=He.input_ids.tolist();for(let ut=0;ut<qe.length;++ut){const ht=qe[ut],vt=ht.findIndex(ee=>ee==this.tokenizer.mask_token_id);if(vt===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const xt=Re[ut][vt],M=await(0,N.topk)(new N.Tensor("float32",(0,D.softmax)(xt.data),xt.dims),$e),U=M[0].tolist(),A=M[1].tolist();Ne.push(A.map((ee,he)=>{const Ze=ht.slice();return Ze[vt]=ee,{score:U[he],token:Number(ee),token_str:this.tokenizer.model.vocab[ee],sequence:this.tokenizer.decode(Ze,{skip_special_tokens:!0})}}))}return Array.isArray(G)?Ne:Ne[0]}}class ae extends le{_key="generated_text";constructor(G){super(G)}async _call(G,$e={}){Array.isArray(G)||(G=[G]),this.model.config.prefix&&(G=G.map(ht=>this.model.config.prefix+ht));const He=this.model.config.task_specific_params;He&&He[this.task]&&He[this.task].prefix&&(G=G.map(ht=>He[this.task].prefix+ht));const Re=this.tokenizer,Ne={padding:!0,truncation:!0};let qe;this instanceof I&&"_build_translation_inputs"in Re?qe=Re._build_translation_inputs(G,Ne,$e):qe=Re(G,Ne);const ut=await this.model.generate({...qe,...$e});return Re.batch_decode(ut,{skip_special_tokens:!0}).map(ht=>({[this._key]:ht}))}}class j extends ae{_key="summary_text";constructor(G){super(G)}}class I extends ae{_key="translation_text";constructor(G){super(G)}}function R(Ie){return Array.isArray(Ie)&&Ie.every(G=>"role"in G&&"content"in G)}class k extends le{constructor(G){super(G)}async _call(G,$e={}){let He=!1,Re=!1,Ne;if(typeof G=="string")Ne=G=[G];else if(Array.isArray(G)&&G.every(A=>typeof A=="string"))He=!0,Ne=G;else{if(R(G))G=[G];else if(Array.isArray(G)&&G.every(R))He=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");Re=!0,Ne=G.map(A=>this.tokenizer.apply_chat_template(A,{tokenize:!1,add_generation_prompt:!0}))}const qe=$e.add_special_tokens??!1,ut=Re?!1:$e.return_full_text??!0;this.tokenizer.padding_side="left";const ht=this.tokenizer(Ne,{add_special_tokens:qe,padding:!0,truncation:!0}),vt=await this.model.generate({...ht,...$e}),xt=this.tokenizer.batch_decode(vt,{skip_special_tokens:!0});let M;!ut&&ht.input_ids.dims.at(-1)>0&&(M=this.tokenizer.batch_decode(ht.input_ids,{skip_special_tokens:!0}).map(A=>A.length));const U=Array.from({length:G.length},A=>[]);for(let A=0;A<xt.length;++A){const ee=Math.floor(A/vt.dims[0]*G.length);M&&(xt[A]=xt[A].slice(M[ee])),U[ee].push({generated_text:Re?[...G[ee],{role:"assistant",content:xt[A]}]:xt[A]})}return!He&&U.length===1?U[0]:U}}class _e extends le{constructor(G){super(G),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([$e,He])=>[$e.toLowerCase(),He])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(G,$e,{hypothesis_template:He="This example is {}.",multi_label:Re=!1}={}){const Ne=Array.isArray(G);Ne||(G=[G]),Array.isArray($e)||($e=[$e]);const qe=$e.map(vt=>He.replace("{}",vt)),ut=Re||$e.length===1,ht=[];for(const vt of G){const xt=[];for(const A of qe){const ee=this.tokenizer(vt,{text_pair:A,padding:!0,truncation:!0}),he=await this.model(ee);ut?xt.push([he.logits.data[this.contradiction_id],he.logits.data[this.entailment_id]]):xt.push(he.logits.data[this.entailment_id])}const U=(ut?xt.map(A=>(0,D.softmax)(A)[1]):(0,D.softmax)(xt)).map((A,ee)=>[A,ee]).sort((A,ee)=>ee[0]-A[0]);ht.push({sequence:vt,labels:U.map(A=>$e[A[1]]),scores:U.map(A=>A[0])})}return Ne?ht:ht[0]}}class we extends le{constructor(G){super(G)}async _call(G,{pooling:$e="none",normalize:He=!1,quantize:Re=!1,precision:Ne="binary"}={}){const qe=this.tokenizer(G,{padding:!0,truncation:!0}),ut=await this.model(qe);let ht=ut.last_hidden_state??ut.logits??ut.token_embeddings;if($e!=="none")if($e==="mean")ht=(0,N.mean_pooling)(ht,qe.attention_mask);else if($e==="cls")ht=ht.slice(null,0);else throw Error(`Pooling method '${$e}' not supported.`);return He&&(ht=ht.normalize(2,-1)),Re&&(ht=(0,N.quantize_embeddings)(ht,Ne)),ht}}class Ce extends le{constructor(G){super(G)}async _call(G,{pool:$e=null}={}){const He=await Y(G),{pixel_values:Re}=await this.processor(He),Ne=await this.model({pixel_values:Re});let qe;if($e){if(!("pooler_output"in Ne))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");qe=Ne.pooler_output}else qe=Ne.last_hidden_state??Ne.logits??Ne.image_embeds;return qe}}class Se extends le{constructor(G){super(G)}async _call(G,{top_k:$e=5}={}){const He=this.processor.feature_extractor.config.sampling_rate,Re=await Z(G,He),Ne=this.model.config.id2label,qe=[];for(const ut of Re){const ht=await this.processor(ut),xt=(await this.model(ht)).logits[0],M=await(0,N.topk)(new N.Tensor("float32",(0,D.softmax)(xt.data),xt.dims),$e),U=M[0].tolist(),ee=M[1].tolist().map((he,Ze)=>({label:Ne?Ne[he]:`LABEL_${he}`,score:U[Ze]}));qe.push(ee)}return Array.isArray(G)?qe:qe[0]}}class Pe extends le{constructor(G){super(G)}async _call(G,$e,{hypothesis_template:He="This is a sound of {}."}={}){const Re=!Array.isArray(G);Re&&(G=[G]);const Ne=$e.map(xt=>He.replace("{}",xt)),qe=this.tokenizer(Ne,{padding:!0,truncation:!0}),ut=this.processor.feature_extractor.config.sampling_rate,ht=await Z(G,ut),vt=[];for(const xt of ht){const M=await this.processor(xt),U=await this.model({...qe,...M}),A=(0,D.softmax)(U.logits_per_audio.data);vt.push([...A].map((ee,he)=>({score:ee,label:$e[he]})))}return Re?vt[0]:vt}}class Ye extends le{constructor(G){super(G)}async _call(G,$e={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(G,$e);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(G,$e);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(G,$e){$e.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),$e.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const He=!Array.isArray(G);He&&(G=[G]);const Re=this.processor.feature_extractor.config.sampling_rate,Ne=await Z(G,Re),qe=[];for(const ut of Ne){const ht=await this.processor(ut),xt=(await this.model(ht)).logits[0],M=[];for(const A of xt)M.push((0,D.max)(A.data)[1]);const U=this.tokenizer.decode(M);qe.push({text:U})}return He?qe[0]:qe}async _call_whisper(G,$e){const He=$e.return_timestamps??!1,Re=$e.chunk_length_s??0,Ne=$e.force_full_sequences??!1;let qe=$e.stride_length_s??null;const ut={...$e};He==="word"&&(ut.return_token_timestamps=!0,ut.return_timestamps=!1);const ht=!Array.isArray(G);ht&&(G=[G]);const vt=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,xt=this.processor.feature_extractor.config.hop_length,M=this.processor.feature_extractor.config.sampling_rate,U=await Z(G,M),A=[];for(const ee of U){let he=[];if(Re>0){if(qe===null)qe=Re/6;else if(Re<=qe)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const _t=M*Re,rt=M*qe,Te=_t-2*rt;let $=0;for(;;){const ie=$+_t,ve=ee.subarray($,ie),Fe=await this.processor(ve),ke=$===0,ze=ie>=ee.length;if(he.push({stride:[ve.length,ke?0:rt,ze?0:rt],input_features:Fe.input_features,is_last:ze}),ze)break;$+=Te}}else he=[{stride:[ee.length,0,0],input_features:(await this.processor(ee)).input_features,is_last:!0}];for(const _t of he){ut.num_frames=Math.floor(_t.stride[0]/xt);const rt=await this.model.generate({inputs:_t.input_features,...ut});He==="word"?(_t.tokens=rt.sequences.tolist()[0],_t.token_timestamps=rt.token_timestamps.tolist()[0].map(Te=>(0,D.round)(Te,2))):_t.tokens=rt[0].tolist(),_t.stride=_t.stride.map(Te=>Te/M)}const[Ze,Ke]=this.tokenizer._decode_asr(he,{time_precision:vt,return_timestamps:He,force_full_sequences:Ne});A.push({text:Ze,...Ke})}return ht?A[0]:A}}class Xe extends le{constructor(G){super(G)}async _call(G,$e={}){const He=Array.isArray(G),Re=await Y(G),{pixel_values:Ne}=await this.processor(Re),qe=[];for(const ut of Ne){ut.dims=[1,...ut.dims];const ht=await this.model.generate({inputs:ut,...$e}),vt=this.tokenizer.batch_decode(ht,{skip_special_tokens:!0}).map(xt=>({generated_text:xt.trim()}));qe.push(vt)}return He?qe:qe[0]}}class ct extends le{constructor(G){super(G)}async _call(G,{top_k:$e=5}={}){const He=await Y(G),{pixel_values:Re}=await this.processor(He),Ne=await this.model({pixel_values:Re}),qe=this.model.config.id2label,ut=[];for(const ht of Ne.logits){const vt=await(0,N.topk)(new N.Tensor("float32",(0,D.softmax)(ht.data),ht.dims),$e),xt=vt[0].tolist(),U=vt[1].tolist().map((A,ee)=>({label:qe?qe[A]:`LABEL_${A}`,score:xt[ee]}));ut.push(U)}return Array.isArray(G)?ut:ut[0]}}class ge extends le{constructor(G){super(G),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(G,{threshold:$e=.5,mask_threshold:He=.5,overlap_mask_area_threshold:Re=.8,label_ids_to_fuse:Ne=null,target_sizes:qe=null,subtask:ut=null}={}){if(Array.isArray(G)&&G.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const vt=await Y(G),xt=vt.map(Ke=>[Ke.height,Ke.width]),{pixel_values:M,pixel_mask:U}=await this.processor(vt),A=await this.model({pixel_values:M,pixel_mask:U});let ee=null;if(ut!==null)ee=this.subtasks_mapping[ut];else for(let[Ke,_t]of Object.entries(this.subtasks_mapping))if(_t in this.processor.feature_extractor){ee=this.processor.feature_extractor[_t].bind(this.processor.feature_extractor),ut=Ke;break}const he=this.model.config.id2label,Ze=[];if(ut==="panoptic"||ut==="instance"){const Ke=ee(A,$e,He,Re,Ne,qe??xt)[0],_t=Ke.segmentation;for(const rt of Ke.segments_info){const Te=new Uint8ClampedArray(_t.data.length);for(let ie=0;ie<_t.data.length;++ie)_t.data[ie]===rt.id&&(Te[ie]=255);const $=new P.RawImage(Te,_t.dims[1],_t.dims[0],1);Ze.push({score:rt.score,label:he[rt.label_id],mask:$})}}else if(ut==="semantic"){const{segmentation:Ke,labels:_t}=ee(A,qe??xt)[0];for(const rt of _t){const Te=new Uint8ClampedArray(Ke.data.length);for(let ie=0;ie<Ke.data.length;++ie)Ke.data[ie]===rt&&(Te[ie]=255);const $=new P.RawImage(Te,Ke.dims[1],Ke.dims[0],1);Ze.push({score:null,label:he[rt],mask:$})}}else throw Error(`Subtask ${ut} not supported.`);return Ze}}class V extends le{constructor(G){super(G)}async _call(G,$e,{hypothesis_template:He="This is a photo of {}"}={}){const Re=Array.isArray(G),Ne=await Y(G),qe=$e.map(U=>He.replace("{}",U)),ut=this.tokenizer(qe,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:ht}=await this.processor(Ne),vt=await this.model({...ut,pixel_values:ht}),xt=this.model.config.model_type==="siglip"?U=>U.sigmoid().data:U=>(0,D.softmax)(U.data),M=[];for(const U of vt.logits_per_image){const ee=[...xt(U)].map((he,Ze)=>({score:he,label:$e[Ze]}));ee.sort((he,Ze)=>Ze.score-he.score),M.push(ee)}return Re?M:M[0]}}class ce extends le{constructor(G){super(G)}async _call(G,{threshold:$e=.9,percentage:He=!1}={}){const Re=Array.isArray(G);if(Re&&G.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Ne=await Y(G),qe=He?null:Ne.map(A=>[A.height,A.width]),{pixel_values:ut,pixel_mask:ht}=await this.processor(Ne),vt=await this.model({pixel_values:ut,pixel_mask:ht}),xt=this.processor.feature_extractor.post_process_object_detection(vt,$e,qe),M=this.model.config.id2label,U=xt.map(A=>A.boxes.map((ee,he)=>({score:A.scores[he],label:M[A.classes[he]],box:oe(ee,!He)})));return Re?U:U[0]}}class Ee extends le{constructor(G){super(G)}async _call(G,$e,{threshold:He=.1,top_k:Re=null,percentage:Ne=!1}={}){const qe=Array.isArray(G),ut=await Y(G),ht=this.tokenizer($e,{padding:!0,truncation:!0}),vt=await this.processor(ut),xt=[];for(let M=0;M<ut.length;++M){const U=ut[M],A=Ne?null:[[U.height,U.width]],ee=vt.pixel_values[M].unsqueeze_(0),he=await this.model({...ht,pixel_values:ee}),Ze=this.processor.feature_extractor.post_process_object_detection(he,He,A,!0)[0];let Ke=Ze.boxes.map((_t,rt)=>({score:Ze.scores[rt],label:$e[Ze.classes[rt]],box:oe(_t,!Ne)})).sort((_t,rt)=>rt.score-_t.score);Re!==null&&(Ke=Ke.slice(0,Re)),xt.push(Ke)}return qe?xt:xt[0]}}class K extends le{constructor(G){super(G)}async _call(G,$e,He={}){throw new Error("This pipeline is not yet supported in Transformers.js v3.")}}class We extends le{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(G){super(G),this.vocoder=G.vocoder??null}async _call(G,{speaker_embeddings:$e=null}={}){return this.processor?this._call_text_to_spectrogram(G,{speaker_embeddings:$e}):this._call_text_to_waveform(G)}async _call_text_to_waveform(G){const $e=this.tokenizer(G,{padding:!0,truncation:!0}),{waveform:He}=await this.model($e),Re=this.model.config.sampling_rate;return{audio:He.data,sampling_rate:Re}}async _call_text_to_spectrogram(G,{speaker_embeddings:$e}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await W.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof $e=="string"||$e instanceof URL)&&($e=new Float32Array(await(await fetch($e)).arrayBuffer())),$e instanceof Float32Array)$e=new N.Tensor("float32",$e,[1,$e.length]);else if(!($e instanceof N.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:He}=this.tokenizer(G,{padding:!0,truncation:!0}),{waveform:Re}=await this.model.generate_speech(He,$e,{vocoder:this.vocoder}),Ne=this.processor.feature_extractor.config.sampling_rate;return{audio:Re.data,sampling_rate:Ne}}}class dt extends le{constructor(G){super(G)}async _call(G){const $e=await Y(G),He=await this.processor($e),Re=await this.model(He),Ne=[];for(const qe of Re.reconstruction){const ut=qe.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Ne.push(P.RawImage.fromTensor(ut))}return Ne.length>1?Ne:Ne[0]}}class tt extends le{constructor(G){super(G)}async _call(G){const $e=await Y(G),He=await this.processor($e),{predicted_depth:Re}=await this.model(He),Ne=[];for(let qe=0;qe<$e.length;++qe){const ut=(0,N.interpolate)(Re[qe],$e[qe].size.reverse(),"bilinear",!1),ht=ut.mul_(255/(0,D.max)(ut.data)[0]).to("uint8");Ne.push({predicted_depth:Re[qe],depth:P.RawImage.fromTensor(ht)})}return Ne.length>1?Ne:Ne[0]}}const at=Object.freeze({"text-classification":{tokenizer:v.AutoTokenizer,pipeline:L,model:W.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:v.AutoTokenizer,pipeline:te,model:W.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:v.AutoTokenizer,pipeline:J,model:W.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:v.AutoTokenizer,pipeline:de,model:W.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:v.AutoTokenizer,pipeline:j,model:W.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:v.AutoTokenizer,pipeline:I,model:W.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:v.AutoTokenizer,pipeline:ae,model:W.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:v.AutoTokenizer,pipeline:k,model:W.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:v.AutoTokenizer,pipeline:_e,model:W.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:Se,model:W.AutoModelForAudioClassification,processor:me.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:v.AutoTokenizer,pipeline:Pe,model:W.AutoModel,processor:me.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:v.AutoTokenizer,pipeline:Ye,model:[W.AutoModelForSpeechSeq2Seq,W.AutoModelForCTC],processor:me.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:v.AutoTokenizer,pipeline:We,model:[W.AutoModelForTextToWaveform,W.AutoModelForTextToSpectrogram],processor:[me.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:v.AutoTokenizer,pipeline:Xe,model:W.AutoModelForVision2Seq,processor:me.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:ct,model:W.AutoModelForImageClassification,processor:me.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:ge,model:[W.AutoModelForImageSegmentation,W.AutoModelForSemanticSegmentation],processor:me.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:v.AutoTokenizer,pipeline:V,model:W.AutoModel,processor:me.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ce,model:W.AutoModelForObjectDetection,processor:me.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:v.AutoTokenizer,pipeline:Ee,model:W.AutoModelForZeroShotObjectDetection,processor:me.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:v.AutoTokenizer,pipeline:K,model:W.AutoModelForDocumentQuestionAnswering,processor:me.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:dt,model:W.AutoModelForImageToImage,processor:me.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:tt,model:W.AutoModelForDepthEstimation,processor:me.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:v.AutoTokenizer,pipeline:we,model:W.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:me.AutoProcessor,pipeline:Ce,model:[W.AutoModelForImageFeatureExtraction,W.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Oe=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function st(Ie,G=null,{progress_callback:$e=null,config:He=null,cache_dir:Re=null,local_files_only:Ne=!1,revision:qe="main",device:ut=null,dtype:ht=null,model_file_name:vt=null,session_options:xt={}}={}){Ie=Oe[Ie]??Ie;const M=at[Ie.split("_",1)[0]];if(!M)throw Error(`Unsupported pipeline: ${Ie}. Must be one of [${Object.keys(at)}]`);G||(G=M.default.model,console.log(`No model specified. Using default model: "${G}".`));const U={progress_callback:$e,config:He,cache_dir:Re,local_files_only:Ne,revision:qe,device:ut,dtype:ht,model_file_name:vt,session_options:xt},A=new Map([["tokenizer",M.tokenizer],["model",M.model],["processor",M.processor]]),ee=await Tt(A,G,U);ee.task=Ie,(0,Me.dispatchCallback)($e,{status:"ready",task:Ie,model:G});const he=M.pipeline;return new he(ee)}async function Tt(Ie,G,$e){const He=Object.create(null),Re=[];for(let[Ne,qe]of Ie.entries()){if(!qe)continue;let ut;Array.isArray(qe)?ut=new Promise(async(ht,vt)=>{let xt;for(let M of qe){if(M===null){ht(null);return}try{ht(await M.from_pretrained(G,$e));return}catch(U){if(U.message?.includes("Unsupported model type"))xt=U;else if(U.message?.includes("Could not locate file"))xt=U;else{vt(U);return}}}vt(xt)}):ut=qe.from_pretrained(G,$e),He[Ne]=ut,Re.push(ut)}await Promise.all(Re);for(let[Ne,qe]of Object.entries(He))He[Ne]=await qe;return He}},"./src/processors.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{ASTFeatureExtractor:()=>qe,AutoProcessor:()=>rt,BeitFeatureExtractor:()=>tt,BitImageProcessor:()=>de,CLIPFeatureExtractor:()=>j,CLIPImageProcessor:()=>I,ChineseCLIPFeatureExtractor:()=>R,ClapFeatureExtractor:()=>ut,ConvNextFeatureExtractor:()=>_e,ConvNextImageProcessor:()=>we,DPTFeatureExtractor:()=>te,DPTImageProcessor:()=>J,DeiTFeatureExtractor:()=>dt,DetrFeatureExtractor:()=>st,DonutFeatureExtractor:()=>at,EfficientNetImageProcessor:()=>Pe,FeatureExtractor:()=>oe,Florence2Processor:()=>_t,GLPNFeatureExtractor:()=>ae,ImageFeatureExtractor:()=>le,MobileNetV1FeatureExtractor:()=>Ye,MobileNetV2FeatureExtractor:()=>Xe,MobileNetV3FeatureExtractor:()=>ct,MobileNetV4FeatureExtractor:()=>ge,MobileViTFeatureExtractor:()=>V,MobileViTImageProcessor:()=>ce,NougatImageProcessor:()=>Oe,OwlViTFeatureExtractor:()=>Ee,OwlViTProcessor:()=>Ke,Owlv2ImageProcessor:()=>K,Processor:()=>M,PyAnnoteFeatureExtractor:()=>ht,PyAnnoteProcessor:()=>he,RTDetrImageProcessor:()=>We,SamImageProcessor:()=>Ie,SamProcessor:()=>U,SeamlessM4TFeatureExtractor:()=>Ne,SegformerFeatureExtractor:()=>L,SiglipImageProcessor:()=>k,SpeechT5FeatureExtractor:()=>xt,SpeechT5Processor:()=>Ze,Swin2SRImageProcessor:()=>G,ViTFeatureExtractor:()=>Ce,ViTImageProcessor:()=>Se,VitMatteImageProcessor:()=>$e,Wav2Vec2FeatureExtractor:()=>Re,Wav2Vec2ProcessorWithLM:()=>ee,WeSpeakerFeatureExtractor:()=>vt,WhisperFeatureExtractor:()=>He,WhisperProcessor:()=>A,YolosFeatureExtractor:()=>Tt});var v=u("./src/utils/generic.js"),W=u("./src/utils/core.js"),me=u("./src/utils/hub.js"),be=u("./src/utils/maths.js"),Me=u("./src/utils/tensor.js");u("./src/utils/image.js");var D=u("./src/utils/audio.js");function E([Te,$,ie,ve]){return[Te-ie/2,$-ve/2,Te+ie/2,$+ve/2]}function N(Te,$=.5,ie=null,ve=!1){const Fe=Te.logits,ke=Te.pred_boxes,[ze,lt,nt]=Fe.dims;if(ie!==null&&ie.length!==ze)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let bt=[];for(let ft=0;ft<ze;++ft){let Et=ie!==null?ie[ft]:null,zt={boxes:[],classes:[],scores:[]},Ge=Fe[ft],Bt=ke[ft];for(let Dt=0;Dt<lt;++Dt){let Gt=Ge[Dt],Xt=[],Jt;if(ve){Jt=Gt.sigmoid().data;for(let jt=0;jt<Jt.length;++jt)Jt[jt]>$&&Xt.push(jt)}else{let jt=(0,be.max)(Gt.data)[1];if(jt===nt-1||(Jt=(0,be.softmax)(Gt.data),Jt[jt]<$))continue;Xt.push(jt)}for(const jt of Xt){let xr=Bt[Dt].data;xr=E(xr),Et!==null&&(xr=xr.map((Nr,Tr)=>Nr*Et[(Tr+1)%2])),zt.boxes.push(xr),zt.classes.push(jt),zt.scores.push(Jt[jt])}}bt.push(zt)}return bt}function P(Te,$){if(!(Te instanceof Float32Array||Te instanceof Float64Array))throw new Error(`${$} expects input to be a Float32Array or a Float64Array, but got ${Te?.constructor?.name??typeof Te} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}function Y(Te,$,ie=0,ve=null){const Fe=Te/$;let ke=(0,be.bankers_round)(Fe)*$;return ve!==null&&ke>ve&&(ke=Math.floor(Fe)*$),ke<ie&&(ke=Math.ceil(Fe)*$),ke}function Z([Te,$],ie){return[Math.max(Math.floor(Te/ie),1)*ie,Math.max(Math.floor($/ie),1)*ie]}class oe extends v.Callable{constructor($){super(),this.config=$}}class le extends oe{constructor($){super($),this.image_mean=this.config.image_mean??this.config.mean,this.image_std=this.config.image_std??this.config.std,this.resample=this.config.resample??2,this.do_rescale=this.config.do_rescale??!0,this.rescale_factor=this.config.rescale_factor??.00392156862745098,this.do_normalize=this.config.do_normalize,this.do_resize=this.config.do_resize,this.do_thumbnail=this.config.do_thumbnail,this.size=this.config.size,this.size_divisibility=this.config.size_divisibility??this.config.size_divisor,this.do_center_crop=this.config.do_center_crop,this.crop_size=this.config.crop_size,this.do_convert_rgb=this.config.do_convert_rgb??!0,this.do_crop_margin=this.config.do_crop_margin,this.pad_size=this.config.pad_size,this.do_pad=this.config.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=this.config.do_flip_channel_order??!1}async thumbnail($,ie,ve=2){const Fe=$.height,ke=$.width,ze=ie.height,lt=ie.width;let nt=Math.min(Fe,ze),bt=Math.min(ke,lt);return nt===Fe&&bt===ke?$:(Fe>ke?bt=Math.floor(ke*nt/Fe):ke>Fe&&(nt=Math.floor(Fe*bt/ke)),await $.resize(bt,nt,{resample:ve}))}async crop_margin($,ie=200){const ve=$.clone().grayscale(),Fe=(0,be.min)(ve.data)[0],ze=(0,be.max)(ve.data)[0]-Fe;if(ze===0)return $;const lt=ie/255;let nt=ve.width,bt=ve.height,ft=0,Et=0;const zt=ve.data;for(let Ge=0;Ge<ve.height;++Ge){const Bt=Ge*ve.width;for(let Dt=0;Dt<ve.width;++Dt)(zt[Bt+Dt]-Fe)/ze<lt&&(nt=Math.min(nt,Dt),bt=Math.min(bt,Ge),ft=Math.max(ft,Dt),Et=Math.max(Et,Ge))}return $=await $.crop([nt,bt,ft,Et]),$}pad_image($,ie,ve,{mode:Fe="constant",center:ke=!1,constant_values:ze=0}={}){const[lt,nt,bt]=ie;let ft,Et;if(typeof ve=="number"?(ft=ve,Et=ve):(ft=ve.width,Et=ve.height),ft!==nt||Et!==lt){const zt=new Float32Array(ft*Et*bt);if(Array.isArray(ze))for(let Dt=0;Dt<zt.length;++Dt)zt[Dt]=ze[Dt%bt];else ze!==0&&zt.fill(ze);const[Ge,Bt]=ke?[Math.floor((ft-nt)/2),Math.floor((Et-lt)/2)]:[0,0];for(let Dt=0;Dt<lt;++Dt){const Gt=(Dt+Bt)*ft,Xt=Dt*nt;for(let Jt=0;Jt<nt;++Jt){const jt=(Gt+Jt+Ge)*bt,xr=(Xt+Jt)*bt;for(let Nr=0;Nr<bt;++Nr)zt[jt+Nr]=$[xr+Nr]}}if(Fe==="symmetric"){if(ke)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const Dt=lt-1,Gt=nt-1;for(let Xt=0;Xt<Et;++Xt){const Jt=Xt*ft,jt=(0,W.calculateReflectOffset)(Xt,Dt)*nt;for(let xr=0;xr<ft;++xr){if(Xt<lt&&xr<nt)continue;const Nr=(Jt+xr)*bt,Tr=(jt+(0,W.calculateReflectOffset)(xr,Gt))*bt;for(let Qe=0;Qe<bt;++Qe)zt[Nr+Qe]=$[Tr+Qe]}}}$=zt,ie=[Et,ft,bt]}return[$,ie]}rescale($){for(let ie=0;ie<$.length;++ie)$[ie]=this.rescale_factor*$[ie]}get_resize_output_image_size($,ie){const[ve,Fe]=$.size;let ke,ze;if(this.do_thumbnail){const{height:lt,width:nt}=ie;ke=Math.min(lt,nt)}else Number.isInteger(ie)?(ke=ie,ze=this.config.max_size??ke):ie!==void 0&&(ke=ie.shortest_edge,ze=ie.longest_edge);if(ke!==void 0||ze!==void 0){const lt=ke===void 0?1:Math.max(ke/ve,ke/Fe),nt=ve*lt,bt=Fe*lt,ft=ze===void 0?1:Math.min(ze/nt,ze/bt);let Et=Math.floor(Number((nt*ft).toFixed(2))),zt=Math.floor(Number((bt*ft).toFixed(2)));return this.size_divisibility!==void 0&&([Et,zt]=Z([Et,zt],this.size_divisibility)),[Et,zt]}else if(ie!==void 0&&ie.width!==void 0&&ie.height!==void 0){let lt=ie.width,nt=ie.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let bt=nt/Fe,ft=lt/ve;Math.abs(1-ft)<Math.abs(1-bt)?bt=ft:ft=bt,nt=Y(bt*Fe,this.config.ensure_multiple_of),lt=Y(ft*ve,this.config.ensure_multiple_of)}return[lt,nt]}else{if(this.size_divisibility!==void 0)return Z([ve,Fe],this.size_divisibility);throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(ie)}`)}}async resize($){const[ie,ve]=this.get_resize_output_image_size($,this.size);return await $.resize(ie,ve,{resample:this.resample})}async preprocess($,{do_normalize:ie=null,do_pad:ve=null,do_convert_rgb:Fe=null,do_convert_grayscale:ke=null,do_flip_channel_order:ze=null}={}){this.do_crop_margin&&($=await this.crop_margin($));const[lt,nt]=$.size;if(Fe??this.do_convert_rgb?$=$.rgb():ke&&($=$.grayscale()),this.do_resize&&($=await this.resize($)),this.do_thumbnail&&($=await this.thumbnail($,this.size,this.resample)),this.do_center_crop){let Ge,Bt;Number.isInteger(this.crop_size)?(Ge=this.crop_size,Bt=this.crop_size):(Ge=this.crop_size.width,Bt=this.crop_size.height),$=await $.center_crop(Ge,Bt)}const bt=[$.height,$.width];let ft=Float32Array.from($.data),Et=[$.height,$.width,$.channels];if(this.do_rescale&&this.rescale(ft),ie??this.do_normalize){let Ge=this.image_mean;Array.isArray(this.image_mean)||(Ge=new Array($.channels).fill(Ge));let Bt=this.image_std;if(Array.isArray(this.image_std)||(Bt=new Array($.channels).fill(Ge)),Ge.length!==$.channels||Bt.length!==$.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${Ge.length}) and \`image_std\` (${Bt.length}) must match the number of channels in the image (${$.channels}).`);for(let Dt=0;Dt<ft.length;Dt+=$.channels)for(let Gt=0;Gt<$.channels;++Gt)ft[Dt+Gt]=(ft[Dt+Gt]-Ge[Gt])/Bt[Gt]}if(ve??this.do_pad){if(this.pad_size)[ft,Et]=this.pad_image(ft,[$.height,$.width,$.channels],this.pad_size);else if(this.size_divisibility){const[Ge,Bt]=Z([Et[1],Et[0]],this.size_divisibility);[ft,Et]=this.pad_image(ft,Et,{width:Ge,height:Bt})}}if(ze??this.do_flip_channel_order){if(Et[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let Ge=0;Ge<ft.length;Ge+=3){const Bt=ft[Ge];ft[Ge]=ft[Ge+2],ft[Ge+2]=Bt}}const zt=new Me.Tensor("float32",ft,Et).permute(2,0,1);return{original_size:[nt,lt],reshaped_input_size:bt,pixel_values:zt}}async _call($,...ie){Array.isArray($)||($=[$]);const ve=await Promise.all($.map(ke=>this.preprocess(ke)));return{pixel_values:(0,Me.stack)(ve.map(ke=>ke.pixel_values),0),original_sizes:ve.map(ke=>ke.original_size),reshaped_input_sizes:ve.map(ke=>ke.reshaped_input_size)}}}class L extends le{post_process_semantic_segmentation($,ie=null){const ve=$.logits,Fe=ve.dims[0];if(ie!==null&&ie.length!==Fe)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const ke=[];for(let ze=0;ze<Fe;++ze){const lt=ie!==null?ie[ze]:null;let nt=ve[ze];lt!==null&&(nt=(0,Me.interpolate)(nt,lt,"bilinear",!1));const[bt,ft]=lt??nt.dims.slice(-2),Et=new Me.Tensor("int32",new Int32Array(bt*ft),[bt,ft]),zt=nt[0].data,Ge=Et.data;for(let Xt=1;Xt<nt.dims[0];++Xt){const Jt=nt[Xt].data;for(let jt=0;jt<Jt.length;++jt)Jt[jt]>zt[jt]&&(zt[jt]=Jt[jt],Ge[jt]=Xt)}const Bt=new Array(nt.dims[0]),Dt=Et.data;for(let Xt=0;Xt<Dt.length;++Xt){const Jt=Dt[Xt];Bt[Jt]=Jt}const Gt=Bt.filter(Xt=>Xt!==void 0);ke.push({segmentation:Et,labels:Gt})}return ke}}class te extends le{}class J extends te{}class de extends le{}class ae extends le{}class j extends le{}class I extends j{}class R extends le{}class k extends le{}class _e extends le{constructor($){super($),this.crop_pct=this.config.crop_pct??.875}async resize($){const ie=this.size?.shortest_edge;if(ie===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(ie<384){const ve=Math.floor(ie/this.crop_pct),[Fe,ke]=this.get_resize_output_image_size($,{shortest_edge:ve});$=await $.resize(Fe,ke,{resample:this.resample}),$=await $.center_crop(ie,ie)}else $=await $.resize(ie,ie,{resample:this.resample});return $}}class we extends _e{}class Ce extends le{}class Se extends le{}class Pe extends le{constructor($){super($),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(ie=>ie*ie))}}class Ye extends le{}class Xe extends le{}class ct extends le{}class ge extends le{}class V extends le{}class ce extends V{}class Ee extends le{post_process_object_detection(...$){return N(...$)}}class K extends Ee{}class We extends le{post_process_object_detection(...$){return N(...$)}}class dt extends le{}class tt extends le{}class at extends le{pad_image($,ie,ve,Fe={}){const[ke,ze,lt]=ie;let nt=this.image_mean;Array.isArray(this.image_mean)||(nt=new Array(lt).fill(nt));let bt=this.image_std;Array.isArray(bt)||(bt=new Array(lt).fill(nt));const ft=nt.map((Et,zt)=>-Et/bt[zt]);return super.pad_image($,ie,ve,{center:!0,constant_values:ft,...Fe})}}class Oe extends at{}class st extends le{async _call($){const ie=await super._call($),ve=[ie.pixel_values.dims[0],64,64],Fe=new Me.Tensor("int64",new BigInt64Array(ve.reduce((ke,ze)=>ke*ze)).fill(1n),ve);return{...ie,pixel_mask:Fe}}post_process_object_detection(...$){return N(...$)}remove_low_and_no_objects($,ie,ve,Fe){let ke=[],ze=[],lt=[];for(let nt=0;nt<$.dims[0];++nt){let bt=$[nt],ft=ie[nt],Et=(0,be.max)(bt.data)[1];if(Et===Fe)continue;let Ge=(0,be.softmax)(bt.data)[Et];Ge>ve&&(ke.push(ft),ze.push(Ge),lt.push(Et))}return[ke,ze,lt]}check_segment_validity($,ie,ve,Fe=.5,ke=.8){let ze=[],lt=0,nt=0;const bt=ie[ve].data;for(let Et=0;Et<$.length;++Et)$[Et]===ve&&(ze.push(Et),++lt),bt[Et]>=Fe&&++nt;let ft=lt>0&&nt>0;return ft&&(ft=lt/nt>ke),[ft,ze]}compute_segments($,ie,ve,Fe,ke,ze=null,lt=null){let[nt,bt]=lt??$[0].dims,ft=new Me.Tensor("int32",new Int32Array(nt*bt),[nt,bt]),Et=[];if(lt!==null)for(let Gt=0;Gt<$.length;++Gt)$[Gt]=(0,Me.interpolate)($[Gt],lt,"bilinear",!1);let zt=new Int32Array($[0].data.length),Ge=new Float32Array($[0].data.length);for(let Gt=0;Gt<$.length;++Gt){let Xt=ie[Gt];const Jt=$[Gt].data;for(let jt=0;jt<Jt.length;++jt)Jt[jt]*=Xt,Jt[jt]>Ge[jt]&&(zt[jt]=Gt,Ge[jt]=Jt[jt])}let Bt=0;const Dt=ft.data;for(let Gt=0;Gt<ve.length;++Gt){let Xt=ve[Gt],[Jt,jt]=this.check_segment_validity(zt,$,Gt,Fe,ke);if(Jt){++Bt;for(let xr of jt)Dt[xr]=Bt;Et.push({id:Bt,label_id:Xt,score:ie[Gt]})}}return[ft,Et]}post_process_panoptic_segmentation($,ie=.5,ve=.5,Fe=.8,ke=null,ze=null){ke===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),ke=new Set);const lt=$.logits,bt=$.pred_masks.sigmoid();let[ft,Et,zt]=lt.dims;if(zt-=1,ze!==null&&ze.length!==ft)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Ge=[];for(let Bt=0;Bt<ft;++Bt){let Dt=ze!==null?ze[Bt]:null,Gt=lt[Bt],Xt=bt[Bt],[Jt,jt,xr]=this.remove_low_and_no_objects(Gt,Xt,ie,zt);if(xr.length===0){let[Qe,St]=Dt??Xt.dims.slice(-2),Ot=new Me.Tensor("int32",new Int32Array(Qe*St).fill(-1),[Qe,St]);Ge.push({segmentation:Ot,segments_info:[]});continue}let[Nr,Tr]=this.compute_segments(Jt,jt,xr,ve,Fe,ke,Dt);Ge.push({segmentation:Nr,segments_info:Tr})}return Ge}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class Tt extends le{post_process_object_detection(...$){return N(...$)}}class Ie extends le{reshape_input_points($,ie,ve,Fe=!1){$=structuredClone($);let ke=(0,W.calculateDimensions)($);if(ke.length===3)Fe||(ke=[1,...ke]),$=[$];else if(ke.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let ze=0;ze<$.length;++ze){let lt=ie[ze],nt=ve[ze],bt=[nt[0]/lt[0],nt[1]/lt[1]];for(let ft=0;ft<$[ze].length;++ft)for(let Et=0;Et<$[ze][ft].length;++Et)for(let zt=0;zt<$[ze][ft][Et].length;++zt)$[ze][ft][Et][zt]*=bt[zt%2]}return new Me.Tensor("float32",Float32Array.from($.flat(1/0)),ke)}add_input_labels($,ie){let ve=(0,W.calculateDimensions)($);if(ve.length===2)ve=[1,...ve],$=[$];else if(ve.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(ve.some((Fe,ke)=>Fe!==ie.dims[ke]))throw Error(`The first ${ve.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new Me.Tensor("int64",$.flat(1/0).map(BigInt),ve)}async _call($,{input_points:ie=null,input_labels:ve=null,input_boxes:Fe=null}={}){const ke=await super._call($);if(ie&&(ke.input_points=this.reshape_input_points(ie,ke.original_sizes,ke.reshaped_input_sizes)),ve){if(!ke.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");ke.input_labels=this.add_input_labels(ve,ke.input_points)}return Fe&&(ke.input_boxes=this.reshape_input_points(Fe,ke.original_sizes,ke.reshaped_input_sizes,!0)),ke}async post_process_masks($,ie,ve,{mask_threshold:Fe=0,binarize:ke=!0,pad_size:ze=null}={}){const lt=[];ze=ze??this.pad_size;const nt=[ze.height,ze.width];for(let bt=0;bt<ie.length;++bt){const ft=ie[bt],Et=ve[bt];let zt=await(0,Me.interpolate_4d)($[bt],{mode:"bilinear",size:nt});if(zt=zt.slice(null,null,[0,Et[0]],[0,Et[1]]),zt=await(0,Me.interpolate_4d)(zt,{mode:"bilinear",size:ft}),ke){const Ge=zt.data,Bt=new Uint8Array(Ge.length);for(let Dt=0;Dt<Ge.length;++Dt)Ge[Dt]>Fe&&(Bt[Dt]=1);zt=new Me.Tensor("bool",Bt,zt.dims)}lt.push(zt)}return lt}generate_crop_boxes($,ie,{crop_n_layers:ve=0,overlap_ratio:Fe=.3413333333333333,points_per_crop:ke=32,crop_n_points_downscale_factor:ze=1}={}){}}class G extends le{pad_image($,ie,ve,Fe={}){const[ke,ze,lt]=ie;return super.pad_image($,ie,{width:ze+(ve-ze%ve)%ve,height:ke+(ve-ke%ve)%ve},{mode:"symmetric",center:!1,constant_values:-1,...Fe})}}class $e extends le{async _call($,ie){Array.isArray($)||($=[$]),Array.isArray(ie)||(ie=[ie]);const ve=await Promise.all($.map(ze=>this.preprocess(ze))),Fe=await Promise.all(ie.map(ze=>this.preprocess(ze,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,Me.stack)(ve.map((ze,lt)=>(0,Me.cat)([ze.pixel_values,Fe[lt].pixel_values],0)),0),original_sizes:ve.map(ze=>ze.original_size),reshaped_input_sizes:ve.map(ze=>ze.reshaped_input_size)}}}class He extends oe{constructor($){super($),this.config.mel_filters??=(0,D.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,D.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features($){const ie=await(0,D.spectrogram)($,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),ve=ie.data,Fe=(0,be.max)(ve)[0];for(let ke=0;ke<ve.length;++ke)ve[ke]=(Math.max(ve[ke],Fe-8)+4)/4;return ie}async _call($){P($,"WhisperFeatureExtractor");let ie;return $.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),ie=$.slice(0,this.config.n_samples)):(ie=new Float32Array(this.config.n_samples),ie.set($)),{input_features:(await this._extract_fbank_features(ie)).unsqueeze_(0)}}}class Re extends oe{_zero_mean_unit_var_norm($){const ve=$.reduce((ke,ze)=>ke+ze,0)/$.length,Fe=$.reduce((ke,ze)=>ke+(ze-ve)**2,0)/$.length;return $.map(ke=>(ke-ve)/Math.sqrt(Fe+1e-7))}async _call($){P($,"Wav2Vec2FeatureExtractor"),$ instanceof Float64Array&&($=new Float32Array($));let ie=$;this.config.do_normalize&&(ie=this._zero_mean_unit_var_norm(ie));const ve=[1,ie.length];return{input_values:new Me.Tensor("float32",ie,ve),attention_mask:new Me.Tensor("int64",new BigInt64Array(ie.length).fill(1n),ve)}}}class Ne extends oe{constructor($){super($);const ie=this.config.sampling_rate,ve=(0,D.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ie/2),ie,null,"kaldi",!0);for(let Fe=0;Fe<ve.length;++Fe)ve[Fe].push(0);this.mel_filters=ve,this.window=(0,D.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features($,ie){return $=$.map(ve=>ve*32768),(0,D.spectrogram)($,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:ie,transpose:!0})}async _call($,{padding:ie=!0,pad_to_multiple_of:ve=2,do_normalize_per_mel_bins:Fe=!0,return_attention_mask:ke=!0}={}){P($,"SeamlessM4TFeatureExtractor");let ze=await this._extract_fbank_features($,this.config.max_length);if(Fe){const[Bt,Dt]=ze.dims,Gt=ze.data;for(let Xt=0;Xt<Dt;++Xt){let Jt=0;for(let Tr=0;Tr<Bt;++Tr)Jt+=Gt[Tr*Dt+Xt];const jt=Jt/Bt;let xr=0;for(let Tr=0;Tr<Bt;++Tr)xr+=(Gt[Tr*Dt+Xt]-jt)**2;xr/=Bt-1;const Nr=Math.sqrt(xr+1e-7);for(let Tr=0;Tr<Bt;++Tr){const Qe=Tr*Dt+Xt;Gt[Qe]=(Gt[Qe]-jt)/Nr}}}let lt;if(ie){const[Bt,Dt]=ze.dims,Gt=ze.data,Xt=Bt%ve;if(Xt>0){const Jt=new Float32Array(Dt*(Bt+Xt));Jt.set(Gt),Jt.fill(this.config.padding_value,Gt.length);const jt=Bt+Xt;ze=new Me.Tensor(ze.type,Jt,[jt,Dt]),ke&&(lt=new Me.Tensor("int64",new BigInt64Array(jt),[1,jt]),lt.data.fill(1n,0,Bt))}}const[nt,bt]=ze.dims,ft=this.config.stride;if(nt%ft!==0)throw new Error(`The number of frames (${nt}) must be a multiple of the stride (${ft}).`);const zt=ze.view(1,Math.floor(nt/ft),bt*ft),Ge={input_features:zt};if(ke){const Bt=zt.dims[1],Dt=new BigInt64Array(Bt);if(lt){const Gt=lt.data;for(let Xt=1,Jt=0;Xt<nt;Xt+=ft,++Jt)Dt[Jt]=Gt[Xt]}else Dt.fill(1n);Ge.attention_mask=new Me.Tensor("int64",Dt,[1,Bt])}return Ge}}class qe extends oe{constructor($){super($);const ie=this.config.sampling_rate,ve=(0,D.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ie/2),ie,null,"kaldi",!0);for(let Fe=0;Fe<ve.length;++Fe)ve[Fe].push(0);this.mel_filters=ve,this.window=(0,D.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features($,ie){return(0,D.spectrogram)($,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:ie,transpose:!0})}async _call($){P($,"ASTFeatureExtractor");const ie=await this._extract_fbank_features($,this.config.max_length);if(this.config.do_normalize){const ve=this.std*2,Fe=ie.data;for(let ke=0;ke<Fe.length;++ke)Fe[ke]=(Fe[ke]-this.mean)/ve}return{input_values:ie.unsqueeze_(0)}}}class ut extends oe{constructor($){super($),this.mel_filters=(0,D.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,D.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,D.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel($,ie,ve,Fe){let ke;const ze=$.length-ie;if(ze>0)if(ve==="rand_trunc"){const lt=Math.floor(Math.random()*(ze+1));$=$.subarray(lt,lt+ie),ke=await this._extract_fbank_features($,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${ve}" not implemented`);else{if(ze<0){let lt=new Float64Array(ie);if(lt.set($),Fe==="repeat")for(let nt=$.length;nt<ie;nt+=$.length)lt.set($.subarray(0,Math.min($.length,ie-nt)),nt);else if(Fe==="repeatpad")for(let nt=$.length;nt<-ze;nt+=$.length)lt.set($,nt);$=lt}if(ve==="fusion")throw new Error(`Truncation strategy "${ve}" not implemented`);ke=await this._extract_fbank_features($,this.mel_filters_slaney,this.config.nb_max_samples)}return ke.unsqueeze_(0)}async _extract_fbank_features($,ie,ve=null){return(0,D.spectrogram)($,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:ie,log_mel:"dB",max_num_frames:ve,do_pad:!1,transpose:!0})}async _call($,{max_length:ie=null}={}){return P($,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel($,ie??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}class ht extends oe{async _call($){P($,"PyAnnoteFeatureExtractor"),$ instanceof Float64Array&&($=new Float32Array($));const ie=[1,1,$.length];return{input_values:new Me.Tensor("float32",$,ie)}}samples_to_frames($){return($-this.config.offset)/this.config.step}post_process_speaker_diarization($,ie){const ve=ie/this.samples_to_frames(ie)/this.config.sampling_rate,Fe=[];for(const ke of $.tolist()){const ze=[];let lt=-1;for(let nt=0;nt<ke.length;++nt){const bt=(0,be.softmax)(ke[nt]),[ft,Et]=(0,be.max)(bt),[zt,Ge]=[nt,nt+1];Et!==lt?(lt=Et,ze.push({id:Et,start:zt,end:Ge,score:ft})):(ze.at(-1).end=Ge,ze.at(-1).score+=ft)}Fe.push(ze.map(({id:nt,start:bt,end:ft,score:Et})=>({id:nt,start:bt*ve,end:ft*ve,confidence:Et/(ft-bt)})))}return Fe}}class vt extends oe{constructor($){super($);const ie=this.config.sampling_rate,ve=(0,D.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ie/2),ie,null,"kaldi",!0);for(let Fe=0;Fe<ve.length;++Fe)ve[Fe].push(0);this.mel_filters=ve,this.window=(0,D.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features($){return $=$.map(ie=>ie*32768),(0,D.spectrogram)($,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call($){P($,"WeSpeakerFeatureExtractor");const ie=(await this._extract_fbank_features($)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const ve=ie.mean(1).data,Fe=ie.data,[ke,ze,lt]=ie.dims;for(let nt=0;nt<ke;++nt){const bt=nt*ze*lt,ft=nt*lt;for(let Et=0;Et<ze;++Et){const zt=bt+Et*lt;for(let Ge=0;Ge<lt;++Ge)Fe[zt+Ge]-=ve[ft+Ge]}}}return{input_features:ie}}}class xt extends oe{}class M extends v.Callable{constructor($){super(),this.feature_extractor=$}async _call($,...ie){return await this.feature_extractor($,...ie)}}class U extends M{async _call(...$){return await this.feature_extractor(...$)}post_process_masks(...$){return this.feature_extractor.post_process_masks(...$)}reshape_input_points(...$){return this.feature_extractor.reshape_input_points(...$)}}class A extends M{async _call($){return await this.feature_extractor($)}}class ee extends M{async _call($){return await this.feature_extractor($)}}class he extends M{async _call($){return await this.feature_extractor($)}post_process_speaker_diarization(...$){return this.feature_extractor.post_process_speaker_diarization(...$)}}class Ze extends M{async _call($){return await this.feature_extractor($)}}class Ke extends M{}class _t extends M{constructor($){super($);const{tasks_answer_post_processing_type:ie,task_prompts_without_inputs:ve,task_prompts_with_input:Fe}=$.config;this.tasks_answer_post_processing_type=new Map(Object.entries(ie??{})),this.task_prompts_without_inputs=new Map(Object.entries(ve??{})),this.task_prompts_with_input=new Map(Object.entries(Fe??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts($){typeof $=="string"&&($=[$]);const ie=[];for(const ve of $)if(this.task_prompts_without_inputs.has(ve))ie.push(this.task_prompts_without_inputs.get(ve));else{for(const[Fe,ke]of this.task_prompts_with_input)if(ve.includes(Fe)){ie.push(ke.replaceAll("{input}",ve).replaceAll(Fe,""));break}ie.length!==$.length&&ie.push(ve)}return ie}post_process_generation($,ie,ve){const Fe=this.tasks_answer_post_processing_type.get(ie)??"pure_text";$=$.replaceAll("<s>","").replaceAll("</s>","");let ke;switch(Fe){case"pure_text":ke=$;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const ze=Fe==="ocr"?"quad_boxes":"bboxes",lt=$.matchAll(this.regexes[ze]),nt=[],bt=[];for(const[ft,Et,...zt]of lt)nt.push(Et?Et.trim():nt.at(-1)??""),bt.push(zt.map((Ge,Bt)=>(Number(Ge)+.5)/this.size_per_bin*ve[Bt%2]));ke={labels:nt,[ze]:bt};break;default:throw new Error(`Task "${ie}" (of type "${Fe}") not yet implemented.`)}return{[ie]:ke}}}class rt{static FEATURE_EXTRACTOR_CLASS_MAPPING={ImageFeatureExtractor:le,WhisperFeatureExtractor:He,ViTFeatureExtractor:Ce,MobileViTFeatureExtractor:V,MobileViTImageProcessor:ce,MobileNetV1FeatureExtractor:Ye,MobileNetV2FeatureExtractor:Xe,MobileNetV3FeatureExtractor:ct,MobileNetV4FeatureExtractor:ge,OwlViTFeatureExtractor:Ee,Owlv2ImageProcessor:K,CLIPFeatureExtractor:j,CLIPImageProcessor:I,Florence2Processor:_t,ChineseCLIPFeatureExtractor:R,SiglipImageProcessor:k,ConvNextFeatureExtractor:_e,ConvNextImageProcessor:we,SegformerFeatureExtractor:L,BitImageProcessor:de,DPTImageProcessor:J,DPTFeatureExtractor:te,GLPNFeatureExtractor:ae,BeitFeatureExtractor:tt,DeiTFeatureExtractor:dt,DetrFeatureExtractor:st,RTDetrImageProcessor:We,YolosFeatureExtractor:Tt,DonutFeatureExtractor:at,NougatImageProcessor:Oe,EfficientNetImageProcessor:Pe,ViTImageProcessor:Se,VitMatteImageProcessor:$e,SamImageProcessor:Ie,Swin2SRImageProcessor:G,Wav2Vec2FeatureExtractor:Re,SeamlessM4TFeatureExtractor:Ne,SpeechT5FeatureExtractor:xt,ASTFeatureExtractor:qe,ClapFeatureExtractor:ut,PyAnnoteFeatureExtractor:ht,WeSpeakerFeatureExtractor:vt};static PROCESSOR_CLASS_MAPPING={WhisperProcessor:A,Wav2Vec2ProcessorWithLM:ee,PyAnnoteProcessor:he,SamProcessor:U,SpeechT5Processor:Ze,OwlViTProcessor:Ke,Florence2Processor:_t};static async from_pretrained($,{progress_callback:ie=null,config:ve=null,cache_dir:Fe=null,local_files_only:ke=!1,revision:ze="main"}={}){let lt=ve??await(0,me.getModelJSON)($,"preprocessor_config.json",!0,{progress_callback:ie,config:ve,cache_dir:Fe,local_files_only:ke,revision:ze}),nt=lt.feature_extractor_type??lt.image_processor_type,bt=this.FEATURE_EXTRACTOR_CLASS_MAPPING[nt];if(!bt)if(lt.size!==void 0)console.warn(`Feature extractor type "${nt}" not found, assuming ImageFeatureExtractor due to size parameter in config.`),bt=le;else throw new Error(`Unknown Feature Extractor type: ${nt}`);let ft=this.PROCESSOR_CLASS_MAPPING[lt.processor_class]??M,Et=new bt(lt);return new ft(Et)}}},"./src/tokenizers.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{AlbertTokenizer:()=>Dt,AutoTokenizer:()=>fn,BartTokenizer:()=>jr,BertTokenizer:()=>Bt,BlenderbotSmallTokenizer:()=>ys,BlenderbotTokenizer:()=>rs,BloomTokenizer:()=>Or,CLIPTokenizer:()=>Yt,CamembertTokenizer:()=>St,CodeGenTokenizer:()=>ts,CodeLlamaTokenizer:()=>Ls,CohereTokenizer:()=>Dr,ConvBertTokenizer:()=>Nr,DebertaTokenizer:()=>Jt,DebertaV2Tokenizer:()=>jt,DistilBertTokenizer:()=>Qe,ElectraTokenizer:()=>Zr,EsmTokenizer:()=>Bn,FalconTokenizer:()=>ms,GPT2Tokenizer:()=>Zn,GPTNeoXTokenizer:()=>_s,GemmaTokenizer:()=>Jn,Grok1Tokenizer:()=>xn,HerbertTokenizer:()=>xr,LlamaTokenizer:()=>En,M2M100Tokenizer:()=>Gn,MBart50Tokenizer:()=>qr,MBartTokenizer:()=>un,MPNetTokenizer:()=>fs,MarianTokenizer:()=>gs,MobileBertTokenizer:()=>Gt,NllbTokenizer:()=>$n,NougatTokenizer:()=>ns,PreTrainedTokenizer:()=>Ge,Qwen2Tokenizer:()=>Rs,RoFormerTokenizer:()=>Tr,RobertaTokenizer:()=>Wn,SiglipTokenizer:()=>qn,SpeechT5Tokenizer:()=>bs,SqueezeBertTokenizer:()=>Xt,T5Tokenizer:()=>ps,TokenizerModel:()=>Ce,VitsTokenizer:()=>Ms,Wav2Vec2CTCTokenizer:()=>ws,WhisperTokenizer:()=>es,XLMRobertaTokenizer:()=>hs,XLMTokenizer:()=>Ot,is_chinese_char:()=>ae});var v=u("./src/utils/generic.js"),W=u("./src/utils/core.js"),me=u("./src/utils/hub.js"),be=u("./src/utils/maths.js"),Me=u("./src/utils/tensor.js"),D=u("./src/utils/data-structures.js"),E=u("./node_modules/@huggingface/jinja/dist/index.js"),N=u("./src/models/whisper/common_whisper.js"),P=u("./src/utils/constants.js");async function Y(ye,_){const z=await Promise.all([(0,me.getModelJSON)(ye,"tokenizer.json",!0,_),(0,me.getModelJSON)(ye,"tokenizer_config.json",!0,_)]);return _.legacy!==null&&(z[1].legacy=_.legacy),z}function Z(ye,_){const z=[];let X=0;for(const Q of ye.matchAll(_)){const xe=Q[0];X<Q.index&&z.push(ye.slice(X,Q.index)),xe.length>0&&z.push(xe),X=Q.index+xe.length}return X<ye.length&&z.push(ye.slice(X)),z}function oe(ye,_=!0){if(ye.Regex!==void 0){let z=ye.Regex.replace(/\\([#&~])/g,"$1");for(const[X,Q]of _e)z=z.replaceAll(X,Q);return new RegExp(z,"gu")}else if(ye.String!==void 0){const z=(0,W.escapeRegExp)(ye.String);return new RegExp(_?z:`(${z})`,"gu")}else return console.warn("Unknown pattern type:",ye),null}function le(ye){return new Map(Object.entries(ye))}function L(ye){const _=ye.dims;switch(_.length){case 1:return ye.tolist();case 2:if(_[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return ye.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${_.length}.`)}}function te(ye){return ye.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function J(ye){return ye.replace(/[\u0300-\u036f]/g,"")}function de(ye){return J(ye.toLowerCase())}function ae(ye){return ye>=19968&&ye<=40959||ye>=13312&&ye<=19903||ye>=131072&&ye<=173791||ye>=173824&&ye<=177983||ye>=177984&&ye<=178207||ye>=178208&&ye<=183983||ye>=63744&&ye<=64255||ye>=194560&&ye<=195103}function j(ye,_,z){const X=[];let Q=0;for(;Q<ye.length;){if(X.push(ye[Q]),(z.get(ye[Q])??_)!==_){++Q;continue}for(;Q<ye.length&&(z.get(ye[Q])??_)===_;)++Q}return X}function I(ye){return ye.match(/\S+/g)||[]}const R="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",k=new RegExp(`^[${R}]+$`,"gu"),_e=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"]]);class we{constructor(_){this.content=_.content,this.id=_.id,this.single_word=_.single_word??!1,this.lstrip=_.lstrip??!1,this.rstrip=_.rstrip??!1,this.special=_.special??!1,this.normalized=_.normalized??null}}class Ce extends v.Callable{constructor(_){super(),this.config=_,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(_,...z){switch(_.type){case"WordPiece":return new Se(_);case"Unigram":return new Pe(_,...z);case"BPE":return new ct(_);default:if(_.vocab)return new ge(_,...z);throw new Error(`Unknown TokenizerModel type: ${_.type}`)}}_call(_){let z=this.encode(_);return this.fuse_unk&&(z=j(z,this.unk_token_id,this.tokens_to_ids)),z}encode(_){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(_){return _.map(z=>this.tokens_to_ids.get(z)??this.unk_token_id)}convert_ids_to_tokens(_){return _.map(z=>this.vocab[z]??this.unk_token)}}class Se extends Ce{constructor(_){super(_),this.tokens_to_ids=le(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.max_input_chars_per_word=_.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[z,X]of this.tokens_to_ids)this.vocab[X]=z}encode(_){const z=[];for(const X of _){const Q=[...X];if(Q.length>this.max_input_chars_per_word){z.push(this.unk_token);continue}let xe=!1,De=0;const Mt=[];for(;De<Q.length;){let gt=Q.length,Ct=null;for(;De<gt;){let mt=Q.slice(De,gt).join("");if(De>0&&(mt=this.config.continuing_subword_prefix+mt),this.tokens_to_ids.has(mt)){Ct=mt;break}--gt}if(Ct===null){xe=!0;break}Mt.push(Ct),De=gt}xe?z.push(this.unk_token):z.push(...Mt)}return z}}class Pe extends Ce{constructor(_,z){super(_);const X=_.vocab.length;this.vocab=new Array(X),this.scores=new Array(X);for(let Q=0;Q<X;++Q){const xe=_.vocab[Q];this.vocab[Q]=xe[0],this.scores[Q]=xe[1]}this.unk_token_id=_.unk_id,this.unk_token=this.vocab[_.unk_id],this.tokens_to_ids=new Map(this.vocab.map((Q,xe)=>[Q,xe])),this.bosToken=" ",this.bosTokenId=this.tokens_to_ids.get(this.bosToken),this.eosToken=z.eos_token,this.eosTokenId=this.tokens_to_ids.get(this.eosToken),this.unkToken=this.vocab[this.unk_token_id],this.minScore=(0,be.min)(this.scores)[0],this.unkScore=this.minScore-10,this.scores[this.unk_token_id]=this.unkScore,this.trie=new D.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(_){const z=_.sentence,X=z.length;let Q=0;for(;Q<X;){let De=!1;for(let Mt of this.trie.commonPrefixSearch(z.slice(Q))){const gt=this.tokens_to_ids.get(Mt),Ct=this.scores[gt],mt=Mt.length;_.insert(Q,mt,Ct,gt),!De&&mt===1&&(De=!0)}De||_.insert(Q,1,this.unkScore,this.unk_token_id),Q+=1}}tokenize(_){const z=new D.TokenLattice(_,this.bosTokenId,this.eosTokenId);return this.populateNodes(z),z.tokens()}encode(_){const z=[];for(const X of _){const Q=this.tokenize(X);z.push(...Q)}return z}}const Ye=(()=>{const ye=[...Array.from({length:94},(Q,xe)=>xe+33),...Array.from({length:12},(Q,xe)=>xe+161),...Array.from({length:82},(Q,xe)=>xe+174)],_=ye.slice();let z=0;for(let Q=0;Q<256;++Q)ye.includes(Q)||(ye.push(Q),_.push(256+z),z+=1);const X=_.map(Q=>String.fromCharCode(Q));return Object.fromEntries(ye.map((Q,xe)=>[Q,X[xe]]))})(),Xe=(0,W.reverseDictionary)(Ye);class ct extends Ce{constructor(_){super(_),this.BPE_SPLIT_TOKEN=" ",this.tokens_to_ids=le(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[z,X]of this.tokens_to_ids)this.vocab[X]=z;this.bpe_ranks=new Map(_.merges.map((z,X)=>[z,X])),this.merges=_.merges.map(z=>z.split(this.BPE_SPLIT_TOKEN)),this.end_of_word_suffix=_.end_of_word_suffix,this.continuing_subword_suffix=_.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(_){if(_.length===0)return[];const z=this.cache.get(_);if(z!==void 0)return z;const X=Array.from(_);this.end_of_word_suffix&&(X[X.length-1]+=this.end_of_word_suffix);let Q=[];if(X.length>1){const xe=new D.PriorityQueue((gt,Ct)=>gt.score<Ct.score);let De={token:X[0],bias:0,prev:null,next:null},Mt=De;for(let gt=1;gt<X.length;++gt){const Ct={bias:gt/X.length,token:X[gt],prev:Mt,next:null};Mt.next=Ct,this._add_node(xe,Mt),Mt=Ct}for(;!xe.isEmpty();){const gt=xe.pop();if(gt.deleted||!gt.next||gt.next.deleted)continue;if(gt.deleted=!0,gt.next.deleted=!0,gt.prev){const mt={...gt.prev};gt.prev.deleted=!0,gt.prev=mt,mt.prev?mt.prev.next=mt:De=mt}const Ct={token:gt.token+gt.next.token,bias:gt.bias,prev:gt.prev,next:gt.next.next};Ct.prev?(Ct.prev.next=Ct,this._add_node(xe,Ct.prev)):De=Ct,Ct.next&&(Ct.next.prev=Ct,this._add_node(xe,Ct))}for(let gt=De;gt!==null;gt=gt.next)Q.push(gt.token)}else Q=X;if(this.continuing_subword_suffix)for(let xe=0;xe<Q.length-1;++xe)Q[xe]+=this.continuing_subword_suffix;return this.cache.set(_,Q),Q}_add_node(_,z){const X=this.bpe_ranks.get(z.token+this.BPE_SPLIT_TOKEN+z.next.token);X!==void 0&&(z.score=X+z.bias,_.push(z))}encode(_){const z=[];for(const X of _){if(this.ignore_merges&&this.tokens_to_ids.has(X)){z.push(X);continue}const Q=this.bpe(X);for(const xe of Q)this.tokens_to_ids.has(xe)?z.push(xe):this.byte_fallback?z.push(...Array.from(this.text_encoder.encode(xe)).map(De=>`<0x${De.toString(16).toUpperCase().padStart(2,"0")}>`)):z.push(this.unk_token)}return z}}class ge extends Ce{constructor(_,z){super(_),this.tokens_to_ids=le(z.target_lang?_.vocab[z.target_lang]:_.vocab),this.bos_token=z.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=z.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=z.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=z.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[X,Q]of this.tokens_to_ids)this.vocab[Q]=X}encode(_){return _}}class V extends v.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"BertNormalizer":return new Tt(_);case"Precompiled":return new ke(_);case"Sequence":return new st(_);case"Replace":return new ce(_);case"NFC":return new Ee(_);case"NFKC":return new K(_);case"NFKD":return new We(_);case"Strip":return new dt(_);case"StripAccents":return new tt(_);case"Lowercase":return new at(_);case"Prepend":return new Oe(_);default:throw new Error(`Unknown Normalizer type: ${_.type}`)}}normalize(_){throw Error("normalize should be implemented in subclass.")}_call(_){return this.normalize(_)}}class ce extends V{normalize(_){const z=oe(this.config.pattern);return z===null?_:_.replaceAll(z,this.config.content)}}class Ee extends V{normalize(_){return _=_.normalize("NFC"),_}}class K extends V{normalize(_){return _=_.normalize("NFKC"),_}}class We extends V{normalize(_){return _=_.normalize("NFKD"),_}}class dt extends V{normalize(_){return this.config.strip_left&&this.config.strip_right?_=_.trim():(this.config.strip_left&&(_=_.trimStart()),this.config.strip_right&&(_=_.trimEnd())),_}}class tt extends V{normalize(_){return _=J(_),_}}class at extends V{normalize(_){return _=_.toLowerCase(),_}}class Oe extends V{normalize(_){return _=this.config.prepend+_,_}}class st extends V{constructor(_){super(_),this.normalizers=_.normalizers.map(z=>V.fromConfig(z))}normalize(_){return this.normalizers.reduce((z,X)=>X.normalize(z),_)}}class Tt extends V{_tokenize_chinese_chars(_){const z=[];for(let X=0;X<_.length;++X){const Q=_[X],xe=Q.charCodeAt(0);ae(xe)?(z.push(" "),z.push(Q),z.push(" ")):z.push(Q)}return z.join("")}stripAccents(_){return _.normalize("NFD").replace(/[\u0300-\u036f]/g,"")}_is_control(_){switch(_){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(_)}}_clean_text(_){const z=[];for(const X of _){const Q=X.charCodeAt(0);Q===0||Q===65533||this._is_control(X)||(/^\s$/.test(X)?z.push(" "):z.push(X))}return z.join("")}normalize(_){return this.config.clean_text&&(_=this._clean_text(_)),this.config.handle_chinese_chars&&(_=this._tokenize_chinese_chars(_)),this.config.lowercase?(_=_.toLowerCase(),this.config.strip_accents!==!1&&(_=this.stripAccents(_))):this.config.strip_accents&&(_=this.stripAccents(_)),_}}class Ie extends v.Callable{static fromConfig(_){if(_===null)return null;switch(_.type){case"BertPreTokenizer":return new G(_);case"Sequence":return new ze(_);case"Whitespace":return new lt(_);case"WhitespaceSplit":return new nt(_);case"Metaspace":return new ve(_);case"ByteLevel":return new $e(_);case"Split":return new He(_);case"Punctuation":return new Re(_);case"Digits":return new Ne(_);case"Replace":return new bt(_);default:throw new Error(`Unknown PreTokenizer type: ${_.type}`)}}pre_tokenize_text(_,z){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(_,z){return(Array.isArray(_)?_.map(X=>this.pre_tokenize_text(X,z)):this.pre_tokenize_text(_,z)).flat()}_call(_,z){return this.pre_tokenize(_,z)}}class G extends Ie{constructor(_){super(),this.pattern=new RegExp(`[^\\s${R}]+|[${R}]`,"gu")}pre_tokenize_text(_,z){return _.trim().match(this.pattern)||[]}}class $e extends Ie{constructor(_){super(),this.config=_,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=Ye,this.text_encoder=new TextEncoder}pre_tokenize_text(_,z){return this.add_prefix_space&&!_.startsWith(" ")&&(_=" "+_),(this.use_regex?_.match(this.pattern)||[]:[_]).map(Q=>Array.from(this.text_encoder.encode(Q),xe=>this.byte_encoder[xe]).join(""))}}class He extends Ie{constructor(_){super(),this.config=_,this.pattern=oe(this.config.pattern,this.config.invert)}pre_tokenize_text(_,z){return this.pattern===null?[]:this.config.invert?_.match(this.pattern)||[]:Z(_,this.pattern)}}class Re extends Ie{constructor(_){super(),this.config=_,this.pattern=new RegExp(`[^${R}]+|[${R}]+`,"gu")}pre_tokenize_text(_,z){return _.match(this.pattern)||[]}}class Ne extends Ie{constructor(_){super(),this.config=_;const z=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(z,"gu")}pre_tokenize_text(_,z){return _.match(this.pattern)||[]}}class qe extends v.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"TemplateProcessing":return new vt(_);case"ByteLevel":return new xt(_);case"RobertaProcessing":return new ht(_);case"BertProcessing":return new ut(_);case"Sequence":return new M(_);default:throw new Error(`Unknown PostProcessor type: ${_.type}`)}}post_process(_,...z){throw Error("post_process should be implemented in subclass.")}_call(_,...z){return this.post_process(_,...z)}}class ut extends qe{constructor(_){super(_),this.cls=_.cls[0],this.sep=_.sep[0]}post_process(_,z=null,{add_special_tokens:X=!0}={}){X&&(_=(0,W.mergeArrays)([this.cls],_,[this.sep]));let Q=new Array(_.length).fill(0);if(z!==null){const xe=X&&this instanceof ht?[this.sep]:[],De=X?[this.sep]:[];_=(0,W.mergeArrays)(_,xe,z,De),Q=(0,W.mergeArrays)(Q,new Array(z.length+xe.length+De.length).fill(1))}return{tokens:_,token_type_ids:Q}}}class ht extends ut{}class vt extends qe{constructor(_){super(_),this.single=_.single,this.pair=_.pair}post_process(_,z=null,{add_special_tokens:X=!0}={}){const Q=z===null?this.single:this.pair;let xe=[],De=[];for(const Mt of Q)"SpecialToken"in Mt?X&&(xe.push(Mt.SpecialToken.id),De.push(Mt.SpecialToken.type_id)):"Sequence"in Mt&&(Mt.Sequence.id==="A"?(xe=(0,W.mergeArrays)(xe,_),De=(0,W.mergeArrays)(De,new Array(_.length).fill(Mt.Sequence.type_id))):Mt.Sequence.id==="B"&&(xe=(0,W.mergeArrays)(xe,z),De=(0,W.mergeArrays)(De,new Array(z.length).fill(Mt.Sequence.type_id))));return{tokens:xe,token_type_ids:De}}}class xt extends qe{post_process(_,z=null){return z&&(_=(0,W.mergeArrays)(_,z)),{tokens:_}}}class M extends qe{constructor(_){super(_),this.processors=_.processors.map(z=>qe.fromConfig(z))}post_process(_,z=null,X={}){let Q;for(const xe of this.processors)if(xe instanceof xt)_=xe.post_process(_).tokens,z&&(z=xe.post_process(z).tokens);else{const De=xe.post_process(_,z,X);_=De.tokens,Q=De.token_type_ids}return{tokens:_,token_type_ids:Q}}}class U extends v.Callable{constructor(_){super(),this.config=_,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=_.trim_offsets}static fromConfig(_){if(_===null)return null;switch(_.type){case"WordPiece":return new Ke(_);case"Metaspace":return new Fe(_);case"ByteLevel":return new _t(_);case"Replace":return new A(_);case"ByteFallback":return new ee(_);case"Fuse":return new he(_);case"Strip":return new Ze(_);case"Sequence":return new Te(_);case"CTC":return new rt(_);case"BPEDecoder":return new $(_);default:throw new Error(`Unknown Decoder type: ${_.type}`)}}_call(_){return this.decode(_)}decode(_){return this.decode_chain(_).join("")}decode_chain(_){throw Error("`decode_chain` should be implemented in subclass.")}}class A extends U{decode_chain(_){const z=oe(this.config.pattern);return z===null?_:_.map(X=>X.replaceAll(z,this.config.content))}}class ee extends U{constructor(_){super(_),this.text_decoder=new TextDecoder}decode_chain(_){const z=[];let X=[];for(const Q of _){let xe=null;if(Q.length===6&&Q.startsWith("<0x")&&Q.endsWith(">")){const De=parseInt(Q.slice(3,5),16);isNaN(De)||(xe=De)}if(xe!==null)X.push(xe);else{if(X.length>0){const De=this.text_decoder.decode(Uint8Array.from(X));z.push(De),X=[]}z.push(Q)}}if(X.length>0){const Q=this.text_decoder.decode(Uint8Array.from(X));z.push(Q),X=[]}return z}}class he extends U{decode_chain(_){return[_.join("")]}}class Ze extends U{constructor(_){super(_),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(_){return _.map(z=>{let X=0;for(let xe=0;xe<this.start&&z[xe]===this.content;++xe){X=xe+1;continue}let Q=z.length;for(let xe=0;xe<this.stop;++xe){const De=z.length-xe-1;if(z[De]===this.content){Q=De;continue}else break}return z.slice(X,Q)})}}class Ke extends U{constructor(_){super(_),this.cleanup=_.cleanup}decode_chain(_){return _.map((z,X)=>(X!==0&&(z.startsWith(this.config.prefix)?z=z.replace(this.config.prefix,""):z=" "+z),this.cleanup&&(z=te(z)),z))}}class _t extends U{constructor(_){super(_),this.byte_decoder=Xe,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(_){const z=_.join(""),X=new Uint8Array([...z].map(xe=>this.byte_decoder[xe]));return this.text_decoder.decode(X)}decode_chain(_){const z=[];let X=[];for(const Q of _)this.added_tokens.find(xe=>xe.content===Q)!==void 0?(X.length>0&&(z.push(this.convert_tokens_to_string(X)),X=[]),z.push(Q)):X.push(Q);return X.length>0&&z.push(this.convert_tokens_to_string(X)),z}}class rt extends U{constructor(_){super(_),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(_){if(_.length===0)return"";const z=[_[0]];for(let xe=1;xe<_.length;++xe)_[xe]!==z.at(-1)&&z.push(_[xe]);let Q=z.filter(xe=>xe!==this.pad_token).join("");return this.cleanup&&(Q=te(Q).replaceAll(this.word_delimiter_token," ").trim()),Q}decode_chain(_){return[this.convert_tokens_to_string(_)]}}class Te extends U{constructor(_){super(_),this.decoders=_.decoders.map(z=>U.fromConfig(z))}decode_chain(_){return this.decoders.reduce((z,X)=>X.decode_chain(z),_)}}class $ extends U{constructor(_){super(_),this.suffix=this.config.suffix}decode_chain(_){return _.map((z,X)=>z.replaceAll(this.suffix,X===_.length-1?"":" "))}}class ie extends U{decode_chain(_){let z="";for(let X=1;X<_.length;X+=2)z+=_[X];return[z]}}class ve extends Ie{constructor(_){super(),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement,this.strRep=_.str_rep||this.replacement,this.prepend_scheme=_.prepend_scheme??"always"}pre_tokenize_text(_,{section_index:z=void 0}={}){let X=_.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!X.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&z===0)&&(X=this.strRep+X),[X]}}class Fe extends U{constructor(_){super(_),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement}decode_chain(_){const z=[];for(let X=0;X<_.length;++X){let Q=_[X].replaceAll(this.replacement," ");this.addPrefixSpace&&X==0&&Q.startsWith(" ")&&(Q=Q.substring(1)),z.push(Q)}return z}}class ke extends V{constructor(_){super(_),this.charsmap=_.precompiled_charsmap}normalize(_){return _=_.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),_=_.replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm," "),_.includes("～")?_=_.split("～").map(X=>X.normalize("NFKC")).join("～"):_=_.normalize("NFKC"),_}}class ze extends Ie{constructor(_){super(),this.tokenizers=_.pretokenizers.map(z=>Ie.fromConfig(z))}pre_tokenize_text(_,z){return this.tokenizers.reduce((X,Q)=>Q.pre_tokenize(X,z),[_])}}class lt extends Ie{constructor(_){super()}pre_tokenize_text(_,z){return _.match(/\w+|[^\w\s]+/g)||[]}}class nt extends Ie{constructor(_){super()}pre_tokenize_text(_,z){return I(_)}}class bt extends Ie{constructor(_){super(),this.config=_,this.pattern=oe(this.config.pattern),this.content=this.config.content}pre_tokenize_text(_,z){return this.pattern===null?[_]:[_.replaceAll(this.pattern,this.config.content)]}}const ft=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Et(ye,_,z,X){for(const Q of Object.keys(ye)){const xe=_-ye[Q].length,De=z(Q),Mt=new Array(xe).fill(De);ye[Q]=X==="right"?(0,W.mergeArrays)(ye[Q],Mt):(0,W.mergeArrays)(Mt,ye[Q])}}function zt(ye,_){for(const z of Object.keys(ye))ye[z].length=_}class Ge extends v.Callable{return_token_type_ids=!1;padding_side="right";constructor(_,z){super(),this._tokenizer_config=z,this.normalizer=V.fromConfig(_.normalizer),this.pre_tokenizer=Ie.fromConfig(_.pre_tokenizer),this.model=Ce.fromConfig(_.model,z),this.post_processor=qe.fromConfig(_.post_processor),this.decoder=U.fromConfig(_.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const X of _.added_tokens){const Q=new we(X);this.added_tokens.push(Q),this.model.tokens_to_ids.set(Q.content,Q.id),this.model.vocab[Q.id]=Q.content,Q.special&&(this.special_tokens.push(Q.content),this.all_special_ids.push(Q.id))}if(this.additional_special_tokens=z.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.toSorted((X,Q)=>Q.content.length-X.content.length).map(X=>`${X.lstrip?"\\s*":""}(${(0,W.escapeRegExp)(X.content)})${X.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.model_max_length=z.model_max_length,this.remove_space=z.remove_space,this.clean_up_tokenization_spaces=z.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=z.do_lowercase_and_remove_accent??!1,z.padding_side&&(this.padding_side=z.padding_side),this.legacy=!1,this.chat_template=z.chat_template??null,Array.isArray(this.chat_template)){const X=Object.create(null);for(const{name:Q,template:xe}of this.chat_template){if(typeof Q!="string"||typeof xe!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');X[Q]=xe}this.chat_template=X}this._compiled_template_cache=new Map}getToken(..._){for(const z of _){const X=this._tokenizer_config[z];if(X)if(typeof X=="object"){if(X.__type==="AddedToken")return X.content;throw Error(`Unknown token: ${X}`)}else return X}return null}static async from_pretrained(_,{progress_callback:z=null,config:X=null,cache_dir:Q=null,local_files_only:xe=!1,revision:De="main",legacy:Mt=null}={}){const gt=await Y(_,{progress_callback:z,config:X,cache_dir:Q,local_files_only:xe,revision:De,legacy:Mt});return new this(...gt)}_call(_,{text_pair:z=null,add_special_tokens:X=!0,padding:Q=!1,truncation:xe=null,max_length:De=null,return_tensor:Mt=!0,return_token_type_ids:gt=null}={}){const Ct=Array.isArray(_);let mt;if(Ct){if(_.length===0)throw Error("text array must be non-empty");if(z!==null){if(Array.isArray(z)){if(_.length!==z.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");mt=_.map((rr,fr)=>this._encode_plus(rr,{text_pair:z[fr],add_special_tokens:X,return_token_type_ids:gt}))}else mt=_.map(rr=>this._encode_plus(rr,{add_special_tokens:X,return_token_type_ids:gt}))}else{if(_==null)throw Error("text may not be null or undefined");if(Array.isArray(z))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");mt=[this._encode_plus(_,{text_pair:z,add_special_tokens:X,return_token_type_ids:gt})]}if(De===null?Q==="max_length"?De=this.model_max_length:De=(0,be.max)(mt.map(rr=>rr.input_ids.length))[0]:xe||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),De=Math.min(De,this.model_max_length??1/0),Q||xe)for(let rr=0;rr<mt.length;++rr)mt[rr].input_ids.length!==De&&(mt[rr].input_ids.length>De?xe&&zt(mt[rr],De):Q&&Et(mt[rr],De,fr=>fr==="input_ids"?this.pad_token_id:0,this.padding_side));const cr={};if(Mt){if(!(Q&&xe)&&mt.some(fr=>{for(const Qt of Object.keys(fr))if(fr[Qt].length!==mt[0][Qt]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const rr=[mt.length,mt[0].input_ids.length];for(const fr of Object.keys(mt[0]))cr[fr]=new Me.Tensor("int64",BigInt64Array.from(mt.flatMap(Qt=>Qt[fr]).map(BigInt)),rr)}else{for(const rr of Object.keys(mt[0]))cr[rr]=mt.map(fr=>fr[rr]);if(!Ct)for(const rr of Object.keys(cr))cr[rr]=cr[rr][0]}return cr}_encode_text(_){return _===null?null:(this.added_tokens_regex?_.split(this.added_tokens_regex).filter(Q=>Q):[_]).map((Q,xe)=>{if(this.added_tokens.find(Mt=>Mt.content===Q)!==void 0)return Q;{if(this.remove_space===!0&&(Q=Q.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(Q=de(Q)),this.normalizer!==null&&(Q=this.normalizer(Q)),Q.length===0)return[];const Mt=this.pre_tokenizer!==null?this.pre_tokenizer(Q,{section_index:xe}):[Q];return this.model(Mt)}}).flat()}_encode_plus(_,{text_pair:z=null,add_special_tokens:X=!0,return_token_type_ids:Q=null}={}){const{tokens:xe,token_type_ids:De}=this._tokenize_helper(_,{pair:z,add_special_tokens:X}),Mt=this.model.convert_tokens_to_ids(xe),gt={input_ids:Mt,attention_mask:new Array(Mt.length).fill(1)};return(Q??this.return_token_type_ids)&&De&&(gt.token_type_ids=De),gt}_tokenize_helper(_,{pair:z=null,add_special_tokens:X=!1}={}){const Q=this._encode_text(_),xe=this._encode_text(z);return this.post_processor?this.post_processor(Q,xe,{add_special_tokens:X}):{tokens:(0,W.mergeArrays)(Q??[],xe??[])}}tokenize(_,{pair:z=null,add_special_tokens:X=!1}={}){return this._tokenize_helper(_,{pair:z,add_special_tokens:X}).tokens}encode(_,{text_pair:z=null,add_special_tokens:X=!0,return_token_type_ids:Q=null}={}){return this._encode_plus(_,{text_pair:z,add_special_tokens:X,return_token_type_ids:Q}).input_ids}batch_decode(_,z={}){return _ instanceof Me.Tensor&&(_=_.tolist()),_.map(X=>this.decode(X,z))}decode(_,z={}){if(_ instanceof Me.Tensor&&(_=L(_)),!Array.isArray(_)||_.length===0||!(0,W.isIntegralNumber)(_[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(_,z)}decode_single(_,{skip_special_tokens:z=!1,clean_up_tokenization_spaces:X=null}){let Q=this.model.convert_ids_to_tokens(_);z&&(Q=Q.filter(De=>!this.special_tokens.includes(De)));let xe=this.decoder?this.decoder(Q):Q.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(xe=xe.replaceAll(this.decoder.end_of_word_suffix," "),z&&(xe=xe.trim())),(X??this.clean_up_tokenization_spaces)&&(xe=te(xe)),xe}apply_chat_template(_,{tools:z=null,documents:X=null,chat_template:Q=null,add_generation_prompt:xe=!1,tokenize:De=!0,padding:Mt=!1,truncation:gt=!1,max_length:Ct=null,return_tensor:mt=!0,return_dict:cr=!1,tokenizer_kwargs:rr={},...fr}={}){if(this.chat_template&&typeof this.chat_template=="object"||this.chat_template===null){const zr=this.chat_template;if(Q!==null&&Object.hasOwn(zr,Q))Q=zr[Q];else if(Q===null&&"default"in zr)Q=zr.default;else if(Q===null)throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(zr).sort()}.`)}else if(this.chat_template)Q=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");if(typeof Q!="string")throw Error(`chat_template must be a string, but got ${typeof Q}`);let Qt=this._compiled_template_cache.get(Q);Qt===void 0&&(Qt=new E.Template(Q),this._compiled_template_cache.set(Q,Qt));const Er=Object.create(null);for(const zr of ft){const Je=this.getToken(zr);Je&&(Er[zr]=Je)}const mn=Qt.render({messages:_,add_generation_prompt:xe,tools:z,documents:X,...Er,...fr});if(De){const zr=this._call(mn,{add_special_tokens:!1,padding:Mt,truncation:gt,max_length:Ct,return_tensor:mt,...rr});return cr?zr:zr.input_ids}return mn}}class Bt extends Ge{return_token_type_ids=!0}class Dt extends Ge{return_token_type_ids=!0}class Gt extends Ge{return_token_type_ids=!0}class Xt extends Ge{return_token_type_ids=!0}class Jt extends Ge{return_token_type_ids=!0}class jt extends Ge{return_token_type_ids=!0}class xr extends Ge{return_token_type_ids=!0}class Nr extends Ge{return_token_type_ids=!0}class Tr extends Ge{return_token_type_ids=!0}class Qe extends Ge{}class St extends Ge{}class Ot extends Ge{return_token_type_ids=!0;constructor(_,z){super(_,z),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Zr extends Ge{return_token_type_ids=!0}class ps extends Ge{}class Zn extends Ge{}class jr extends Ge{}class un extends Ge{constructor(_,z){super(_,z),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(X=>this.languageRegex.test(X)),this.lang_to_token=X=>X}_build_translation_inputs(_,z,X){return Sn(this,_,z,X)}}class qr extends un{}class Wn extends Ge{}class Or extends Ge{constructor(_,z){const X=".,!?…。，、।۔،",Q=_.pre_tokenizer?.pretokenizers[0]?.pattern;Q&&Q.Regex===` ?[^(\\s|[${X}])]+`&&(Q.Regex=` ?[^\\s${X}]+`),super(_,z)}}const Dn="▁";class En extends Ge{padding_side="left";constructor(_,z){super(_,z),this.legacy=z.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new ve({replacement:Dn,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(_){if(_===null)return null;if(this.legacy||_.length===0)return super._encode_text(_);let z=super._encode_text(Dn+_.replaceAll(Dn," "));return z.length>1&&z[0]===Dn&&this.special_tokens.includes(z[1])&&(z=z.slice(1)),z}}class Ls extends Ge{}class hs extends Ge{}class fs extends Ge{}class ms extends Ge{}class _s extends Ge{}class Bn extends Ge{}class Rs extends Ge{}class Jn extends Ge{}class xn extends Ge{}function Sn(ye,_,z,X){if(!("language_codes"in ye)||!Array.isArray(ye.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in ye)||!(ye.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in ye)||typeof ye.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const Q=X.src_lang,xe=X.tgt_lang;if(!ye.language_codes.includes(xe))throw new Error(`Target language code "${xe}" is not valid. Must be one of: {${ye.language_codes.join(", ")}}`);if(Q!==void 0){if(!ye.language_codes.includes(Q))throw new Error(`Source language code "${Q}" is not valid. Must be one of: {${ye.language_codes.join(", ")}}`);for(const De of ye.post_processor.config.single)if("SpecialToken"in De&&ye.languageRegex.test(De.SpecialToken.id)){De.SpecialToken.id=ye.lang_to_token(Q);break}}return X.forced_bos_token_id=ye.model.convert_tokens_to_ids([ye.lang_to_token(xe)])[0],ye._call(_,z)}class $n extends Ge{constructor(_,z){super(_,z),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(X=>this.languageRegex.test(X)),this.lang_to_token=X=>X}_build_translation_inputs(_,z,X){return Sn(this,_,z,X)}}class Gn extends Ge{constructor(_,z){super(_,z),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(X=>this.languageRegex.test(X)).map(X=>X.slice(2,-2)),this.lang_to_token=X=>`__${X}__`}_build_translation_inputs(_,z,X){return Sn(this,_,z,X)}}class es extends Ge{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(_,{return_timestamps:z=!1,return_language:X=!1,time_precision:Q=null,force_full_sequences:xe=!0}={}){if(Q===null)throw Error("Must specify time_precision");let De=null;const Mt=z==="word";function gt(){return{language:De,timestamp:[null,null],text:""}}const Ct=[];let mt=gt(),cr=0;const rr=this.timestamp_begin;let fr=[],Qt=[],Er=!1,mn=null;const zr=new Set(this.all_special_ids);for(const gr of _){const Xr=gr.tokens,sn=Mt?gr.token_timestamps:null;let Zt=null,dn=rr;if("stride"in gr){const[yr,$t,mr]=gr.stride;if(cr-=$t,mn=yr-mr,$t&&(dn=$t/Q+rr),mr)for(let $r=Xr.length-1;$r>=0;--$r){const Br=Number(Xr[$r]);if(Br>=rr){if(Zt!==null&&(Br-rr)*Q<mn)break;Zt=Br}}}let Jr=[],wr=[];for(let yr=0;yr<Xr.length;++yr){const $t=Number(Xr[yr]);if(zr.has($t)){const mr=this.decode([$t]),$r=N.WHISPER_LANGUAGE_MAPPING.get(mr.slice(2,-2));if($r!==void 0){if(De!==null&&$r!==De&&!z){fr.push(Jr);const Br=this.findLongestCommonSequence(fr)[0],cn=this.decode(Br);mt.text=cn,Ct.push(mt),fr=[],Jr=[],mt=gt()}De=mt.language=$r}}else if($t>=rr){const mr=($t-rr)*Q+cr,$r=(0,be.round)(mr,2);if(Zt!==null&&$t>=Zt)Er=!0;else if(Er||fr.length>0&&$t<dn)Er=!1;else if(mt.timestamp[0]===null)mt.timestamp[0]=$r;else if($r!==mt.timestamp[0]){mt.timestamp[1]=$r,fr.push(Jr),Mt&&Qt.push(wr);const[Br,cn]=this.findLongestCommonSequence(fr,Qt),It=this.decode(Br);mt.text=It,Mt&&(mt.words=this.collateWordTimestamps(Br,cn,De)),Ct.push(mt),fr=[],Jr=[],Qt=[],wr=[],mt=gt()}}else if(Jr.push($t),Mt){let mr=(0,be.round)(sn[yr]+cr,2),$r;if(yr+1<sn.length){$r=(0,be.round)(sn[yr+1]+cr,2);const Br=this.decode([$t]);k.test(Br)&&($r=(0,be.round)(Math.min(mr+Q,$r),2))}else $r=null;wr.push([mr,$r])}}if("stride"in gr){const[yr,$t,mr]=gr.stride;cr+=yr-mr}Jr.length>0?(fr.push(Jr),Mt&&Qt.push(wr)):fr.every(yr=>yr.length===0)&&(mt=gt(),fr=[],Jr=[],Qt=[],wr=[])}if(fr.length>0){if(xe&&z)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[gr,Xr]=this.findLongestCommonSequence(fr,Qt),sn=this.decode(gr);mt.text=sn,Mt&&(mt.words=this.collateWordTimestamps(gr,Xr,De)),Ct.push(mt)}let Je=Object.create(null);const kn=Ct.map(gr=>gr.text).join("");if(z||X){for(let gr=0;gr<Ct.length;++gr){const Xr=Ct[gr];z||delete Xr.timestamp,X||delete Xr.language}if(Mt){const gr=[];for(const Xr of Ct)for(const sn of Xr.words)gr.push(sn);Je={chunks:gr}}else Je={chunks:Ct}}return[kn,Je]}findLongestCommonSequence(_,z=null){let X=_[0],Q=X.length,xe=[];const De=Array.isArray(z)&&z.length>0;let Mt=De?[]:null,gt=De?z[0]:null;for(let Ct=1;Ct<_.length;++Ct){const mt=_[Ct];let cr=0,rr=[Q,Q,0,0];const fr=mt.length;for(let gr=1;gr<Q+fr;++gr){const Xr=Math.max(0,Q-gr),sn=Math.min(Q,Q+fr-gr),Zt=X.slice(Xr,sn),dn=Math.max(0,gr-Q),Jr=Math.min(fr,gr),wr=mt.slice(dn,Jr);if(Zt.length!==wr.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let yr;De?yr=Zt.filter(($r,Br)=>$r===wr[Br]&&gt[Xr+Br]<=z[Ct][dn+Br]).length:yr=Zt.filter(($r,Br)=>$r===wr[Br]).length;const $t=gr/1e4,mr=yr/gr+$t;yr>1&&mr>cr&&(cr=mr,rr=[Xr,sn,dn,Jr])}const[Qt,Er,mn,zr]=rr,Je=Math.floor((Er+Qt)/2),kn=Math.floor((zr+mn)/2);xe.push(...X.slice(0,Je)),X=mt.slice(kn),Q=X.length,De&&(Mt.push(...gt.slice(0,Je)),gt=z[Ct].slice(kn))}return xe.push(...X),De?(Mt.push(...gt),[xe,Mt]):[xe,[]]}collateWordTimestamps(_,z,X){const[Q,xe,De]=this.combineTokensIntoWords(_,X),Mt=[];for(let gt=0;gt<Q.length;++gt){const Ct=De[gt];Mt.push({text:Q[gt],timestamp:[z[Ct.at(0)][0],z[Ct.at(-1)][1]]})}return Mt}combineTokensIntoWords(_,z,X=`"'“¡¿([{-`,Q=`"'.。,，!！?？:：”)]}、`){z=z??"english";let xe,De,Mt;return["chinese","japanese","thai","lao","myanmar"].includes(z)?[xe,De,Mt]=this.splitTokensOnUnicode(_):[xe,De,Mt]=this.splitTokensOnSpaces(_),this.mergePunctuations(xe,De,Mt,X,Q)}decode(_,z){let X;return z?.decode_with_timestamps?(_ instanceof Me.Tensor&&(_=L(_)),X=this.decodeWithTimestamps(_,z)):X=super.decode(_,z),X}decodeWithTimestamps(_,z){const X=z?.time_precision??.02,Q=Array.from(this.all_special_ids).at(-1)+1;let xe=[[]];for(let De of _)if(De=Number(De),De>=Q){const Mt=((De-Q)*X).toFixed(2);xe.push(`<|${Mt}|>`),xe.push([])}else xe[xe.length-1].push(De);return xe=xe.map(De=>typeof De=="string"?De:super.decode(De,z)),xe.join("")}splitTokensOnUnicode(_){const z=this.decode(_,{decode_with_timestamps:!0}),X="�",Q=[],xe=[],De=[];let Mt=[],gt=[],Ct=0;for(let mt=0;mt<_.length;++mt){const cr=_[mt];Mt.push(cr),gt.push(mt);const rr=this.decode(Mt,{decode_with_timestamps:!0});(!rr.includes(X)||z[Ct+rr.indexOf(X)]===X)&&(Q.push(rr),xe.push(Mt),De.push(gt),Mt=[],gt=[],Ct+=rr.length)}return[Q,xe,De]}splitTokensOnSpaces(_){const[z,X,Q]=this.splitTokensOnUnicode(_),xe=[],De=[],Mt=[],gt=new RegExp(`^[${R}]$`,"gu");for(let Ct=0;Ct<z.length;++Ct){const mt=z[Ct],cr=X[Ct],rr=Q[Ct],fr=cr[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Qt=mt.startsWith(" "),Er=mt.trim(),mn=gt.test(Er);if(fr||Qt||mn||xe.length===0)xe.push(mt),De.push(cr),Mt.push(rr);else{const zr=xe.length-1;xe[zr]+=mt,De[zr].push(...cr),Mt[zr].push(...rr)}}return[xe,De,Mt]}mergePunctuations(_,z,X,Q,xe){const De=structuredClone(_),Mt=structuredClone(z),gt=structuredClone(X);let Ct=De.length-2,mt=De.length-1;for(;Ct>=0;)De[Ct].startsWith(" ")&&Q.includes(De[Ct].trim())?(De[mt]=De[Ct]+De[mt],Mt[mt]=(0,W.mergeArrays)(Mt[Ct],Mt[mt]),gt[mt]=(0,W.mergeArrays)(gt[Ct],gt[mt]),De[Ct]="",Mt[Ct]=[],gt[Ct]=[]):mt=Ct,--Ct;for(Ct=0,mt=1;mt<De.length;)!De[Ct].endsWith(" ")&&xe.includes(De[mt])?(De[Ct]+=De[mt],Mt[Ct]=(0,W.mergeArrays)(Mt[Ct],Mt[mt]),gt[Ct]=(0,W.mergeArrays)(gt[Ct],gt[mt]),De[mt]="",Mt[mt]=[],gt[mt]=[]):Ct=mt,++mt;return[De.filter(cr=>cr),Mt.filter(cr=>cr.length>0),gt.filter(cr=>cr.length>0)]}get_decoder_prompt_ids({language:_=null,task:z=null,no_timestamps:X=!0}={}){const Q=[];if(_){const xe=(0,N.whisper_language_to_code)(_),De=this.model.tokens_to_ids.get(`<|${xe}|>`);if(De===void 0)throw new Error(`Unable to find language "${xe}" in model vocabulary. Please report this issue at ${P.GITHUB_ISSUE_URL}.`);Q.push(De)}else Q.push(null);if(z){if(z=z.toLowerCase(),z!=="transcribe"&&z!=="translate")throw new Error(`Task "${z}" is not supported. Must be one of: ["transcribe", "translate"]`);const xe=this.model.tokens_to_ids.get(`<|${z}|>`);if(xe===void 0)throw new Error(`Unable to find task "${z}" in model vocabulary. Please report this issue at ${P.GITHUB_ISSUE_URL}.`);Q.push(xe)}else Q.push(null);if(X){const xe=this.model.tokens_to_ids.get("<|notimestamps|>");if(xe===void 0)throw new Error(`Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at ${P.GITHUB_ISSUE_URL}.`);Q.push(xe)}return Q.map((xe,De)=>[De+1,xe]).filter(xe=>xe[1]!==null)}}class ts extends Ge{}class Yt extends Ge{}class qn extends Ge{}class gs extends Ge{constructor(_,z){super(_,z),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(X=>this.languageRegex.test(X)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(_){if(_===null)return null;const[z,...X]=_.trim().split(this.languageRegex);if(X.length===0)return super._encode_text(z);if(X.length===2){const[Q,xe]=X;return this.supported_language_codes.includes(Q)||console.warn(`Unsupported language code "${Q}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,W.mergeArrays)([Q],super._encode_text(xe))}}}class ws extends Ge{}class rs extends Ge{}class ys extends Ge{}class bs extends Ge{}class ns extends Ge{}class Ms extends Ge{constructor(_,z){super(_,z),this.decoder=new ie({})}}class Dr extends Ge{}class fn{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:ps,DistilBertTokenizer:Qe,CamembertTokenizer:St,DebertaTokenizer:Jt,DebertaV2Tokenizer:jt,BertTokenizer:Bt,HerbertTokenizer:xr,ConvBertTokenizer:Nr,RoFormerTokenizer:Tr,XLMTokenizer:Ot,ElectraTokenizer:Zr,MobileBertTokenizer:Gt,SqueezeBertTokenizer:Xt,AlbertTokenizer:Dt,GPT2Tokenizer:Zn,BartTokenizer:jr,MBartTokenizer:un,MBart50Tokenizer:qr,RobertaTokenizer:Wn,WhisperTokenizer:es,CodeGenTokenizer:ts,CLIPTokenizer:Yt,SiglipTokenizer:qn,MarianTokenizer:gs,BloomTokenizer:Or,NllbTokenizer:$n,M2M100Tokenizer:Gn,LlamaTokenizer:En,CodeLlamaTokenizer:Ls,XLMRobertaTokenizer:hs,MPNetTokenizer:fs,FalconTokenizer:ms,GPTNeoXTokenizer:_s,EsmTokenizer:Bn,Wav2Vec2CTCTokenizer:ws,BlenderbotTokenizer:rs,BlenderbotSmallTokenizer:ys,SpeechT5Tokenizer:bs,NougatTokenizer:ns,VitsTokenizer:Ms,Qwen2Tokenizer:Rs,GemmaTokenizer:Jn,Grok1Tokenizer:xn,CohereTokenizer:Dr,PreTrainedTokenizer:Ge};static async from_pretrained(_,{progress_callback:z=null,config:X=null,cache_dir:Q=null,local_files_only:xe=!1,revision:De="main",legacy:Mt=null}={}){const[gt,Ct]=await Y(_,{progress_callback:z,config:X,cache_dir:Q,local_files_only:xe,revision:De,legacy:Mt}),mt=Ct.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let cr=this.TOKENIZER_CLASS_MAPPING[mt];return cr||(console.warn(`Unknown tokenizer class "${mt}", attempting to construct from base class.`),cr=Ge),new cr(gt,Ct)}}},"./src/utils/audio.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{hamming:()=>N,hanning:()=>E,mel_filter_bank:()=>te,read_audio:()=>Me,spectrogram:()=>I,window_function:()=>R});var v=u("./src/utils/hub.js"),W=u("./src/utils/maths.js"),me=u("./src/utils/core.js"),be=u("./src/utils/tensor.js");async function Me(k,_e){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const we=await(await(0,v.getFile)(k)).arrayBuffer(),Ce=new AudioContext({sampleRate:_e});typeof _e>"u"&&console.warn(`No sampling rate provided, using default of ${Ce.sampleRate}Hz.`);const Se=await Ce.decodeAudioData(we);let Pe;if(Se.numberOfChannels===2){const Ye=Math.sqrt(2),Xe=Se.getChannelData(0),ct=Se.getChannelData(1);Pe=new Float32Array(Xe.length);for(let ge=0;ge<Se.length;++ge)Pe[ge]=Ye*(Xe[ge]+ct[ge])/2}else Pe=Se.getChannelData(0);return Pe}function D(k,_e){if(k<1)return new Float64Array;if(k===1)return new Float64Array([1]);const we=1-_e,Ce=2*Math.PI/(k-1),Se=new Float64Array(k);for(let Pe=0;Pe<k;++Pe)Se[Pe]=_e-we*Math.cos(Pe*Ce);return Se}function E(k){return D(k,.5)}function N(k){return D(k,.54)}const P={htk:k=>2595*Math.log10(1+k/700),kaldi:k=>1127*Math.log(1+k/700),slaney:(k,_e=1e3,we=15,Ce=27/Math.log(6.4))=>k>=_e?we+Math.log(k/_e)*Ce:3*k/200};function Y(k,_e="htk"){const we=P[_e];if(!we)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof k=="number"?we(k):k.map(Ce=>we(Ce))}const Z={htk:k=>700*(10**(k/2595)-1),kaldi:k=>700*(Math.exp(k/1127)-1),slaney:(k,_e=1e3,we=15,Ce=Math.log(6.4)/27)=>k>=we?_e*Math.exp(Ce*(k-we)):200*k/3};function oe(k,_e="htk"){const we=Z[_e];if(!we)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof k=="number"?we(k):k.map(Ce=>we(Ce))}function le(k,_e){const we=Float64Array.from({length:_e.length-1},(Ye,Xe)=>_e[Xe+1]-_e[Xe]),Ce=Array.from({length:k.length},()=>new Array(_e.length));for(let Ye=0;Ye<k.length;++Ye){const Xe=Ce[Ye];for(let ct=0;ct<_e.length;++ct)Xe[ct]=_e[ct]-k[Ye]}const Se=_e.length-2,Pe=Array.from({length:Se},()=>new Array(k.length));for(let Ye=0;Ye<k.length;++Ye){const Xe=Ce[Ye];for(let ct=0;ct<Se;++ct){const ge=-Xe[ct]/we[ct],V=Xe[ct+2]/we[ct+1];Pe[ct][Ye]=Math.max(0,Math.min(ge,V))}}return Pe}function L(k,_e,we){const Ce=(_e-k)/(we-1);return Float64Array.from({length:we},(Se,Pe)=>k+Ce*Pe)}function te(k,_e,we,Ce,Se,Pe=null,Ye="htk",Xe=!1){if(Pe!==null&&Pe!=="slaney")throw new Error('norm must be one of null or "slaney"');const ct=Y(we,Ye),ge=Y(Ce,Ye),V=L(ct,ge,_e+2);let ce=oe(V,Ye),Ee;if(Xe){const We=Se/(k*2);Ee=Y(Float64Array.from({length:k},(dt,tt)=>tt*We),Ye),ce=V}else Ee=L(0,Math.floor(Se/2),k);const K=le(Ee,ce);if(Pe!==null&&Pe==="slaney")for(let We=0;We<_e;++We){const dt=K[We],tt=2/(ce[We+2]-ce[We]);for(let at=0;at<k;++at)dt[at]*=tt}return K}function J(k,_e,we){const Ce=new k.constructor(k.length+_e+we),Se=k.length-1;for(let Pe=0;Pe<k.length;++Pe)Ce[_e+Pe]=k[Pe];for(let Pe=1;Pe<=_e;++Pe)Ce[_e-Pe]=k[(0,me.calculateReflectOffset)(Pe,Se)];for(let Pe=1;Pe<=we;++Pe)Ce[Se+_e+Pe]=k[(0,me.calculateReflectOffset)(Se-Pe,Se)];return Ce}function de(k,_e,we,Ce,Se){if(we<=0)throw new Error("reference must be greater than zero");if(Ce<=0)throw new Error("min_value must be greater than zero");we=Math.max(Ce,we);const Pe=Math.log10(we);for(let Ye=0;Ye<k.length;++Ye)k[Ye]=_e*Math.log10(Math.max(Ce,k[Ye])-Pe);if(Se!==null){if(Se<=0)throw new Error("db_range must be greater than zero");const Ye=(0,W.max)(k)[0]-Se;for(let Xe=0;Xe<k.length;++Xe)k[Xe]=Math.max(k[Xe],Ye)}return k}function ae(k,_e=1,we=1e-5,Ce=null){return de(k,20,_e,we,Ce)}function j(k,_e=1,we=1e-10,Ce=null){return de(k,10,_e,we,Ce)}async function I(k,_e,we,Ce,{fft_length:Se=null,power:Pe=1,center:Ye=!0,pad_mode:Xe="reflect",onesided:ct=!0,preemphasis:ge=null,mel_filters:V=null,mel_floor:ce=1e-10,log_mel:Ee=null,reference:K=1,min_value:We=1e-10,db_range:dt=null,remove_dc_offset:tt=null,min_num_frames:at=null,max_num_frames:Oe=null,do_pad:st=!0,transpose:Tt=!1}={}){const Ie=_e.length;if(Se===null&&(Se=we),we>Se)throw Error(`frame_length (${we}) may not be larger than fft_length (${Se})`);if(Ie!==we)throw new Error(`Length of the window (${Ie}) must equal frame_length (${we})`);if(Ce<=0)throw new Error("hop_length must be greater than zero");if(Pe===null&&V!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(Ye){if(Xe!=="reflect")throw new Error(`pad_mode="${Xe}" not implemented yet.`);const U=Math.floor((Se-1)/2)+1;k=J(k,U,U)}let G=Math.floor(1+Math.floor((k.length-we)/Ce));at!==null&&G<at&&(G=at);const $e=ct?Math.floor(Se/2)+1:Se;let He=G,Re=G;Oe!==null&&(Oe>G?st&&(Re=Oe):Re=He=Oe);const Ne=new W.FFT(Se),qe=new Float64Array(Se),ut=new Float64Array(Ne.outputBufferSize),ht=new Float32Array($e*Re);for(let U=0;U<He;++U){const A=U*Ce,ee=Math.min(k.length-A,we);ee!==we&&qe.fill(0,0,we);for(let he=0;he<ee;++he)qe[he]=k[A+he];if(tt){let he=0;for(let Ke=0;Ke<ee;++Ke)he+=qe[Ke];const Ze=he/ee;for(let Ke=0;Ke<ee;++Ke)qe[Ke]-=Ze}if(ge!==null){for(let he=ee-1;he>=1;--he)qe[he]-=ge*qe[he-1];qe[0]*=1-ge}for(let he=0;he<_e.length;++he)qe[he]*=_e[he];Ne.realTransform(ut,qe);for(let he=0;he<$e;++he){const Ze=he<<1;ht[he*Re+U]=ut[Ze]**2+ut[Ze+1]**2}}if(Pe!==null&&Pe!==2){const U=2/Pe;for(let A=0;A<ht.length;++A)ht[A]**=U}const vt=V.length;let xt=await(0,be.matmul)(new be.Tensor("float32",V.flat(),[vt,$e]),new be.Tensor("float32",ht,[$e,Re]));Tt&&(xt=xt.transpose(1,0));const M=xt.data;for(let U=0;U<M.length;++U)M[U]=Math.max(ce,M[U]);if(Pe!==null&&Ee!==null){const U=Math.min(M.length,He*vt);switch(Ee){case"log":for(let A=0;A<U;++A)M[A]=Math.log(M[A]);break;case"log10":for(let A=0;A<U;++A)M[A]=Math.log10(M[A]);break;case"dB":if(Pe===1)ae(M,K,We,dt);else if(Pe===2)j(M,K,We,dt);else throw new Error(`Cannot use log_mel option '${Ee}' with power ${Pe}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Ee}'`)}}return xt}function R(k,_e,{periodic:we=!0,frame_length:Ce=null,center:Se=!0}={}){const Pe=we?k+1:k;let Ye;switch(_e){case"boxcar":Ye=new Float64Array(Pe).fill(1);break;case"hann":case"hann_window":Ye=E(Pe);break;case"hamming":Ye=N(Pe);break;case"povey":Ye=E(Pe).map(Xe=>Math.pow(Xe,.85));break;default:throw new Error(`Unknown window type ${_e}.`)}if(we&&(Ye=Ye.subarray(0,k)),Ce===null)return Ye;if(k>Ce)throw new Error(`Length of the window (${k}) may not be larger than frame_length (${Ce})`);return Ye}},"./src/utils/constants.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{GITHUB_ISSUE_URL:()=>v});const v="https://github.com/xenova/transformers.js/issues/new/choose"},"./src/utils/core.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{calculateDimensions:()=>D,calculateReflectOffset:()=>Y,dispatchCallback:()=>v,escapeRegExp:()=>me,isIntegralNumber:()=>Me,isTypedArray:()=>be,mergeArrays:()=>N,pick:()=>Z,pop:()=>E,product:()=>P,reverseDictionary:()=>W});function v(oe,le){oe&&oe(le)}function W(oe){return Object.fromEntries(Object.entries(oe).map(([le,L])=>[L,le]))}function me(oe){return oe.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function be(oe){return oe?.prototype?.__proto__?.constructor?.name==="TypedArray"}function Me(oe){return Number.isInteger(oe)||typeof oe=="bigint"}function D(oe){const le=[];let L=oe;for(;Array.isArray(L);)le.push(L.length),L=L[0];return le}function E(oe,le,L=void 0){const te=oe[le];if(te!==void 0)return delete oe[le],te;if(L===void 0)throw Error(`Key ${le} does not exist in object.`);return L}function N(...oe){return Array.prototype.concat.apply([],oe)}function P(...oe){return oe.reduce((le,L)=>le.flatMap(te=>L.map(J=>[te,J])))}function Y(oe,le){return Math.abs((oe+le)%(2*le)-le)}function Z(oe,le){return Object.assign({},...le.map(L=>{if(oe[L]!==void 0)return{[L]:oe[L]}}))}},"./src/utils/data-structures.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{CharTrie:()=>W,PriorityQueue:()=>v,TokenLattice:()=>be});class v{constructor(E=(P,Y)=>P>Y,N=1/0){this._heap=[],this._comparator=E,this._maxSize=N}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...E){return this.extend(E)}extend(E){for(const N of E)if(this.size<this._maxSize)this._heap.push(N),this._siftUp();else{const P=this._smallest();this._comparator(N,this._heap[P])&&(this._heap[P]=N,this._siftUpFrom(P))}return this.size}pop(){const E=this.peek(),N=this.size-1;return N>0&&this._swap(0,N),this._heap.pop(),this._siftDown(),E}replace(E){const N=this.peek();return this._heap[0]=E,this._siftDown(),N}_parent(E){return(E+1>>>1)-1}_left(E){return(E<<1)+1}_right(E){return E+1<<1}_greater(E,N){return this._comparator(this._heap[E],this._heap[N])}_swap(E,N){const P=this._heap[E];this._heap[E]=this._heap[N],this._heap[N]=P}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(E){for(;E>0&&this._greater(E,this._parent(E));)this._swap(E,this._parent(E)),E=this._parent(E)}_siftDown(){let E=0;for(;this._left(E)<this.size&&this._greater(this._left(E),E)||this._right(E)<this.size&&this._greater(this._right(E),E);){const N=this._right(E)<this.size&&this._greater(this._right(E),this._left(E))?this._right(E):this._left(E);this._swap(E,N),E=N}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class W{constructor(){this.root=me.default()}extend(E){for(let N of E)this.push(N)}push(E){let N=this.root;for(let P of E){let Y=N.children.get(P);Y===void 0&&(Y=me.default(),N.children.set(P,Y)),N=Y}N.isLeaf=!0}*commonPrefixSearch(E){let N=this.root,P="";for(let Y=0;Y<E.length&&N!==void 0;++Y){const Z=E[Y];P+=Z,N=N.children.get(Z),N!==void 0&&N.isLeaf&&(yield P)}}}class me{constructor(E,N){this.isLeaf=E,this.children=N}static default(){return new me(!1,new Map)}}class be{constructor(E,N,P){this.sentence=E,this.len=E.length,this.bosTokenId=N,this.eosTokenId=P,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const Y=new Me(this.bosTokenId,0,0,0,0),Z=new Me(this.eosTokenId,1,this.len,0,0);this.nodes.push(Y.clone()),this.nodes.push(Z.clone()),this.beginNodes[this.len].push(Z),this.endNodes[0].push(Y)}insert(E,N,P,Y){const Z=this.nodes.length,oe=new Me(Y,Z,E,N,P);this.beginNodes[E].push(oe),this.endNodes[E+N].push(oe),this.nodes.push(oe)}viterbi(){const E=this.len;let N=0;for(;N<=E;){if(this.beginNodes[N].length==0)return[];for(let le of this.beginNodes[N]){le.prev=null;let L=0,te=null;for(let J of this.endNodes[N]){const de=J.backtraceScore+le.score;(te===null||de>L)&&(te=J.clone(),L=de)}if(te!==null)le.prev=te,le.backtraceScore=L;else return[]}++N}const P=[],Z=this.beginNodes[E][0].prev;if(Z===null)return[];let oe=Z.clone();for(;oe.prev!==null;)P.push(oe.clone()),oe=oe.clone().prev.clone();return P.reverse(),P}piece(E){return this.sentence.slice(E.pos,E.pos+E.length)}tokens(){return this.viterbi().map(N=>this.piece(N))}tokenIds(){return this.viterbi().map(N=>N.tokenId)}}class Me{constructor(E,N,P,Y,Z){this.tokenId=E,this.nodeId=N,this.pos=P,this.length=Y,this.score=Z,this.prev=null,this.backtraceScore=0}clone(){const E=new Me(this.tokenId,this.nodeId,this.pos,this.length,this.score);return E.prev=this.prev,E.backtraceScore=this.backtraceScore,E}}},"./src/utils/devices.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{DEVICE_TYPES:()=>v});const v=Object.freeze({cpu:"cpu",gpu:"gpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml"})},"./src/utils/dtypes.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{DATA_TYPES:()=>be,DEFAULT_DEVICE_DTYPE_MAPPING:()=>Me,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>D,isWebGpuFp16Supported:()=>me});var v=u("./src/env.js"),W=u("./src/utils/devices.js");const me=function(){let E;return async function(){if(E===void 0)if(!v.apis.IS_WEBGPU_AVAILABLE)E=!1;else try{E=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{E=!1}return E}}(),be=Object.freeze({fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),Me=Object.freeze({[W.DEVICE_TYPES.cpu]:be.q8,[W.DEVICE_TYPES.gpu]:be.fp32,[W.DEVICE_TYPES.wasm]:be.q8,[W.DEVICE_TYPES.webgpu]:be.fp32,[W.DEVICE_TYPES.cuda]:be.fp32,[W.DEVICE_TYPES.dml]:be.fp32}),D=Object.freeze({[be.fp32]:"",[be.fp16]:"_fp16",[be.int8]:"_int8",[be.uint8]:"_uint8",[be.q8]:"_quantized",[be.q4]:"_q4",[be.q4f16]:"_q4f16",[be.bnb4]:"_bnb4"})},"./src/utils/generic.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{Callable:()=>v});const v=class{constructor(){let W=function(...me){return W._call(...me)};return Object.setPrototypeOf(W,new.target.prototype)}_call(...W){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{getFile:()=>N,getModelFile:()=>le,getModelJSON:()=>L});var v=u("?7a2c"),W=u("?a42a"),me=u("./src/env.js"),be=u("./src/utils/core.js");const Me={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class D{constructor(ae){if(this.filePath=ae,this.headers=new Headers,this.exists=v.existsSync(ae),this.exists){this.status=200,this.statusText="OK";let j=v.statSync(ae);this.headers.set("content-length",j.size.toString()),this.updateContentType();let I=this;this.body=new ReadableStream({start(R){I.arrayBuffer().then(k=>{R.enqueue(new Uint8Array(k)),R.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const ae=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",Me[ae]??"application/octet-stream")}clone(){let ae=new D(this.filePath);return ae.exists=this.exists,ae.status=this.status,ae.statusText=this.statusText,ae.headers=new Headers(this.headers),ae}async arrayBuffer(){return(await v.promises.readFile(this.filePath)).buffer}async blob(){const ae=await v.promises.readFile(this.filePath);return new Blob([ae],{type:this.headers.get("content-type")})}async text(){return await v.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function E(de,ae=null,j=null){let I;try{I=new URL(de)}catch{return!1}return!(ae&&!ae.includes(I.protocol)||j&&!j.includes(I.hostname))}async function N(de){if(me.env.useFS&&!E(de,["http:","https:","blob:"]))return new D(de);if(typeof process<"u"&&process?.release?.name==="node"){const ae=!!_d?.TESTING_REMOTELY,j=me.env.version,I=new Headers;if(I.set("User-Agent",`transformers.js/${j}; is_ci/${ae};`),E(de,["http:","https:"],["huggingface.co","hf.co"])){const k=_d?.HF_TOKEN??_d?.HF_ACCESS_TOKEN;k&&I.set("Authorization",`Bearer ${k}`)}return fetch(de,{headers:I})}else return fetch(de)}const P={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function Y(de,ae,j){if(!j)return null;const I=P[de]??`Error (${de}) occurred while trying to load file`;throw Error(`${I}: "${ae}".`)}class Z{constructor(ae){this.path=ae}async match(ae){let j=W.join(this.path,ae),I=new D(j);if(I.exists)return I}async put(ae,j){const I=Buffer.from(await j.arrayBuffer());let R=W.join(this.path,ae);try{await v.promises.mkdir(W.dirname(R),{recursive:!0}),await v.promises.writeFile(R,I)}catch(k){console.warn("An error occurred while writing the file to cache:",k)}}}async function oe(de,...ae){for(let j of ae)try{let I=await de.match(j);if(I)return I}catch{continue}}async function le(de,ae,j=!0,I={}){if(!me.env.allowLocalModels){if(I.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!me.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,be.dispatchCallback)(I.progress_callback,{status:"initiate",name:de,file:ae});let R;if(!R&&me.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{R=await caches.open("transformers-cache")}catch(Ee){console.warn("An error occurred while opening the browser cache:",Ee)}}if(!R&&me.env.useFSCache&&(R=new Z(I.cache_dir??me.env.cacheDir)),!R&&me.env.useCustomCache){if(!me.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!me.env.customCache.match||!me.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");R=me.env.customCache}const k=I.revision??"main";let _e=J(de,ae),we=J(me.env.localModelPath,_e),Ce=J(me.env.remoteHost,me.env.remotePathTemplate.replaceAll("{model}",de).replaceAll("{revision}",encodeURIComponent(k)),ae),Se=k==="main"?_e:J(de,k,ae),Pe,Ye=R instanceof Z?Se:Ce,Xe=!1,ct;R&&(ct=await oe(R,we,Ye));const ge=ct!==void 0;if(ct===void 0){if(me.env.allowLocalModels)if(E(_e,["http:","https:"])){if(I.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${_e}.`);if(!me.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${_e}.`)}else try{ct=await N(we),Pe=we}catch(K){console.warn(`Unable to load from local path "${we}": "${K}"`)}if(ct===void 0||ct.status===404){if(I.local_files_only||!me.env.allowRemoteModels){if(j)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${we}".`);return null}if(ct=await N(Ce),ct.status!==200)return Y(ct.status,Ce,j);Pe=Ye}Xe=R&&typeof Response<"u"&&ct instanceof Response&&ct.status===200}(0,be.dispatchCallback)(I.progress_callback,{status:"download",name:de,file:ae});const V={status:"progress",name:de,file:ae};let ce;return I.progress_callback?ge&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(ce=new Uint8Array(await ct.arrayBuffer()),(0,be.dispatchCallback)(I.progress_callback,{...V,progress:100,loaded:ce.length,total:ce.length})):ce=await te(ct,Ee=>{(0,be.dispatchCallback)(I.progress_callback,{...V,...Ee})}):ce=new Uint8Array(await ct.arrayBuffer()),Xe&&Pe&&await R.match(Pe)===void 0&&await R.put(Pe,new Response(ce,{headers:ct.headers})).catch(Ee=>{console.warn(`Unable to add response to browser cache: ${Ee}.`)}),(0,be.dispatchCallback)(I.progress_callback,{status:"done",name:de,file:ae}),ce}async function L(de,ae,j=!0,I={}){let R=await le(de,ae,j,I);if(R===null)return{};let _e=new TextDecoder("utf-8").decode(R);return JSON.parse(_e)}async function te(de,ae){const j=de.headers.get("Content-Length");j===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let I=parseInt(j??"0"),R=new Uint8Array(I),k=0;const _e=de.body.getReader();async function we(){const{done:Ce,value:Se}=await _e.read();if(Ce)return;let Pe=k+Se.length;if(Pe>I){I=Pe;let Xe=new Uint8Array(I);Xe.set(R),R=Xe}R.set(Se,k),k=Pe;const Ye=k/I*100;return ae({progress:Ye,loaded:k,total:I}),we()}return await we(),R}function J(...de){return de=de.map((ae,j)=>(j&&(ae=ae.replace(new RegExp("^/"),"")),j!==de.length-1&&(ae=ae.replace(new RegExp("/$"),"")),ae)),de.join("/")}},"./src/utils/image.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{RawImage:()=>oe});var v=u("./src/utils/hub.js"),W=u("./src/env.js"),me=u("./src/utils/tensor.js"),be=u("?2b25");const Me=typeof self<"u",D=Me&&self.constructor.name==="DedicatedWorkerGlobalScope";let E,N,P;if(Me)E=(le,L)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(le,L)},P=self.createImageBitmap,N=self.ImageData;else if(be)P=async le=>{const te=(await le.metadata()).channels,{data:J,info:de}=await le.rotate().raw().toBuffer({resolveWithObject:!0}),ae=new oe(new Uint8ClampedArray(J),de.width,de.height,de.channels);return te!==void 0&&te!==de.channels&&ae.convert(te),ae};else throw new Error("Unable to load image processing library.");const Y={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},Z=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class oe{constructor(L,te,J,de){this.data=L,this.width=te,this.height=J,this.channels=de}get size(){return[this.width,this.height]}static async read(L){if(L instanceof oe)return L;if(typeof L=="string"||L instanceof URL)return await this.fromURL(L);throw new Error(`Unsupported input type: ${typeof L}`)}static fromCanvas(L){if(!Me)throw new Error("fromCanvas() is only supported in browser environments.");const J=L.getContext("2d").getImageData(0,0,L.width,L.height).data;return new oe(J,L.width,L.height,4)}static async fromURL(L){const te=await(0,v.getFile)(L);if(te.status!==200)throw new Error(`Unable to read image from "${L}" (${te.status} ${te.statusText})`);const J=await te.blob();return this.fromBlob(J)}static async fromBlob(L){if(Me){const te=await P(L),J=E(te.width,te.height).getContext("2d");return J.drawImage(te,0,0),new this(J.getImageData(0,0,te.width,te.height).data,te.width,te.height,4)}else{const te=be(await L.arrayBuffer());return await P(te)}}static fromTensor(L,te="CHW"){if(L.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${L.dims.length} dimensions.`);if(te==="CHW")L=L.transpose(1,2,0);else if(te!=="HWC")throw new Error(`Unsupported channel format: ${te}`);if(!(L.data instanceof Uint8ClampedArray||L.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${L.type}`);switch(L.dims[2]){case 1:case 2:case 3:case 4:return new oe(L.data,L.dims[1],L.dims[0],L.dims[2]);default:throw new Error(`Unsupported number of channels: ${L.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const L=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let te=0,J=0;te<this.data.length;te+=this.channels){const de=this.data[te],ae=this.data[te+1],j=this.data[te+2];L[J++]=Math.round(.2989*de+.587*ae+.114*j)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(L,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const L=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let te=0,J=0;te<this.data.length;++te)L[J++]=this.data[te],L[J++]=this.data[te],L[J++]=this.data[te];break;case 4:for(let te=0,J=0;te<this.data.length;te+=4)L[J++]=this.data[te],L[J++]=this.data[te+1],L[J++]=this.data[te+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(L,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const L=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let te=0,J=0;te<this.data.length;++te)L[J++]=this.data[te],L[J++]=this.data[te],L[J++]=this.data[te],L[J++]=255;break;case 3:for(let te=0,J=0;te<this.data.length;te+=3)L[J++]=this.data[te],L[J++]=this.data[te+1],L[J++]=this.data[te+2],L[J++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(L,this.width,this.height,4)}async resize(L,te,{resample:J=2}={}){let de=Y[J]??J;if(Me){const ae=this.channels,j=this.toCanvas(),I=E(L,te).getContext("2d");return I.drawImage(j,0,0,L,te),new oe(I.getImageData(0,0,L,te).data,L,te,4).convert(ae)}else{let ae=this.toSharp();switch(de){case"box":case"hamming":(de==="box"||de==="hamming")&&(console.warn(`Resampling method ${de} is not yet supported. Using bilinear instead.`),de="bilinear");case"nearest":case"bilinear":case"bicubic":ae=ae.affine([L/this.width,0,0,te/this.height],{interpolator:de});break;case"lanczos":ae=ae.resize({width:L,height:te,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${de} is not supported.`)}return await P(ae)}}async pad([L,te,J,de]){if(L=Math.max(L,0),te=Math.max(te,0),J=Math.max(J,0),de=Math.max(de,0),L===0&&te===0&&J===0&&de===0)return this;if(Me){const ae=this.channels,j=this.toCanvas(),I=this.width+L+te,R=this.height+J+de,k=E(I,R).getContext("2d");return k.drawImage(j,0,0,this.width,this.height,L,J,I,R),new oe(k.getImageData(0,0,I,R).data,I,R,4).convert(ae)}else{const ae=this.toSharp().extend({left:L,right:te,top:J,bottom:de});return await P(ae)}}async crop([L,te,J,de]){if(L=Math.max(L,0),te=Math.max(te,0),J=Math.min(J,this.width-1),de=Math.min(de,this.height-1),L===0&&te===0&&J===this.width-1&&de===this.height-1)return this;const ae=J-L+1,j=de-te+1;if(Me){const I=this.channels,R=this.toCanvas(),k=E(ae,j).getContext("2d");return k.drawImage(R,L,te,ae,j,0,0,ae,j),new oe(k.getImageData(0,0,ae,j).data,ae,j,4).convert(I)}else{const I=this.toSharp().extract({left:L,top:te,width:ae,height:j});return await P(I)}}async center_crop(L,te){if(this.width===L&&this.height===te)return this;const J=(this.width-L)/2,de=(this.height-te)/2;if(Me){const ae=this.channels,j=this.toCanvas(),I=E(L,te).getContext("2d");let R=0,k=0,_e=0,we=0;return J>=0?R=J:_e=-J,de>=0?k=de:we=-de,I.drawImage(j,R,k,L,te,_e,we,L,te),new oe(I.getImageData(0,0,L,te).data,L,te,4).convert(ae)}else{let ae=this.toSharp();if(J>=0&&de>=0)ae=ae.extract({left:Math.floor(J),top:Math.floor(de),width:L,height:te});else if(J<=0&&de<=0){const j=Math.floor(-de),I=Math.floor(-J);ae=ae.extend({top:j,left:I,right:L-this.width-I,bottom:te-this.height-j})}else{let j=[0,0],I=0;de<0?(j[0]=Math.floor(-de),j[1]=te-this.height-j[0]):I=Math.floor(de);let R=[0,0],k=0;J<0?(R[0]=Math.floor(-J),R[1]=L-this.width-R[0]):k=Math.floor(J),ae=ae.extend({top:j[0],bottom:j[1],left:R[0],right:R[1]}).extract({left:k,top:I,width:L,height:te})}return await P(ae)}}async toBlob(L="image/png",te=1){if(!Me)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:L,quality:te})}toTensor(L="CHW"){let te=new me.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(L!=="HWC")if(L==="CHW")te=te.permute(2,0,1);else throw new Error(`Unsupported channel format: ${L}`);return te}toCanvas(){if(!Me)throw new Error("toCanvas() is only supported in browser environments.");const L=this.clone().rgba(),te=E(L.width,L.height),J=new N(L.data,L.width,L.height);return te.getContext("2d").putImageData(J,0,0),te}_update(L,te,J,de=null){return this.data=L,this.width=te,this.height=J,de!==null&&(this.channels=de),this}clone(){return new oe(this.data.slice(),this.width,this.height,this.channels)}convert(L){if(this.channels===L)return this;switch(L){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(L){if(Me){if(D)throw new Error("Unable to save an image from a Web Worker.");const te=L.split(".").pop().toLowerCase(),J=Z.get(te)??"image/png",de=await this.toBlob(J),ae=URL.createObjectURL(de),j=document.createElement("a");j.href=ae,j.download=L,j.click(),j.remove()}else{if(W.env.useFS)return await this.toSharp().toFile(L);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(Me)throw new Error("toSharp() is only supported in server-side environments.");return be(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}},"./src/utils/maths.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{FFT:()=>le,bankers_round:()=>J,cos_sim:()=>D,dot:()=>Me,dynamic_time_warping:()=>de,interpolate_data:()=>v,log_softmax:()=>be,magnitude:()=>E,max:()=>P,medianFilter:()=>L,min:()=>N,permute_data:()=>W,round:()=>te,softmax:()=>me});function v(ae,[j,I,R],[k,_e],we="bilinear",Ce=!1){const Se=_e/R,Pe=k/I,Ye=new ae.constructor(k*_e*j),Xe=I*R,ct=k*_e;for(let ge=0;ge<k;++ge)for(let V=0;V<_e;++V){const ce=ge*_e+V,Ee=(V+.5)/Se-.5,K=(ge+.5)/Pe-.5;let We=Math.floor(Ee),dt=Math.floor(K);const tt=Math.min(We+1,R-1),at=Math.min(dt+1,I-1);We=Math.max(We,0),dt=Math.max(dt,0);const Oe=Ee-We,st=K-dt,Tt=(1-Oe)*(1-st),Ie=Oe*(1-st),G=(1-Oe)*st,$e=Oe*st,He=dt*R,Re=at*R,Ne=He+We,qe=He+tt,ut=Re+We,ht=Re+tt;for(let vt=0;vt<j;++vt){const xt=vt*Xe;Ye[vt*ct+ce]=Tt*ae[xt+Ne]+Ie*ae[xt+qe]+G*ae[xt+ut]+$e*ae[xt+ht]}}return Ye}function W(ae,j,I){const R=new Array(I.length),k=new Array(I.length);for(let Ce=I.length-1,Se=1;Ce>=0;--Ce)k[Ce]=Se,R[Ce]=j[I[Ce]],Se*=R[Ce];const _e=I.map((Ce,Se)=>k[I.indexOf(Se)]),we=new ae.constructor(ae.length);for(let Ce=0;Ce<ae.length;++Ce){let Se=0;for(let Pe=j.length-1,Ye=Ce;Pe>=0;--Pe)Se+=Ye%j[Pe]*_e[Pe],Ye=Math.floor(Ye/j[Pe]);we[Se]=ae[Ce]}return[we,R]}function me(ae){const j=P(ae)[0],I=ae.map(_e=>Math.exp(_e-j)),R=I.reduce((_e,we)=>_e+we,0);return I.map(_e=>_e/R)}function be(ae){return me(ae).map(R=>Math.log(R))}function Me(ae,j){let I=0;for(let R=0;R<ae.length;++R)I+=ae[R]*j[R];return I}function D(ae,j){const I=Me(ae,j),R=E(ae),k=E(j);return I/(R*k)}function E(ae){return Math.sqrt(ae.reduce((j,I)=>j+I*I,0))}function N(ae){if(ae.length===0)throw Error("Array must not be empty");let j=ae[0],I=0;for(let R=1;R<ae.length;++R)ae[R]<j&&(j=ae[R],I=R);return[j,I]}function P(ae){if(ae.length===0)throw Error("Array must not be empty");let j=ae[0],I=0;for(let R=1;R<ae.length;++R)ae[R]>j&&(j=ae[R],I=R);return[Number(j),I]}function Y(ae){return ae>0&&(ae&ae-1)===0}class Z{constructor(j){if(this.size=j|0,this.size<=1||!Y(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=j<<1,this.table=new Float64Array(this.size*2);for(let R=0;R<this.table.length;R+=2){const k=Math.PI*R/this.size;this.table[R]=Math.cos(k),this.table[R+1]=-Math.sin(k)}let I=0;for(let R=1;this.size>R;R<<=1)++I;this._width=I%2===0?I-1:I,this._bitrev=new Int32Array(1<<this._width);for(let R=0;R<this._bitrev.length;++R){this._bitrev[R]=0;for(let k=0;k<this._width;k+=2){const _e=this._width-k-2;this._bitrev[R]|=(R>>>k&3)<<_e}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(j,I){const R=I||new Array(j.length>>>1);for(let k=0;k<j.length;k+=2)R[k>>>1]=j[k];return R}toComplexArray(j,I){const R=I||this.createComplexArray();for(let k=0;k<R.length;k+=2)R[k]=j[k>>>1],R[k+1]=0;return R}transform(j,I){if(j===I)throw new Error("Input and output buffers must be different");this._transform4(j,I,1)}realTransform(j,I){if(j===I)throw new Error("Input and output buffers must be different");this._realTransform4(j,I,1)}inverseTransform(j,I){if(j===I)throw new Error("Input and output buffers must be different");this._transform4(j,I,-1);for(let R=0;R<j.length;++R)j[R]/=this.size}_transform4(j,I,R){const k=this._csize;let we=1<<this._width,Ce=k/we<<1,Se,Pe;const Ye=this._bitrev;if(Ce===4)for(Se=0,Pe=0;Se<k;Se+=Ce,++Pe){const ct=Ye[Pe];this._singleTransform2(I,j,Se,ct,we)}else for(Se=0,Pe=0;Se<k;Se+=Ce,++Pe){const ct=Ye[Pe];this._singleTransform4(I,j,Se,ct,we,R)}const Xe=this.table;for(we>>=2;we>=2;we>>=2){Ce=k/we<<1;const ct=Ce>>>2;for(Se=0;Se<k;Se+=Ce){const ge=Se+ct-1;for(let V=Se,ce=0;V<ge;V+=2,ce+=we){const Ee=V,K=Ee+ct,We=K+ct,dt=We+ct,tt=j[Ee],at=j[Ee+1],Oe=j[K],st=j[K+1],Tt=j[We],Ie=j[We+1],G=j[dt],$e=j[dt+1],He=Xe[ce],Re=R*Xe[ce+1],Ne=Oe*He-st*Re,qe=Oe*Re+st*He,ut=Xe[2*ce],ht=R*Xe[2*ce+1],vt=Tt*ut-Ie*ht,xt=Tt*ht+Ie*ut,M=Xe[3*ce],U=R*Xe[3*ce+1],A=G*M-$e*U,ee=G*U+$e*M,he=tt+vt,Ze=at+xt,Ke=tt-vt,_t=at-xt,rt=Ne+A,Te=qe+ee,$=R*(Ne-A),ie=R*(qe-ee);j[Ee]=he+rt,j[Ee+1]=Ze+Te,j[K]=Ke+ie,j[K+1]=_t-$,j[We]=he-rt,j[We+1]=Ze-Te,j[dt]=Ke-ie,j[dt+1]=_t+$}}}}_singleTransform2(j,I,R,k,_e){const we=j[k],Ce=j[k+1],Se=j[k+_e],Pe=j[k+_e+1];I[R]=we+Se,I[R+1]=Ce+Pe,I[R+2]=we-Se,I[R+3]=Ce-Pe}_singleTransform4(j,I,R,k,_e,we){const Ce=_e*2,Se=_e*3,Pe=j[k],Ye=j[k+1],Xe=j[k+_e],ct=j[k+_e+1],ge=j[k+Ce],V=j[k+Ce+1],ce=j[k+Se],Ee=j[k+Se+1],K=Pe+ge,We=Ye+V,dt=Pe-ge,tt=Ye-V,at=Xe+ce,Oe=ct+Ee,st=we*(Xe-ce),Tt=we*(ct-Ee);I[R]=K+at,I[R+1]=We+Oe,I[R+2]=dt+Tt,I[R+3]=tt-st,I[R+4]=K-at,I[R+5]=We-Oe,I[R+6]=dt-Tt,I[R+7]=tt+st}_realTransform4(j,I,R){const k=this._csize;let we=1<<this._width,Ce=k/we<<1,Se,Pe;const Ye=this._bitrev;if(Ce===4)for(Se=0,Pe=0;Se<k;Se+=Ce,++Pe){const ge=Ye[Pe];this._singleRealTransform2(I,j,Se,ge>>>1,we>>>1)}else for(Se=0,Pe=0;Se<k;Se+=Ce,++Pe){const ge=Ye[Pe];this._singleRealTransform4(I,j,Se,ge>>>1,we>>>1,R)}const Xe=this.table;for(we>>=2;we>=2;we>>=2){Ce=k/we<<1;const ge=Ce>>>1,V=ge>>>1,ce=V>>>1;for(Se=0;Se<k;Se+=Ce)for(let Ee=0,K=0;Ee<=ce;Ee+=2,K+=we){const We=Se+Ee,dt=We+V,tt=dt+V,at=tt+V,Oe=j[We],st=j[We+1],Tt=j[dt],Ie=j[dt+1],G=j[tt],$e=j[tt+1],He=j[at],Re=j[at+1],Ne=Oe,qe=st,ut=Xe[K],ht=R*Xe[K+1],vt=Tt*ut-Ie*ht,xt=Tt*ht+Ie*ut,M=Xe[2*K],U=R*Xe[2*K+1],A=G*M-$e*U,ee=G*U+$e*M,he=Xe[3*K],Ze=R*Xe[3*K+1],Ke=He*he-Re*Ze,_t=He*Ze+Re*he,rt=Ne+A,Te=qe+ee,$=Ne-A,ie=qe-ee,ve=vt+Ke,Fe=xt+_t,ke=R*(vt-Ke),ze=R*(xt-_t);if(j[We]=rt+ve,j[We+1]=Te+Fe,j[dt]=$+ze,j[dt+1]=ie-ke,Ee===0){j[tt]=rt-ve,j[tt+1]=Te-Fe;continue}if(Ee===ce)continue;const lt=Se+V-Ee,nt=Se+ge-Ee;j[lt]=$-R*ze,j[lt+1]=-ie-R*ke,j[nt]=rt-R*ve,j[nt+1]=-Te+R*Fe}}const ct=k>>>1;for(let ge=2;ge<ct;ge+=2)j[k-ge]=j[ge],j[k-ge+1]=-j[ge+1]}_singleRealTransform2(j,I,R,k,_e){const we=j[k],Ce=j[k+_e];I[R]=we+Ce,I[R+1]=0,I[R+2]=we-Ce,I[R+3]=0}_singleRealTransform4(j,I,R,k,_e,we){const Ce=_e*2,Se=_e*3,Pe=j[k],Ye=j[k+_e],Xe=j[k+Ce],ct=j[k+Se],ge=Pe+Xe,V=Pe-Xe,ce=Ye+ct,Ee=we*(Ye-ct);I[R]=ge+ce,I[R+1]=0,I[R+2]=V,I[R+3]=-Ee,I[R+4]=ge-ce,I[R+5]=0,I[R+6]=V,I[R+7]=Ee}}class oe{constructor(j){const I=2*(j-1),R=2*(2*j-1),k=2**Math.ceil(Math.log2(R));this.bufferSize=k,this._a=I;const _e=new Float64Array(R),we=new Float64Array(k);this._chirpBuffer=new Float64Array(k),this._buffer1=new Float64Array(k),this._buffer2=new Float64Array(k),this._outBuffer1=new Float64Array(k),this._outBuffer2=new Float64Array(k);const Ce=-2*Math.PI/j,Se=Math.cos(Ce),Pe=Math.sin(Ce);for(let Ye=0;Ye<R>>1;++Ye){const Xe=(Ye+1-j)**2/2,ct=Math.sqrt(Se**2+Pe**2)**Xe,ge=Xe*Math.atan2(Pe,Se),V=2*Ye;_e[V]=ct*Math.cos(ge),_e[V+1]=ct*Math.sin(ge),we[V]=_e[V],we[V+1]=-_e[V+1]}this._slicedChirpBuffer=_e.subarray(I,R),this._f=new Z(k>>1),this._f.transform(this._chirpBuffer,we)}_transform(j,I,R){const k=this._buffer1,_e=this._buffer2,we=this._outBuffer1,Ce=this._outBuffer2,Se=this._chirpBuffer,Pe=this._slicedChirpBuffer,Ye=this._a;if(R)for(let Xe=0;Xe<Pe.length;Xe+=2){const ct=Xe+1,ge=Xe>>1,V=I[ge];k[Xe]=V*Pe[Xe],k[ct]=V*Pe[ct]}else for(let Xe=0;Xe<Pe.length;Xe+=2){const ct=Xe+1;k[Xe]=I[Xe]*Pe[Xe]-I[ct]*Pe[ct],k[ct]=I[Xe]*Pe[ct]+I[ct]*Pe[Xe]}this._f.transform(we,k);for(let Xe=0;Xe<Se.length;Xe+=2){const ct=Xe+1;_e[Xe]=we[Xe]*Se[Xe]-we[ct]*Se[ct],_e[ct]=we[Xe]*Se[ct]+we[ct]*Se[Xe]}this._f.inverseTransform(Ce,_e);for(let Xe=0;Xe<Ce.length;Xe+=2){const ct=Ce[Xe+Ye],ge=Ce[Xe+Ye+1],V=Pe[Xe],ce=Pe[Xe+1];j[Xe]=ct*V-ge*ce,j[Xe+1]=ct*ce+ge*V}}transform(j,I){this._transform(j,I,!1)}realTransform(j,I){this._transform(j,I,!0)}}class le{constructor(j){this.fft_length=j,this.isPowerOfTwo=Y(j),this.isPowerOfTwo?(this.fft=new Z(j),this.outputBufferSize=2*j):(this.fft=new oe(j),this.outputBufferSize=this.fft.bufferSize)}realTransform(j,I){this.fft.realTransform(j,I)}transform(j,I){this.fft.transform(j,I)}}function L(ae,j){if(j%2===0||j<=0)throw new Error("Window size must be a positive odd number");const I=new ae.constructor(ae.length),R=new ae.constructor(j),k=Math.floor(j/2);for(let _e=0;_e<ae.length;++_e){let we=0;for(let Ce=-k;Ce<=k;++Ce){let Se=_e+Ce;Se<0?Se=Math.abs(Se):Se>=ae.length&&(Se=2*(ae.length-1)-Se),R[we++]=ae[Se]}R.sort(),I[_e]=R[k]}return I}function te(ae,j){const I=Math.pow(10,j);return Math.round(ae*I)/I}function J(ae){const j=Math.round(ae);return Math.abs(ae)%1===.5?j%2===0?j:j-1:j}function de(ae){const j=ae.length,I=ae[0].length,R=[j+1,I+1],k=Array.from({length:R[0]},()=>Array(R[1]).fill(1/0));k[0][0]=0;const _e=Array.from({length:R[0]},()=>Array(R[1]).fill(-1));for(let Ye=1;Ye<R[1];++Ye)for(let Xe=1;Xe<R[0];++Xe){const ct=k[Xe-1][Ye-1],ge=k[Xe-1][Ye],V=k[Xe][Ye-1];let ce,Ee;ct<ge&&ct<V?(ce=ct,Ee=0):ge<ct&&ge<V?(ce=ge,Ee=1):(ce=V,Ee=2),k[Xe][Ye]=ae[Xe-1][Ye-1]+ce,_e[Xe][Ye]=Ee}for(let Ye=0;Ye<R[1];++Ye)_e[0][Ye]=2;for(let Ye=0;Ye<R[0];++Ye)_e[Ye][0]=1;let we=j,Ce=I,Se=[],Pe=[];for(;we>0||Ce>0;)switch(Se.push(we-1),Pe.push(Ce-1),_e[we][Ce]){case 0:--we,--Ce;break;case 1:--we;break;case 2:--Ce;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${we}, ${Ce}]. Please file a bug report.`)}return Se.reverse(),Pe.reverse(),[Se,Pe]}},"./src/utils/tensor.js":(yt,pe,u)=>{u.r(pe),u.d(pe,{Tensor:()=>Me,cat:()=>ae,full:()=>we,full_like:()=>Ce,interpolate:()=>N,interpolate_4d:()=>P,layer_norm:()=>L,matmul:()=>Y,mean:()=>R,mean_pooling:()=>le,ones:()=>Se,ones_like:()=>Pe,permute:()=>E,quantize_embeddings:()=>ct,rfft:()=>Z,stack:()=>j,std_mean:()=>I,topk:()=>oe,zeros:()=>Ye,zeros_like:()=>Xe});var v=u("./src/utils/maths.js"),W=u("./src/backends/onnx.js"),me=u("./src/ops/registry.js");const be=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array});class Me{get dims(){return this.ort_tensor.dims}set dims(V){this.ort_tensor.dims=V}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...V){return(0,W.isONNXTensor)(V[0])?this.ort_tensor=V[0]:this.ort_tensor=new W.Tensor(V[0],V[1],V[2]),new Proxy(this,{get:(ce,Ee)=>{if(typeof Ee=="string"){let K=Number(Ee);if(Number.isInteger(K))return ce._getitem(K)}return ce[Ee]},set:(ce,Ee,K)=>ce[Ee]=K})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[V,...ce]=this.dims;if(ce.length>0){const Ee=ce.reduce((K,We)=>K*We);for(let K=0;K<V;++K)yield this._subarray(K,Ee,ce)}else yield*this.data}_getitem(V){const[ce,...Ee]=this.dims;if(V=de(V,ce),Ee.length>0){const K=Ee.reduce((We,dt)=>We*dt);return this._subarray(V,K,Ee)}else return new Me(this.type,[this.data[V]],Ee)}indexOf(V){const ce=this.data;for(let Ee=0;Ee<ce.length;++Ee)if(ce[Ee]==V)return Ee;return-1}_subarray(V,ce,Ee){const K=V*ce,We=(V+1)*ce,dt="subarray"in this.data?this.data.subarray(K,We):this.data.slice(K,We);return new Me(this.type,dt,Ee)}item(){const V=this.data;if(V.length!==1)throw new Error(`a Tensor with ${V.length} elements cannot be converted to Scalar`);return V[0]}tolist(){return D(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const V=this.data;for(let ce=0;ce<V.length;++ce)V[ce]=1/(1+Math.exp(-V[ce]));return this}mul(V){return this.clone().mul_(V)}mul_(V){const ce=this.data;for(let Ee=0;Ee<ce.length;++Ee)ce[Ee]*=V;return this}div(V){return this.clone().div_(V)}div_(V){const ce=this.data;for(let Ee=0;Ee<ce.length;++Ee)ce[Ee]/=V;return this}add(V){return this.clone().add_(V)}add_(V){const ce=this.data;for(let Ee=0;Ee<ce.length;++Ee)ce[Ee]+=V;return this}clone(){return new Me(this.type,this.data.slice(),this.dims.slice())}slice(...V){const ce=[],Ee=[];for(let Oe=0;Oe<this.dims.length;++Oe){let st=V[Oe];if(st==null)Ee.push([0,this.dims[Oe]]),ce.push(this.dims[Oe]);else if(typeof st=="number")st=de(st,this.dims[Oe],Oe),Ee.push([st,st+1]);else if(Array.isArray(st)&&st.length===2){let[Tt,Ie]=st;if(Tt=Tt===null?0:de(Tt,this.dims[Oe],Oe,!1),Ie=Ie===null?this.dims[Oe]:de(Ie,this.dims[Oe],Oe,!1),Tt>Ie)throw new Error(`Invalid slice: ${st}`);const G=[Math.max(Tt,0),Math.min(Ie,this.dims[Oe])];Ee.push(G),ce.push(G[1]-G[0])}else throw new Error(`Invalid slice: ${st}`)}const K=Ee.map(([Oe,st])=>st-Oe),We=K.reduce((Oe,st)=>Oe*st),dt=this.data,tt=new dt.constructor(We),at=this.stride();for(let Oe=0;Oe<We;++Oe){let st=0;for(let Tt=K.length-1,Ie=Oe;Tt>=0;--Tt){const G=K[Tt];st+=(Ie%G+Ee[Tt][0])*at[Tt],Ie=Math.floor(Ie/G)}tt[Oe]=dt[st]}return new Me(this.type,tt,ce)}permute(...V){return E(this,V)}transpose(...V){return this.permute(...V)}sum(V=null,ce=!1){return this.norm(1,V,ce)}norm(V="fro",ce=null,Ee=!1){if(V==="fro")V=2;else if(typeof V=="string")throw Error(`Unsupported norm: ${V}`);const K=this.data;if(ce===null){let tt=K.reduce((at,Oe)=>at+Oe**V,0)**(1/V);return new Me(this.type,[tt],[])}ce=de(ce,this.dims.length);const We=this.dims.slice();We[ce]=1;const dt=new K.constructor(K.length/this.dims[ce]);for(let tt=0;tt<K.length;++tt){let at=0;for(let Oe=this.dims.length-1,st=tt,Tt=1;Oe>=0;--Oe){const Ie=this.dims[Oe];if(Oe!==ce){const G=st%Ie;at+=G*Tt,Tt*=We[Oe]}st=Math.floor(st/Ie)}dt[at]+=K[tt]**V}if(V!==1)for(let tt=0;tt<dt.length;++tt)dt[tt]=dt[tt]**(1/V);return Ee||We.splice(ce,1),new Me(this.type,dt,We)}normalize_(V=2,ce=1){ce=de(ce,this.dims.length);const Ee=this.norm(V,ce,!0),K=this.data,We=Ee.data;for(let dt=0;dt<K.length;++dt){let tt=0;for(let at=this.dims.length-1,Oe=dt,st=1;at>=0;--at){const Tt=this.dims[at];if(at!==ce){const Ie=Oe%Tt;tt+=Ie*st,st*=this.dims[at]}Oe=Math.floor(Oe/Tt)}K[dt]/=We[tt]}return this}normalize(V=2,ce=1){return this.clone().normalize_(V,ce)}stride(){return k(this.dims)}squeeze(V=null){return new Me(this.type,this.data,te(this.dims,V))}squeeze_(V=null){return this.dims=te(this.dims,V),this}unsqueeze(V=null){return new Me(this.type,this.data,J(this.dims,V))}unsqueeze_(V=null){return this.dims=J(this.dims,V),this}flatten_(V=0,ce=-1){ce=(ce+this.dims.length)%this.dims.length;let Ee=this.dims.slice(0,V),K=this.dims.slice(V,ce+1),We=this.dims.slice(ce+1);return this.dims=[...Ee,K.reduce((dt,tt)=>dt*tt,1),...We],this}flatten(V=0,ce=-1){return this.clone().flatten_(V,ce)}view(...V){let ce=-1;for(let K=0;K<V.length;++K)if(V[K]===-1){if(ce!==-1)throw new Error("Only one dimension can be inferred");ce=K}const Ee=this.data;if(ce!==-1){const K=V.reduce((We,dt,tt)=>tt!==ce?We*dt:We,1);V[ce]=Ee.length/K}return new Me(this.type,Ee,V)}neg_(){const V=this.data;for(let ce=0;ce<V.length;++ce)V[ce]=-V[ce];return this}neg(){return this.clone().neg_()}clamp_(V,ce){const Ee=this.data;for(let K=0;K<Ee.length;++K)Ee[K]=Math.min(Math.max(Ee[K],V),ce);return this}clamp(V,ce){return this.clone().clamp_(V,ce)}round_(){const V=this.data;for(let ce=0;ce<V.length;++ce)V[ce]=Math.round(V[ce]);return this}round(){return this.clone().round_()}mean(V=null,ce=!1){return R(this,V,ce)}to(V){if(this.type===V)return this;if(!be.hasOwnProperty(V))throw new Error(`Unsupported type: ${V}`);return new Me(V,be[V].from(this.data),this.dims)}}function D(ge,V){const ce=ge.length,Ee=V.reduce((We,dt)=>We*dt);if(ce!==Ee)throw Error(`cannot reshape array of size ${ce} into shape (${V})`);let K=ge;for(let We=V.length-1;We>=0;We--)K=K.reduce((dt,tt)=>{let at=dt[dt.length-1];return at.length<V[We]?at.push(tt):dt.push([tt]),dt},[[]]);return K[0]}function E(ge,V){const[ce,Ee]=(0,v.permute_data)(ge.data,ge.dims,V);return new Me(ge.type,ce,Ee)}function N(ge,[V,ce],Ee="bilinear",K=!1){const We=ge.dims.at(-3)??1,dt=ge.dims.at(-2),tt=ge.dims.at(-1);let at=(0,v.interpolate_data)(ge.data,[We,dt,tt],[V,ce],Ee,K);return new Me(ge.type,at,[We,V,ce])}async function P(ge,{size:V=null,mode:ce="bilinear"}={}){if(ge.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!V)throw new Error("`interpolate_4d` requires a `size` argument.");let Ee;if(V.length===2)Ee=[...ge.dims.slice(0,2),...V];else if(V.length===3)Ee=[ge.dims[0],...V];else if(V.length===4)Ee=V;else throw new Error("`size` must be of length 2, 3, or 4.");let K;if(ce==="bilinear")K=await me.TensorOpRegistry.bilinear_interpolate_4d;else if(ce==="bicubic")K=await me.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${ce}`);const We=new Me("int64",new BigInt64Array(Ee.map(BigInt)),[Ee.length]);return await K({x:ge,s:We})}async function Y(ge,V){return await(await me.TensorOpRegistry.matmul)({a:ge,b:V})}async function Z(ge,V){return await(await me.TensorOpRegistry.rfft)({x:ge,a:V})}async function oe(ge,V){const ce=await me.TensorOpRegistry.top_k;return V===null?V=ge.dims.at(-1):V=Math.min(V,ge.dims.at(-1)),await ce({x:ge,k:new Me("int64",[BigInt(V)],[1])})}function le(ge,V){const ce=ge.data,Ee=V.data,K=[ge.dims[0],ge.dims[2]],We=new ce.constructor(K[0]*K[1]),[dt,tt,at]=ge.dims;let Oe=0;for(let st=0;st<dt;++st){const Tt=st*at*tt;for(let Ie=0;Ie<at;++Ie){let G=0,$e=0;const He=st*tt,Re=Tt+Ie;for(let qe=0;qe<tt;++qe){const ut=Number(Ee[He+qe]);$e+=ut,G+=ce[Re+qe*at]*ut}const Ne=G/$e;We[Oe++]=Ne}}return new Me(ge.type,We,K)}function L(ge,V,{eps:ce=1e-5}={}){if(ge.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[Ee,K]=ge.dims;if(V.length!==1&&V[0]!==K)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[We,dt]=I(ge,1,0,!0),tt=We.data,at=dt.data,Oe=ge.data,st=new Oe.constructor(Oe.length);for(let Tt=0;Tt<Ee;++Tt){const Ie=Tt*K;for(let G=0;G<K;++G){const $e=Ie+G;st[$e]=(Oe[$e]-at[Tt])/(tt[Tt]+ce)}}return new Me(ge.type,st,ge.dims)}function te(ge,V){return ge=ge.slice(),V===null?ge=ge.filter(ce=>ce!==1):typeof V=="number"?ge[V]===1&&ge.splice(V,1):Array.isArray(V)&&(ge=ge.filter((ce,Ee)=>ce!==1||!V.includes(Ee))),ge}function J(ge,V){return V=de(V,ge.length+1),ge=ge.slice(),ge.splice(V,0,1),ge}function de(ge,V,ce=null,Ee=!0){if(Ee&&(ge<-V||ge>=V))throw new Error(`IndexError: index ${ge} is out of bounds for dimension${ce===null?"":" "+ce} with size ${V}`);return ge<0&&(ge=(ge%V+V)%V),ge}function ae(ge,V=0){V=de(V,ge[0].dims.length);const ce=ge[0].dims.slice();ce[V]=ge.reduce((dt,tt)=>dt+tt.dims[V],0);const Ee=ce.reduce((dt,tt)=>dt*tt,1),K=new ge[0].data.constructor(Ee),We=ge[0].type;if(V===0){let dt=0;for(const tt of ge){const at=tt.data;K.set(at,dt),dt+=at.length}}else{let dt=0;for(let tt=0;tt<ge.length;++tt){const{data:at,dims:Oe}=ge[tt];for(let st=0;st<at.length;++st){let Tt=0;for(let Ie=Oe.length-1,G=st,$e=1;Ie>=0;--Ie){const He=Oe[Ie];let Re=G%He;Ie===V&&(Re+=dt),Tt+=Re*$e,$e*=ce[Ie],G=Math.floor(G/He)}K[Tt]=at[st]}dt+=Oe[V]}}return new Me(We,K,ce)}function j(ge,V=0){return ae(ge.map(ce=>ce.unsqueeze(V)),V)}function I(ge,V=null,ce=1,Ee=!1){const K=ge.data,We=ge.dims;if(V===null){const Ie=K.reduce((Re,Ne)=>Re+Ne,0)/K.length,G=Math.sqrt(K.reduce((Re,Ne)=>Re+(Ne-Ie)**2,0)/(K.length-ce)),$e=new Me(ge.type,[Ie],[]);return[new Me(ge.type,[G],[]),$e]}V=de(V,We.length);const dt=R(ge,V,Ee),tt=dt.data,at=We.slice();at[V]=1;const Oe=new K.constructor(K.length/We[V]);for(let Tt=0;Tt<K.length;++Tt){let Ie=0;for(let G=We.length-1,$e=Tt,He=1;G>=0;--G){const Re=We[G];if(G!==V){const Ne=$e%Re;Ie+=Ne*He,He*=at[G]}$e=Math.floor($e/Re)}Oe[Ie]+=(K[Tt]-tt[Ie])**2}for(let Tt=0;Tt<Oe.length;++Tt)Oe[Tt]=Math.sqrt(Oe[Tt]/(We[V]-ce));return Ee||at.splice(V,1),[new Me(ge.type,Oe,at),dt]}function R(ge,V=null,ce=!1){const Ee=ge.data;if(V===null){const tt=Ee.reduce((at,Oe)=>at+Oe,0);return new Me(ge.type,[tt/Ee.length],[])}const K=ge.dims;V=de(V,K.length);const We=K.slice();We[V]=1;const dt=new Ee.constructor(Ee.length/K[V]);for(let tt=0;tt<Ee.length;++tt){let at=0;for(let Oe=K.length-1,st=tt,Tt=1;Oe>=0;--Oe){const Ie=K[Oe];if(Oe!==V){const G=st%Ie;at+=G*Tt,Tt*=We[Oe]}st=Math.floor(st/Ie)}dt[at]+=Ee[tt]}if(K[V]!==1)for(let tt=0;tt<dt.length;++tt)dt[tt]=dt[tt]/K[V];return ce||We.splice(V,1),new Me(ge.type,dt,We)}function k(ge){const V=new Array(ge.length);for(let ce=ge.length-1,Ee=1;ce>=0;--ce)V[ce]=Ee,Ee*=ge[ce];return V}function _e(ge,V,ce,Ee){const K=ge.reduce((We,dt)=>We*dt,1);return new Me(ce,new Ee(K).fill(V),ge)}function we(ge,V){let ce,Ee;if(typeof V=="number")ce="float32",Ee=Float32Array;else if(typeof V=="bigint")ce="int64",Ee=BigInt64Array;else throw new Error(`Unsupported data type: ${typeof V}`);return _e(ge,V,ce,Ee)}function Ce(ge,V){return we(ge.dims,V)}function Se(ge){return _e(ge,1n,"int64",BigInt64Array)}function Pe(ge){return Se(ge.dims)}function Ye(ge){return _e(ge,0n,"int64",BigInt64Array)}function Xe(ge){return Ye(ge.dims)}function ct(ge,V){if(ge.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(ge.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(V))throw new Error("The precision must be either 'binary' or 'ubinary'");const ce=V==="binary",Ee=ce?"int8":"uint8",K=ce?Int8Array:Uint8Array,We=ge.data,dt=new K(We.length/8);for(let tt=0;tt<We.length;++tt){const at=We[tt]>0?1:0,Oe=Math.floor(tt/8),st=tt%8;dt[Oe]|=at<<7-st,ce&&st===0&&(dt[Oe]-=128)}return new Me(Ee,dt,[ge.dims[0],ge.dims[1]/8])}}},oc={};function Rr(yt){var pe=oc[yt];if(pe!==void 0)return pe.exports;var u=oc[yt]={exports:{}};return Qh[yt](u,u.exports,Rr),u.exports}(()=>{var yt=Object.getPrototypeOf?u=>Object.getPrototypeOf(u):u=>u.__proto__,pe;Rr.t=function(u,v){if(v&1&&(u=this(u)),v&8||typeof u=="object"&&u&&(v&4&&u.__esModule||v&16&&typeof u.then=="function"))return u;var W=Object.create(null);Rr.r(W);var me={};pe=pe||[null,yt({}),yt([]),yt(yt)];for(var be=v&2&&u;typeof be=="object"&&!~pe.indexOf(be);be=yt(be))Object.getOwnPropertyNames(be).forEach(Me=>me[Me]=()=>u[Me]);return me.default=()=>u,Rr.d(W,me),W}})(),Rr.d=(yt,pe)=>{for(var u in pe)Rr.o(pe,u)&&!Rr.o(yt,u)&&Object.defineProperty(yt,u,{enumerable:!0,get:pe[u]})},Rr.o=(yt,pe)=>Object.prototype.hasOwnProperty.call(yt,pe),Rr.r=yt=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(yt,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(yt,"__esModule",{value:!0})},(()=>{var yt;if(typeof self.location.href=="string"&&(yt=self.location.href),!yt)throw new Error("Automatic publicPath is not supported in this browser");yt=yt.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),Rr.p=yt})(),Rr.b=void 0;var p={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/Rr.r(p),Rr.d(p,{ASTFeatureExtractor:()=>W.ASTFeatureExtractor,ASTForAudioClassification:()=>u.ASTForAudioClassification,ASTModel:()=>u.ASTModel,ASTPreTrainedModel:()=>u.ASTPreTrainedModel,AlbertForMaskedLM:()=>u.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>u.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>u.AlbertForSequenceClassification,AlbertModel:()=>u.AlbertModel,AlbertPreTrainedModel:()=>u.AlbertPreTrainedModel,AlbertTokenizer:()=>v.AlbertTokenizer,AudioClassificationPipeline:()=>pe.AudioClassificationPipeline,AutoConfig:()=>me.AutoConfig,AutoModel:()=>u.AutoModel,AutoModelForAudioClassification:()=>u.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>u.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>u.AutoModelForCTC,AutoModelForCausalLM:()=>u.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>u.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>u.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>u.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>u.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>u.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>u.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>u.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>u.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>u.AutoModelForMaskedLM,AutoModelForObjectDetection:()=>u.AutoModelForObjectDetection,AutoModelForQuestionAnswering:()=>u.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>u.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>u.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>u.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>u.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>u.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>u.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>u.AutoModelForTokenClassification,AutoModelForVision2Seq:()=>u.AutoModelForVision2Seq,AutoModelForXVector:()=>u.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>u.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>W.AutoProcessor,AutoTokenizer:()=>v.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>pe.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>u.BartForConditionalGeneration,BartForSequenceClassification:()=>u.BartForSequenceClassification,BartModel:()=>u.BartModel,BartPretrainedModel:()=>u.BartPretrainedModel,BartTokenizer:()=>v.BartTokenizer,BaseModelOutput:()=>u.BaseModelOutput,BaseStreamer:()=>N.BaseStreamer,BeitFeatureExtractor:()=>W.BeitFeatureExtractor,BeitForImageClassification:()=>u.BeitForImageClassification,BeitModel:()=>u.BeitModel,BeitPreTrainedModel:()=>u.BeitPreTrainedModel,BertForMaskedLM:()=>u.BertForMaskedLM,BertForQuestionAnswering:()=>u.BertForQuestionAnswering,BertForSequenceClassification:()=>u.BertForSequenceClassification,BertForTokenClassification:()=>u.BertForTokenClassification,BertModel:()=>u.BertModel,BertPreTrainedModel:()=>u.BertPreTrainedModel,BertTokenizer:()=>v.BertTokenizer,BitImageProcessor:()=>W.BitImageProcessor,BlenderbotForConditionalGeneration:()=>u.BlenderbotForConditionalGeneration,BlenderbotModel:()=>u.BlenderbotModel,BlenderbotPreTrainedModel:()=>u.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>u.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>u.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>u.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>v.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>v.BlenderbotTokenizer,BloomForCausalLM:()=>u.BloomForCausalLM,BloomModel:()=>u.BloomModel,BloomPreTrainedModel:()=>u.BloomPreTrainedModel,BloomTokenizer:()=>v.BloomTokenizer,CLIPFeatureExtractor:()=>W.CLIPFeatureExtractor,CLIPImageProcessor:()=>W.CLIPImageProcessor,CLIPModel:()=>u.CLIPModel,CLIPPreTrainedModel:()=>u.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>u.CLIPSegForImageSegmentation,CLIPSegModel:()=>u.CLIPSegModel,CLIPSegPreTrainedModel:()=>u.CLIPSegPreTrainedModel,CLIPTextModelWithProjection:()=>u.CLIPTextModelWithProjection,CLIPTokenizer:()=>v.CLIPTokenizer,CLIPVisionModelWithProjection:()=>u.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>u.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>u.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>u.CamembertForSequenceClassification,CamembertForTokenClassification:()=>u.CamembertForTokenClassification,CamembertModel:()=>u.CamembertModel,CamembertPreTrainedModel:()=>u.CamembertPreTrainedModel,CamembertTokenizer:()=>v.CamembertTokenizer,CausalLMOutput:()=>u.CausalLMOutput,CausalLMOutputWithPast:()=>u.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>W.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>u.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>u.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>u.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>W.ClapFeatureExtractor,ClapModel:()=>u.ClapModel,ClapPreTrainedModel:()=>u.ClapPreTrainedModel,ClapTextModelWithProjection:()=>u.ClapTextModelWithProjection,CodeGenForCausalLM:()=>u.CodeGenForCausalLM,CodeGenModel:()=>u.CodeGenModel,CodeGenPreTrainedModel:()=>u.CodeGenPreTrainedModel,CodeGenTokenizer:()=>v.CodeGenTokenizer,CodeLlamaTokenizer:()=>v.CodeLlamaTokenizer,CohereForCausalLM:()=>u.CohereForCausalLM,CohereModel:()=>u.CohereModel,CoherePreTrainedModel:()=>u.CoherePreTrainedModel,CohereTokenizer:()=>v.CohereTokenizer,ConvBertForMaskedLM:()=>u.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>u.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>u.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>u.ConvBertForTokenClassification,ConvBertModel:()=>u.ConvBertModel,ConvBertPreTrainedModel:()=>u.ConvBertPreTrainedModel,ConvBertTokenizer:()=>v.ConvBertTokenizer,ConvNextFeatureExtractor:()=>W.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>u.ConvNextForImageClassification,ConvNextImageProcessor:()=>W.ConvNextImageProcessor,ConvNextModel:()=>u.ConvNextModel,ConvNextPreTrainedModel:()=>u.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>u.ConvNextV2ForImageClassification,ConvNextV2Model:()=>u.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>u.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>W.DPTFeatureExtractor,DPTForDepthEstimation:()=>u.DPTForDepthEstimation,DPTImageProcessor:()=>W.DPTImageProcessor,DPTModel:()=>u.DPTModel,DPTPreTrainedModel:()=>u.DPTPreTrainedModel,DebertaForMaskedLM:()=>u.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>u.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>u.DebertaForSequenceClassification,DebertaForTokenClassification:()=>u.DebertaForTokenClassification,DebertaModel:()=>u.DebertaModel,DebertaPreTrainedModel:()=>u.DebertaPreTrainedModel,DebertaTokenizer:()=>v.DebertaTokenizer,DebertaV2ForMaskedLM:()=>u.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>u.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>u.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>u.DebertaV2ForTokenClassification,DebertaV2Model:()=>u.DebertaV2Model,DebertaV2PreTrainedModel:()=>u.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>v.DebertaV2Tokenizer,DeiTFeatureExtractor:()=>W.DeiTFeatureExtractor,DeiTForImageClassification:()=>u.DeiTForImageClassification,DeiTModel:()=>u.DeiTModel,DeiTPreTrainedModel:()=>u.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>u.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>u.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>pe.DepthEstimationPipeline,DetrFeatureExtractor:()=>W.DetrFeatureExtractor,DetrForObjectDetection:()=>u.DetrForObjectDetection,DetrForSegmentation:()=>u.DetrForSegmentation,DetrModel:()=>u.DetrModel,DetrObjectDetectionOutput:()=>u.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>u.DetrPreTrainedModel,DetrSegmentationOutput:()=>u.DetrSegmentationOutput,Dinov2ForImageClassification:()=>u.Dinov2ForImageClassification,Dinov2Model:()=>u.Dinov2Model,Dinov2PreTrainedModel:()=>u.Dinov2PreTrainedModel,DistilBertForMaskedLM:()=>u.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>u.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>u.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>u.DistilBertForTokenClassification,DistilBertModel:()=>u.DistilBertModel,DistilBertPreTrainedModel:()=>u.DistilBertPreTrainedModel,DistilBertTokenizer:()=>v.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>pe.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>W.DonutFeatureExtractor,DonutSwinModel:()=>u.DonutSwinModel,DonutSwinPreTrainedModel:()=>u.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>u.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>W.EfficientNetImageProcessor,EfficientNetModel:()=>u.EfficientNetModel,EfficientNetPreTrainedModel:()=>u.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>u.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>u.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>u.ElectraForSequenceClassification,ElectraForTokenClassification:()=>u.ElectraForTokenClassification,ElectraModel:()=>u.ElectraModel,ElectraPreTrainedModel:()=>u.ElectraPreTrainedModel,ElectraTokenizer:()=>v.ElectraTokenizer,EosTokenCriteria:()=>P.EosTokenCriteria,EsmForMaskedLM:()=>u.EsmForMaskedLM,EsmForSequenceClassification:()=>u.EsmForSequenceClassification,EsmForTokenClassification:()=>u.EsmForTokenClassification,EsmModel:()=>u.EsmModel,EsmPreTrainedModel:()=>u.EsmPreTrainedModel,EsmTokenizer:()=>v.EsmTokenizer,FFT:()=>E.FFT,FalconForCausalLM:()=>u.FalconForCausalLM,FalconModel:()=>u.FalconModel,FalconPreTrainedModel:()=>u.FalconPreTrainedModel,FalconTokenizer:()=>v.FalconTokenizer,FastViTForImageClassification:()=>u.FastViTForImageClassification,FastViTModel:()=>u.FastViTModel,FastViTPreTrainedModel:()=>u.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>pe.FeatureExtractionPipeline,FeatureExtractor:()=>W.FeatureExtractor,FillMaskPipeline:()=>pe.FillMaskPipeline,Florence2ForConditionalGeneration:()=>u.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>u.Florence2PreTrainedModel,Florence2Processor:()=>W.Florence2Processor,GLPNFeatureExtractor:()=>W.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>u.GLPNForDepthEstimation,GLPNModel:()=>u.GLPNModel,GLPNPreTrainedModel:()=>u.GLPNPreTrainedModel,GPT2LMHeadModel:()=>u.GPT2LMHeadModel,GPT2Model:()=>u.GPT2Model,GPT2PreTrainedModel:()=>u.GPT2PreTrainedModel,GPT2Tokenizer:()=>v.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>u.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>u.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>u.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>u.GPTJForCausalLM,GPTJModel:()=>u.GPTJModel,GPTJPreTrainedModel:()=>u.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>u.GPTNeoForCausalLM,GPTNeoModel:()=>u.GPTNeoModel,GPTNeoPreTrainedModel:()=>u.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>u.GPTNeoXForCausalLM,GPTNeoXModel:()=>u.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>u.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>v.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>u.Gemma2ForCausalLM,Gemma2Model:()=>u.Gemma2Model,Gemma2PreTrainedModel:()=>u.Gemma2PreTrainedModel,GemmaForCausalLM:()=>u.GemmaForCausalLM,GemmaModel:()=>u.GemmaModel,GemmaPreTrainedModel:()=>u.GemmaPreTrainedModel,GemmaTokenizer:()=>v.GemmaTokenizer,Grok1Tokenizer:()=>v.Grok1Tokenizer,HerbertTokenizer:()=>v.HerbertTokenizer,HubertForCTC:()=>u.HubertForCTC,HubertForSequenceClassification:()=>u.HubertForSequenceClassification,HubertModel:()=>u.HubertModel,HubertPreTrainedModel:()=>u.HubertPreTrainedModel,ImageClassificationPipeline:()=>pe.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>pe.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>W.ImageFeatureExtractor,ImageMattingOutput:()=>u.ImageMattingOutput,ImageSegmentationPipeline:()=>pe.ImageSegmentationPipeline,ImageToImagePipeline:()=>pe.ImageToImagePipeline,ImageToTextPipeline:()=>pe.ImageToTextPipeline,InterruptableStoppingCriteria:()=>P.InterruptableStoppingCriteria,LlamaForCausalLM:()=>u.LlamaForCausalLM,LlamaModel:()=>u.LlamaModel,LlamaPreTrainedModel:()=>u.LlamaPreTrainedModel,LlamaTokenizer:()=>v.LlamaTokenizer,LlavaForConditionalGeneration:()=>u.LlavaForConditionalGeneration,LlavaPreTrainedModel:()=>u.LlavaPreTrainedModel,LongT5ForConditionalGeneration:()=>u.LongT5ForConditionalGeneration,LongT5Model:()=>u.LongT5Model,LongT5PreTrainedModel:()=>u.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>u.M2M100ForConditionalGeneration,M2M100Model:()=>u.M2M100Model,M2M100PreTrainedModel:()=>u.M2M100PreTrainedModel,M2M100Tokenizer:()=>v.M2M100Tokenizer,MBart50Tokenizer:()=>v.MBart50Tokenizer,MBartForCausalLM:()=>u.MBartForCausalLM,MBartForConditionalGeneration:()=>u.MBartForConditionalGeneration,MBartForSequenceClassification:()=>u.MBartForSequenceClassification,MBartModel:()=>u.MBartModel,MBartPreTrainedModel:()=>u.MBartPreTrainedModel,MBartTokenizer:()=>v.MBartTokenizer,MPNetForMaskedLM:()=>u.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>u.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>u.MPNetForSequenceClassification,MPNetForTokenClassification:()=>u.MPNetForTokenClassification,MPNetModel:()=>u.MPNetModel,MPNetPreTrainedModel:()=>u.MPNetPreTrainedModel,MPNetTokenizer:()=>v.MPNetTokenizer,MT5ForConditionalGeneration:()=>u.MT5ForConditionalGeneration,MT5Model:()=>u.MT5Model,MT5PreTrainedModel:()=>u.MT5PreTrainedModel,MarianMTModel:()=>u.MarianMTModel,MarianModel:()=>u.MarianModel,MarianPreTrainedModel:()=>u.MarianPreTrainedModel,MarianTokenizer:()=>v.MarianTokenizer,MaskedLMOutput:()=>u.MaskedLMOutput,MaxLengthCriteria:()=>P.MaxLengthCriteria,MistralForCausalLM:()=>u.MistralForCausalLM,MistralModel:()=>u.MistralModel,MistralPreTrainedModel:()=>u.MistralPreTrainedModel,MobileBertForMaskedLM:()=>u.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>u.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>u.MobileBertForSequenceClassification,MobileBertModel:()=>u.MobileBertModel,MobileBertPreTrainedModel:()=>u.MobileBertPreTrainedModel,MobileBertTokenizer:()=>v.MobileBertTokenizer,MobileNetV1FeatureExtractor:()=>W.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>u.MobileNetV1ForImageClassification,MobileNetV1Model:()=>u.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>u.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>W.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>u.MobileNetV2ForImageClassification,MobileNetV2Model:()=>u.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>u.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>W.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>u.MobileNetV3ForImageClassification,MobileNetV3Model:()=>u.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>u.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>W.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>u.MobileNetV4ForImageClassification,MobileNetV4Model:()=>u.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>u.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>W.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>u.MobileViTForImageClassification,MobileViTImageProcessor:()=>W.MobileViTImageProcessor,MobileViTModel:()=>u.MobileViTModel,MobileViTPreTrainedModel:()=>u.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>u.MobileViTV2ForImageClassification,MobileViTV2Model:()=>u.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>u.MobileViTV2PreTrainedModel,ModelOutput:()=>u.ModelOutput,Moondream1ForConditionalGeneration:()=>u.Moondream1ForConditionalGeneration,MptForCausalLM:()=>u.MptForCausalLM,MptModel:()=>u.MptModel,MptPreTrainedModel:()=>u.MptPreTrainedModel,MusicgenForCausalLM:()=>u.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>u.MusicgenForConditionalGeneration,MusicgenModel:()=>u.MusicgenModel,MusicgenPreTrainedModel:()=>u.MusicgenPreTrainedModel,NllbTokenizer:()=>v.NllbTokenizer,NomicBertModel:()=>u.NomicBertModel,NomicBertPreTrainedModel:()=>u.NomicBertPreTrainedModel,NougatImageProcessor:()=>W.NougatImageProcessor,NougatTokenizer:()=>v.NougatTokenizer,OPTForCausalLM:()=>u.OPTForCausalLM,OPTModel:()=>u.OPTModel,OPTPreTrainedModel:()=>u.OPTPreTrainedModel,ObjectDetectionPipeline:()=>pe.ObjectDetectionPipeline,OpenELMForCausalLM:()=>u.OpenELMForCausalLM,OpenELMModel:()=>u.OpenELMModel,OpenELMPreTrainedModel:()=>u.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>W.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>u.OwlViTForObjectDetection,OwlViTModel:()=>u.OwlViTModel,OwlViTPreTrainedModel:()=>u.OwlViTPreTrainedModel,OwlViTProcessor:()=>W.OwlViTProcessor,Owlv2ForObjectDetection:()=>u.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>W.Owlv2ImageProcessor,Owlv2Model:()=>u.Owlv2Model,Owlv2PreTrainedModel:()=>u.Owlv2PreTrainedModel,Phi3ForCausalLM:()=>u.Phi3ForCausalLM,Phi3Model:()=>u.Phi3Model,Phi3PreTrainedModel:()=>u.Phi3PreTrainedModel,PhiForCausalLM:()=>u.PhiForCausalLM,PhiModel:()=>u.PhiModel,PhiPreTrainedModel:()=>u.PhiPreTrainedModel,Pipeline:()=>pe.Pipeline,PreTrainedModel:()=>u.PreTrainedModel,PreTrainedTokenizer:()=>v.PreTrainedTokenizer,PretrainedConfig:()=>me.PretrainedConfig,PretrainedMixin:()=>u.PretrainedMixin,Processor:()=>W.Processor,PyAnnoteFeatureExtractor:()=>W.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>u.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>u.PyAnnoteModel,PyAnnotePreTrainedModel:()=>u.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>W.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>u.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>pe.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>u.Qwen2ForCausalLM,Qwen2Model:()=>u.Qwen2Model,Qwen2PreTrainedModel:()=>u.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>v.Qwen2Tokenizer,RTDetrForObjectDetection:()=>u.RTDetrForObjectDetection,RTDetrImageProcessor:()=>W.RTDetrImageProcessor,RTDetrModel:()=>u.RTDetrModel,RTDetrObjectDetectionOutput:()=>u.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>u.RTDetrPreTrainedModel,RawImage:()=>Me.RawImage,ResNetForImageClassification:()=>u.ResNetForImageClassification,ResNetModel:()=>u.ResNetModel,ResNetPreTrainedModel:()=>u.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>u.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>u.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>u.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>u.RoFormerForTokenClassification,RoFormerModel:()=>u.RoFormerModel,RoFormerPreTrainedModel:()=>u.RoFormerPreTrainedModel,RoFormerTokenizer:()=>v.RoFormerTokenizer,RobertaForMaskedLM:()=>u.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>u.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>u.RobertaForSequenceClassification,RobertaForTokenClassification:()=>u.RobertaForTokenClassification,RobertaModel:()=>u.RobertaModel,RobertaPreTrainedModel:()=>u.RobertaPreTrainedModel,RobertaTokenizer:()=>v.RobertaTokenizer,SamImageProcessor:()=>W.SamImageProcessor,SamImageSegmentationOutput:()=>u.SamImageSegmentationOutput,SamModel:()=>u.SamModel,SamPreTrainedModel:()=>u.SamPreTrainedModel,SamProcessor:()=>W.SamProcessor,SeamlessM4TFeatureExtractor:()=>W.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>W.SegformerFeatureExtractor,SegformerForImageClassification:()=>u.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>u.SegformerForSemanticSegmentation,SegformerModel:()=>u.SegformerModel,SegformerPreTrainedModel:()=>u.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>u.Seq2SeqLMOutput,SequenceClassifierOutput:()=>u.SequenceClassifierOutput,SiglipImageProcessor:()=>W.SiglipImageProcessor,SiglipModel:()=>u.SiglipModel,SiglipPreTrainedModel:()=>u.SiglipPreTrainedModel,SiglipTextModel:()=>u.SiglipTextModel,SiglipTokenizer:()=>v.SiglipTokenizer,SiglipVisionModel:()=>u.SiglipVisionModel,SpeechT5FeatureExtractor:()=>W.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>u.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>u.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>u.SpeechT5HifiGan,SpeechT5Model:()=>u.SpeechT5Model,SpeechT5PreTrainedModel:()=>u.SpeechT5PreTrainedModel,SpeechT5Processor:()=>W.SpeechT5Processor,SpeechT5Tokenizer:()=>v.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>u.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>u.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>u.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>u.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>u.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>v.SqueezeBertTokenizer,StableLmForCausalLM:()=>u.StableLmForCausalLM,StableLmModel:()=>u.StableLmModel,StableLmPreTrainedModel:()=>u.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>u.Starcoder2ForCausalLM,Starcoder2Model:()=>u.Starcoder2Model,Starcoder2PreTrainedModel:()=>u.Starcoder2PreTrainedModel,StoppingCriteria:()=>P.StoppingCriteria,StoppingCriteriaList:()=>P.StoppingCriteriaList,SummarizationPipeline:()=>pe.SummarizationPipeline,Swin2SRForImageSuperResolution:()=>u.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>W.Swin2SRImageProcessor,Swin2SRModel:()=>u.Swin2SRModel,Swin2SRPreTrainedModel:()=>u.Swin2SRPreTrainedModel,SwinForImageClassification:()=>u.SwinForImageClassification,SwinModel:()=>u.SwinModel,SwinPreTrainedModel:()=>u.SwinPreTrainedModel,T5ForConditionalGeneration:()=>u.T5ForConditionalGeneration,T5Model:()=>u.T5Model,T5PreTrainedModel:()=>u.T5PreTrainedModel,T5Tokenizer:()=>v.T5Tokenizer,TableTransformerForObjectDetection:()=>u.TableTransformerForObjectDetection,TableTransformerModel:()=>u.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>u.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>u.TableTransformerPreTrainedModel,Tensor:()=>D.Tensor,Text2TextGenerationPipeline:()=>pe.Text2TextGenerationPipeline,TextClassificationPipeline:()=>pe.TextClassificationPipeline,TextGenerationPipeline:()=>pe.TextGenerationPipeline,TextStreamer:()=>N.TextStreamer,TextToAudioPipeline:()=>pe.TextToAudioPipeline,TokenClassificationPipeline:()=>pe.TokenClassificationPipeline,TokenClassifierOutput:()=>u.TokenClassifierOutput,TokenizerModel:()=>v.TokenizerModel,TrOCRForCausalLM:()=>u.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>u.TrOCRPreTrainedModel,TranslationPipeline:()=>pe.TranslationPipeline,UniSpeechForCTC:()=>u.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>u.UniSpeechForSequenceClassification,UniSpeechModel:()=>u.UniSpeechModel,UniSpeechPreTrainedModel:()=>u.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>u.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>u.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>u.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>u.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>u.UniSpeechSatPreTrainedModel,ViTFeatureExtractor:()=>W.ViTFeatureExtractor,ViTForImageClassification:()=>u.ViTForImageClassification,ViTImageProcessor:()=>W.ViTImageProcessor,ViTModel:()=>u.ViTModel,ViTPreTrainedModel:()=>u.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>u.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>u.VitMatteForImageMatting,VitMatteImageProcessor:()=>W.VitMatteImageProcessor,VitMattePreTrainedModel:()=>u.VitMattePreTrainedModel,VitsModel:()=>u.VitsModel,VitsModelOutput:()=>u.VitsModelOutput,VitsPreTrainedModel:()=>u.VitsPreTrainedModel,VitsTokenizer:()=>v.VitsTokenizer,Wav2Vec2BertForCTC:()=>u.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>u.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>u.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>u.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>v.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>W.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>u.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>u.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>u.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>u.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>u.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>W.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>u.WavLMForAudioFrameClassification,WavLMForCTC:()=>u.WavLMForCTC,WavLMForSequenceClassification:()=>u.WavLMForSequenceClassification,WavLMForXVector:()=>u.WavLMForXVector,WavLMModel:()=>u.WavLMModel,WavLMPreTrainedModel:()=>u.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>W.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>u.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>u.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>W.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>u.WhisperForConditionalGeneration,WhisperModel:()=>u.WhisperModel,WhisperPreTrainedModel:()=>u.WhisperPreTrainedModel,WhisperProcessor:()=>W.WhisperProcessor,WhisperTextStreamer:()=>N.WhisperTextStreamer,WhisperTokenizer:()=>v.WhisperTokenizer,XLMForQuestionAnswering:()=>u.XLMForQuestionAnswering,XLMForSequenceClassification:()=>u.XLMForSequenceClassification,XLMForTokenClassification:()=>u.XLMForTokenClassification,XLMModel:()=>u.XLMModel,XLMPreTrainedModel:()=>u.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>u.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>u.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>u.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>u.XLMRobertaForTokenClassification,XLMRobertaModel:()=>u.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>u.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>v.XLMRobertaTokenizer,XLMTokenizer:()=>v.XLMTokenizer,XLMWithLMHeadModel:()=>u.XLMWithLMHeadModel,XVectorOutput:()=>u.XVectorOutput,YolosFeatureExtractor:()=>W.YolosFeatureExtractor,YolosForObjectDetection:()=>u.YolosForObjectDetection,YolosModel:()=>u.YolosModel,YolosObjectDetectionOutput:()=>u.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>u.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>pe.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>pe.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>pe.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>pe.ZeroShotObjectDetectionPipeline,bankers_round:()=>E.bankers_round,cat:()=>D.cat,cos_sim:()=>E.cos_sim,dot:()=>E.dot,dynamic_time_warping:()=>E.dynamic_time_warping,env:()=>yt.env,full:()=>D.full,full_like:()=>D.full_like,getKeyValueShapes:()=>me.getKeyValueShapes,hamming:()=>be.hamming,hanning:()=>be.hanning,interpolate:()=>D.interpolate,interpolate_4d:()=>D.interpolate_4d,interpolate_data:()=>E.interpolate_data,is_chinese_char:()=>v.is_chinese_char,layer_norm:()=>D.layer_norm,log_softmax:()=>E.log_softmax,magnitude:()=>E.magnitude,matmul:()=>D.matmul,max:()=>E.max,mean:()=>D.mean,mean_pooling:()=>D.mean_pooling,medianFilter:()=>E.medianFilter,mel_filter_bank:()=>be.mel_filter_bank,min:()=>E.min,ones:()=>D.ones,ones_like:()=>D.ones_like,permute:()=>D.permute,permute_data:()=>E.permute_data,pipeline:()=>pe.pipeline,quantize_embeddings:()=>D.quantize_embeddings,read_audio:()=>be.read_audio,rfft:()=>D.rfft,round:()=>E.round,softmax:()=>E.softmax,spectrogram:()=>be.spectrogram,stack:()=>D.stack,std_mean:()=>D.std_mean,topk:()=>D.topk,window_function:()=>be.window_function,zeros:()=>D.zeros,zeros_like:()=>D.zeros_like});var yt=Rr("./src/env.js"),pe=Rr("./src/pipelines.js"),u=Rr("./src/models.js"),v=Rr("./src/tokenizers.js"),W=Rr("./src/processors.js"),me=Rr("./src/configs.js"),be=Rr("./src/utils/audio.js"),Me=Rr("./src/utils/image.js"),D=Rr("./src/utils/tensor.js"),E=Rr("./src/utils/maths.js"),N=Rr("./src/generation/streamers.js"),P=Rr("./src/generation/stopping_criteria.js")})(),p.ASTFeatureExtractor,p.ASTForAudioClassification,p.ASTModel,p.ASTPreTrainedModel,p.AlbertForMaskedLM,p.AlbertForQuestionAnswering,p.AlbertForSequenceClassification,p.AlbertModel,p.AlbertPreTrainedModel,p.AlbertTokenizer,p.AudioClassificationPipeline,p.AutoConfig,p.AutoModel,p.AutoModelForAudioClassification,p.AutoModelForAudioFrameClassification,p.AutoModelForCTC,p.AutoModelForCausalLM,p.AutoModelForDepthEstimation,p.AutoModelForDocumentQuestionAnswering,p.AutoModelForImageClassification,p.AutoModelForImageFeatureExtraction,p.AutoModelForImageMatting,p.AutoModelForImageSegmentation,p.AutoModelForImageToImage,p.AutoModelForMaskGeneration,p.AutoModelForMaskedLM,p.AutoModelForObjectDetection,p.AutoModelForQuestionAnswering,p.AutoModelForSemanticSegmentation,p.AutoModelForSeq2SeqLM,p.AutoModelForSequenceClassification,p.AutoModelForSpeechSeq2Seq,p.AutoModelForTextToSpectrogram,p.AutoModelForTextToWaveform,p.AutoModelForTokenClassification,p.AutoModelForVision2Seq,p.AutoModelForXVector,p.AutoModelForZeroShotObjectDetection;var Yh=p.AutoProcessor,Zh=p.AutoTokenizer;p.AutomaticSpeechRecognitionPipeline,p.BartForConditionalGeneration,p.BartForSequenceClassification,p.BartModel,p.BartPretrainedModel,p.BartTokenizer,p.BaseModelOutput,p.BaseStreamer,p.BeitFeatureExtractor,p.BeitForImageClassification,p.BeitModel,p.BeitPreTrainedModel,p.BertForMaskedLM,p.BertForQuestionAnswering,p.BertForSequenceClassification,p.BertForTokenClassification,p.BertModel,p.BertPreTrainedModel,p.BertTokenizer,p.BitImageProcessor,p.BlenderbotForConditionalGeneration,p.BlenderbotModel,p.BlenderbotPreTrainedModel,p.BlenderbotSmallForConditionalGeneration,p.BlenderbotSmallModel,p.BlenderbotSmallPreTrainedModel,p.BlenderbotSmallTokenizer,p.BlenderbotTokenizer,p.BloomForCausalLM,p.BloomModel,p.BloomPreTrainedModel,p.BloomTokenizer,p.CLIPFeatureExtractor,p.CLIPImageProcessor,p.CLIPModel,p.CLIPPreTrainedModel,p.CLIPSegForImageSegmentation,p.CLIPSegModel,p.CLIPSegPreTrainedModel;var Jh=p.CLIPTextModelWithProjection;p.CLIPTokenizer;var ef=p.CLIPVisionModelWithProjection;p.CamembertForMaskedLM,p.CamembertForQuestionAnswering,p.CamembertForSequenceClassification,p.CamembertForTokenClassification,p.CamembertModel,p.CamembertPreTrainedModel,p.CamembertTokenizer,p.CausalLMOutput,p.CausalLMOutputWithPast,p.ChineseCLIPFeatureExtractor,p.ChineseCLIPModel,p.ChineseCLIPPreTrainedModel,p.ClapAudioModelWithProjection,p.ClapFeatureExtractor,p.ClapModel,p.ClapPreTrainedModel,p.ClapTextModelWithProjection,p.CodeGenForCausalLM,p.CodeGenModel,p.CodeGenPreTrainedModel,p.CodeGenTokenizer,p.CodeLlamaTokenizer,p.CohereForCausalLM,p.CohereModel,p.CoherePreTrainedModel,p.CohereTokenizer,p.ConvBertForMaskedLM,p.ConvBertForQuestionAnswering,p.ConvBertForSequenceClassification,p.ConvBertForTokenClassification,p.ConvBertModel,p.ConvBertPreTrainedModel,p.ConvBertTokenizer,p.ConvNextFeatureExtractor,p.ConvNextForImageClassification,p.ConvNextImageProcessor,p.ConvNextModel,p.ConvNextPreTrainedModel,p.ConvNextV2ForImageClassification,p.ConvNextV2Model,p.ConvNextV2PreTrainedModel,p.DPTFeatureExtractor,p.DPTForDepthEstimation,p.DPTImageProcessor,p.DPTModel,p.DPTPreTrainedModel,p.DebertaForMaskedLM,p.DebertaForQuestionAnswering,p.DebertaForSequenceClassification,p.DebertaForTokenClassification,p.DebertaModel,p.DebertaPreTrainedModel,p.DebertaTokenizer,p.DebertaV2ForMaskedLM,p.DebertaV2ForQuestionAnswering,p.DebertaV2ForSequenceClassification,p.DebertaV2ForTokenClassification,p.DebertaV2Model,p.DebertaV2PreTrainedModel,p.DebertaV2Tokenizer,p.DeiTFeatureExtractor,p.DeiTForImageClassification,p.DeiTModel,p.DeiTPreTrainedModel,p.DepthAnythingForDepthEstimation,p.DepthAnythingPreTrainedModel,p.DepthEstimationPipeline,p.DetrFeatureExtractor,p.DetrForObjectDetection,p.DetrForSegmentation,p.DetrModel,p.DetrObjectDetectionOutput,p.DetrPreTrainedModel,p.DetrSegmentationOutput,p.Dinov2ForImageClassification,p.Dinov2Model,p.Dinov2PreTrainedModel,p.DistilBertForMaskedLM,p.DistilBertForQuestionAnswering,p.DistilBertForSequenceClassification,p.DistilBertForTokenClassification,p.DistilBertModel,p.DistilBertPreTrainedModel,p.DistilBertTokenizer,p.DocumentQuestionAnsweringPipeline,p.DonutFeatureExtractor,p.DonutSwinModel,p.DonutSwinPreTrainedModel,p.EfficientNetForImageClassification,p.EfficientNetImageProcessor,p.EfficientNetModel,p.EfficientNetPreTrainedModel,p.ElectraForMaskedLM,p.ElectraForQuestionAnswering,p.ElectraForSequenceClassification,p.ElectraForTokenClassification,p.ElectraModel,p.ElectraPreTrainedModel,p.ElectraTokenizer,p.EosTokenCriteria,p.EsmForMaskedLM,p.EsmForSequenceClassification,p.EsmForTokenClassification,p.EsmModel,p.EsmPreTrainedModel,p.EsmTokenizer,p.FFT,p.FalconForCausalLM,p.FalconModel,p.FalconPreTrainedModel,p.FalconTokenizer,p.FastViTForImageClassification,p.FastViTModel,p.FastViTPreTrainedModel,p.FeatureExtractionPipeline,p.FeatureExtractor,p.FillMaskPipeline,p.Florence2ForConditionalGeneration,p.Florence2PreTrainedModel,p.Florence2Processor,p.GLPNFeatureExtractor,p.GLPNForDepthEstimation,p.GLPNModel,p.GLPNPreTrainedModel,p.GPT2LMHeadModel,p.GPT2Model,p.GPT2PreTrainedModel,p.GPT2Tokenizer,p.GPTBigCodeForCausalLM,p.GPTBigCodeModel,p.GPTBigCodePreTrainedModel,p.GPTJForCausalLM,p.GPTJModel,p.GPTJPreTrainedModel,p.GPTNeoForCausalLM,p.GPTNeoModel,p.GPTNeoPreTrainedModel,p.GPTNeoXForCausalLM,p.GPTNeoXModel,p.GPTNeoXPreTrainedModel,p.GPTNeoXTokenizer,p.Gemma2ForCausalLM,p.Gemma2Model,p.Gemma2PreTrainedModel,p.GemmaForCausalLM,p.GemmaModel,p.GemmaPreTrainedModel,p.GemmaTokenizer,p.Grok1Tokenizer,p.HerbertTokenizer,p.HubertForCTC,p.HubertForSequenceClassification,p.HubertModel,p.HubertPreTrainedModel,p.ImageClassificationPipeline,p.ImageFeatureExtractionPipeline,p.ImageFeatureExtractor,p.ImageMattingOutput,p.ImageSegmentationPipeline,p.ImageToImagePipeline,p.ImageToTextPipeline,p.InterruptableStoppingCriteria,p.LlamaForCausalLM,p.LlamaModel,p.LlamaPreTrainedModel,p.LlamaTokenizer,p.LlavaForConditionalGeneration,p.LlavaPreTrainedModel,p.LongT5ForConditionalGeneration,p.LongT5Model,p.LongT5PreTrainedModel,p.M2M100ForConditionalGeneration,p.M2M100Model,p.M2M100PreTrainedModel,p.M2M100Tokenizer,p.MBart50Tokenizer,p.MBartForCausalLM,p.MBartForConditionalGeneration,p.MBartForSequenceClassification,p.MBartModel,p.MBartPreTrainedModel,p.MBartTokenizer,p.MPNetForMaskedLM,p.MPNetForQuestionAnswering,p.MPNetForSequenceClassification,p.MPNetForTokenClassification,p.MPNetModel,p.MPNetPreTrainedModel,p.MPNetTokenizer,p.MT5ForConditionalGeneration,p.MT5Model,p.MT5PreTrainedModel,p.MarianMTModel,p.MarianModel,p.MarianPreTrainedModel,p.MarianTokenizer,p.MaskedLMOutput,p.MaxLengthCriteria,p.MistralForCausalLM,p.MistralModel,p.MistralPreTrainedModel,p.MobileBertForMaskedLM,p.MobileBertForQuestionAnswering,p.MobileBertForSequenceClassification,p.MobileBertModel,p.MobileBertPreTrainedModel,p.MobileBertTokenizer,p.MobileNetV1FeatureExtractor,p.MobileNetV1ForImageClassification,p.MobileNetV1Model,p.MobileNetV1PreTrainedModel,p.MobileNetV2FeatureExtractor,p.MobileNetV2ForImageClassification,p.MobileNetV2Model,p.MobileNetV2PreTrainedModel,p.MobileNetV3FeatureExtractor,p.MobileNetV3ForImageClassification,p.MobileNetV3Model,p.MobileNetV3PreTrainedModel,p.MobileNetV4FeatureExtractor,p.MobileNetV4ForImageClassification,p.MobileNetV4Model,p.MobileNetV4PreTrainedModel,p.MobileViTFeatureExtractor,p.MobileViTForImageClassification,p.MobileViTImageProcessor,p.MobileViTModel,p.MobileViTPreTrainedModel,p.MobileViTV2ForImageClassification,p.MobileViTV2Model,p.MobileViTV2PreTrainedModel,p.ModelOutput,p.Moondream1ForConditionalGeneration,p.MptForCausalLM,p.MptModel,p.MptPreTrainedModel,p.MusicgenForCausalLM,p.MusicgenForConditionalGeneration,p.MusicgenModel,p.MusicgenPreTrainedModel,p.NllbTokenizer,p.NomicBertModel,p.NomicBertPreTrainedModel,p.NougatImageProcessor,p.NougatTokenizer,p.OPTForCausalLM,p.OPTModel,p.OPTPreTrainedModel,p.ObjectDetectionPipeline,p.OpenELMForCausalLM,p.OpenELMModel,p.OpenELMPreTrainedModel,p.OwlViTFeatureExtractor,p.OwlViTForObjectDetection,p.OwlViTModel,p.OwlViTPreTrainedModel,p.OwlViTProcessor,p.Owlv2ForObjectDetection,p.Owlv2ImageProcessor,p.Owlv2Model,p.Owlv2PreTrainedModel,p.Phi3ForCausalLM,p.Phi3Model,p.Phi3PreTrainedModel,p.PhiForCausalLM,p.PhiModel,p.PhiPreTrainedModel,p.Pipeline,p.PreTrainedModel,p.PreTrainedTokenizer,p.PretrainedConfig,p.PretrainedMixin,p.Processor,p.PyAnnoteFeatureExtractor,p.PyAnnoteForAudioFrameClassification,p.PyAnnoteModel,p.PyAnnotePreTrainedModel,p.PyAnnoteProcessor,p.QuestionAnsweringModelOutput,p.QuestionAnsweringPipeline,p.Qwen2ForCausalLM,p.Qwen2Model,p.Qwen2PreTrainedModel,p.Qwen2Tokenizer,p.RTDetrForObjectDetection,p.RTDetrImageProcessor,p.RTDetrModel,p.RTDetrObjectDetectionOutput,p.RTDetrPreTrainedModel;var tf=p.RawImage;p.ResNetForImageClassification,p.ResNetModel,p.ResNetPreTrainedModel,p.RoFormerForMaskedLM,p.RoFormerForQuestionAnswering,p.RoFormerForSequenceClassification,p.RoFormerForTokenClassification,p.RoFormerModel,p.RoFormerPreTrainedModel,p.RoFormerTokenizer,p.RobertaForMaskedLM,p.RobertaForQuestionAnswering,p.RobertaForSequenceClassification,p.RobertaForTokenClassification,p.RobertaModel,p.RobertaPreTrainedModel,p.RobertaTokenizer,p.SamImageProcessor,p.SamImageSegmentationOutput,p.SamModel,p.SamPreTrainedModel,p.SamProcessor,p.SeamlessM4TFeatureExtractor,p.SegformerFeatureExtractor,p.SegformerForImageClassification,p.SegformerForSemanticSegmentation,p.SegformerModel,p.SegformerPreTrainedModel,p.Seq2SeqLMOutput,p.SequenceClassifierOutput,p.SiglipImageProcessor,p.SiglipModel,p.SiglipPreTrainedModel,p.SiglipTextModel,p.SiglipTokenizer,p.SiglipVisionModel,p.SpeechT5FeatureExtractor,p.SpeechT5ForSpeechToText,p.SpeechT5ForTextToSpeech,p.SpeechT5HifiGan,p.SpeechT5Model,p.SpeechT5PreTrainedModel,p.SpeechT5Processor,p.SpeechT5Tokenizer,p.SqueezeBertForMaskedLM,p.SqueezeBertForQuestionAnswering,p.SqueezeBertForSequenceClassification,p.SqueezeBertModel,p.SqueezeBertPreTrainedModel,p.SqueezeBertTokenizer,p.StableLmForCausalLM,p.StableLmModel,p.StableLmPreTrainedModel,p.Starcoder2ForCausalLM,p.Starcoder2Model,p.Starcoder2PreTrainedModel,p.StoppingCriteria,p.StoppingCriteriaList,p.SummarizationPipeline,p.Swin2SRForImageSuperResolution,p.Swin2SRImageProcessor,p.Swin2SRModel,p.Swin2SRPreTrainedModel,p.SwinForImageClassification,p.SwinModel,p.SwinPreTrainedModel,p.T5ForConditionalGeneration,p.T5Model,p.T5PreTrainedModel,p.T5Tokenizer,p.TableTransformerForObjectDetection,p.TableTransformerModel,p.TableTransformerObjectDetectionOutput,p.TableTransformerPreTrainedModel,p.Tensor,p.Text2TextGenerationPipeline,p.TextClassificationPipeline,p.TextGenerationPipeline,p.TextStreamer,p.TextToAudioPipeline,p.TokenClassificationPipeline,p.TokenClassifierOutput,p.TokenizerModel,p.TrOCRForCausalLM,p.TrOCRPreTrainedModel,p.TranslationPipeline,p.UniSpeechForCTC,p.UniSpeechForSequenceClassification,p.UniSpeechModel,p.UniSpeechPreTrainedModel,p.UniSpeechSatForAudioFrameClassification,p.UniSpeechSatForCTC,p.UniSpeechSatForSequenceClassification,p.UniSpeechSatModel,p.UniSpeechSatPreTrainedModel,p.ViTFeatureExtractor,p.ViTForImageClassification,p.ViTImageProcessor,p.ViTModel,p.ViTPreTrainedModel,p.VisionEncoderDecoderModel,p.VitMatteForImageMatting,p.VitMatteImageProcessor,p.VitMattePreTrainedModel,p.VitsModel,p.VitsModelOutput,p.VitsPreTrainedModel,p.VitsTokenizer,p.Wav2Vec2BertForCTC,p.Wav2Vec2BertForSequenceClassification,p.Wav2Vec2BertModel,p.Wav2Vec2BertPreTrainedModel,p.Wav2Vec2CTCTokenizer,p.Wav2Vec2FeatureExtractor,p.Wav2Vec2ForAudioFrameClassification,p.Wav2Vec2ForCTC,p.Wav2Vec2ForSequenceClassification,p.Wav2Vec2Model,p.Wav2Vec2PreTrainedModel,p.Wav2Vec2ProcessorWithLM,p.WavLMForAudioFrameClassification,p.WavLMForCTC,p.WavLMForSequenceClassification,p.WavLMForXVector,p.WavLMModel,p.WavLMPreTrainedModel,p.WeSpeakerFeatureExtractor,p.WeSpeakerResNetModel,p.WeSpeakerResNetPreTrainedModel,p.WhisperFeatureExtractor,p.WhisperForConditionalGeneration,p.WhisperModel,p.WhisperPreTrainedModel,p.WhisperProcessor,p.WhisperTextStreamer,p.WhisperTokenizer,p.XLMForQuestionAnswering,p.XLMForSequenceClassification,p.XLMForTokenClassification,p.XLMModel,p.XLMPreTrainedModel,p.XLMRobertaForMaskedLM,p.XLMRobertaForQuestionAnswering,p.XLMRobertaForSequenceClassification,p.XLMRobertaForTokenClassification,p.XLMRobertaModel,p.XLMRobertaPreTrainedModel,p.XLMRobertaTokenizer,p.XLMTokenizer,p.XLMWithLMHeadModel,p.XVectorOutput,p.YolosFeatureExtractor,p.YolosForObjectDetection,p.YolosModel,p.YolosObjectDetectionOutput,p.YolosPreTrainedModel,p.ZeroShotAudioClassificationPipeline,p.ZeroShotClassificationPipeline,p.ZeroShotImageClassificationPipeline,p.ZeroShotObjectDetectionPipeline,p.bankers_round,p.cat,p.cos_sim,p.dot,p.dynamic_time_warping,p.env,p.full,p.full_like,p.getKeyValueShapes,p.hamming,p.hanning,p.interpolate,p.interpolate_4d,p.interpolate_data,p.is_chinese_char,p.layer_norm,p.log_softmax,p.magnitude,p.matmul,p.max,p.mean,p.mean_pooling,p.medianFilter,p.mel_filter_bank,p.min,p.ones,p.ones_like,p.permute,p.permute_data,p.pipeline,p.quantize_embeddings,p.read_audio,p.rfft,p.round,p.softmax,p.spectrogram,p.stack,p.std_mean,p.topk,p.window_function,p.zeros,p.zeros_like;let ac,lc,uc,dc;async function rf(){try{const yt=performance.now();ac=await Yh.from_pretrained("Xenova/clip-vit-base-patch32"),lc=await Zh.from_pretrained("Xenova/clip-vit-base-patch32"),uc=await ef.from_pretrained("Xenova/clip-vit-base-patch32"),dc=await Jh.from_pretrained("Xenova/clip-vit-base-patch32");const pe=performance.now();self.postMessage({type:"initialized",initTime:pe-yt})}catch(yt){self.postMessage({type:"error",error:yt.message})}}async function nf(yt){try{const pe=performance.now(),u=await Promise.all(yt.map(Me=>tf.fromBlob(Me))),v=await ac(u),{image_embeds:W}=await uc(v),me=W.tolist(),be=performance.now();return{embeddings:me,time:be-pe}}catch(pe){throw new Error("An error occurred while embedding the image: "+pe.message)}}async function sf(yt){try{const pe=performance.now(),u=await lc(yt,{padding:!0,truncation:!0}),{text_embeds:v}=await dc(u),W=v.tolist(),me=performance.now();return{embeddings:W,time:me-pe}}catch(pe){throw new Error("An error occurred while embedding the text: "+pe.message)}}self.onmessage=async yt=>{const{type:pe,payload:u}=yt.data;switch(pe){case"initialize":await rf();break;case"embedImage":try{const{embeddings:v,time:W}=await nf(u);self.postMessage({type:"imageEmbedding",result:v,time:W})}catch(v){self.postMessage({type:"error",error:v.message})}break;case"embedText":try{const{embeddings:v,time:W}=await sf(u);self.postMessage({type:"textEmbedding",result:v,time:W})}catch(v){self.postMessage({type:"error",error:v.message})}break}}})();
